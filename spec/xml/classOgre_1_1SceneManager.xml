<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classOgre_1_1SceneManager" kind="class" prot="public">
    <compoundname>Ogre::SceneManager</compoundname>
    <basecompoundref refid="classOgre_1_1AllocatedObject" prot="public" virt="non-virtual">Ogre::AllocatedObject&lt; SceneCtlAllocPolicy &gt;</basecompoundref>
    <derivedcompoundref refid="classOgre_1_1DefaultSceneManager" prot="public" virt="non-virtual">Ogre::DefaultSceneManager</derivedcompoundref>
    <includes refid="OgreSceneManager_8h" local="no">OgreSceneManager.h</includes>
    <innerclass refid="structOgre_1_1SceneManager_1_1LightClippingInfo" prot="protected">Ogre::SceneManager::LightClippingInfo</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1LightInfo" prot="protected">Ogre::SceneManager::LightInfo</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1lightLess" prot="public">Ogre::SceneManager::lightLess</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1lightsForShadowTextureLess" prot="protected">Ogre::SceneManager::lightsForShadowTextureLess</innerclass>
    <innerclass refid="classOgre_1_1SceneManager_1_1Listener" prot="public">Ogre::SceneManager::Listener</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1materialLess" prot="public">Ogre::SceneManager::materialLess</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1MovableObjectCollection" prot="protected">Ogre::SceneManager::MovableObjectCollection</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1RenderContext" prot="public">Ogre::SceneManager::RenderContext</innerclass>
    <innerclass refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor" prot="public">Ogre::SceneManager::SceneMgrQueuedRenderableVisitor</innerclass>
    <innerclass refid="classOgre_1_1SceneManager_1_1ShadowCasterSceneQueryListener" prot="protected">Ogre::SceneManager::ShadowCasterSceneQueryListener</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1SkyBoxGenParameters" prot="public">Ogre::SceneManager::SkyBoxGenParameters</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1SkyDomeGenParameters" prot="public">Ogre::SceneManager::SkyDomeGenParameters</innerclass>
    <innerclass refid="structOgre_1_1SceneManager_1_1SkyPlaneGenParameters" prot="public">Ogre::SceneManager::SkyPlaneGenParameters</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827" prot="public" static="no">
        <name>IlluminationRenderStage</name>
        <enumvalue id="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827a8fd3e7fb8fab382a9d29e6e081ae556a" prot="public">
          <name>IRS_NONE</name>
          <briefdescription>
<para>No special illumination stage. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827a8f99da7404ae8c16199dde8d34367b1a" prot="public">
          <name>IRS_RENDER_TO_TEXTURE</name>
          <briefdescription>
<para>Render to texture stage, used for texture based shadows. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827a0e1792a8ff0d3d19f121818e7028e846" prot="public">
          <name>IRS_RENDER_RECEIVER_PASS</name>
          <briefdescription>
<para>Render from shadow texture to receivers stage. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Describes the stage of rendering when performing complex illumination. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="171" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="enum" id="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6" prot="public" static="no">
        <name>SpecialCaseRenderQueueMode</name>
        <enumvalue id="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6a4f5291417680ce7d1715b7aef50869a7" prot="public">
          <name>SCRQM_INCLUDE</name>
          <briefdescription>
<para>Render only the queues in the special case list. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6acc6b7e38cc21cf87a29e17177dc1a0b3" prot="public">
          <name>SCRQM_EXCLUDE</name>
          <briefdescription>
<para>Render all except the queues in the special case list. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumeration of the possible modes allowed for processing the special case render queue list. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a10753c0e57be813e135395e3a882777a" kindref="member">SceneManager::setSpecialCaseRenderQueueMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="185" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="enum" id="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbf" prot="public" static="no">
        <name>PrefabType</name>
        <enumvalue id="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbfaf0fb654fb98508a564c17d3d5b2feee3" prot="public">
          <name>PT_PLANE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbfa25b0181d24b783ab75da2520305d292a" prot="public">
          <name>PT_CUBE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbfa0f94148c2cfe190f3ea04374af220eba" prot="public">
          <name>PT_SPHERE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prefab shapes available without loading a model. <simplesect kind="note"><para>Minimal implementation at present. </para></simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>Add more prefabs (teapots, teapots!!!) </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1367" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1367" bodyend="1371"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a22fcb8a9ddb7efe79d053a975a685111" prot="public" static="no">
        <type><ref refid="classOgre_1_1MapIterator" kindref="compound">MapIterator</ref>&lt; <ref refid="classOgre_1_1SceneManager_1aab859720031b39ec11a526ddfabcb8dd" kindref="member">CameraList</ref> &gt;</type>
        <definition>typedef MapIterator&lt;CameraList&gt; Ogre::SceneManager::CameraIterator</definition>
        <argsstring></argsstring>
        <name>CameraIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2645" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a3a720414f68274bb9c5026911e27135d" prot="public" static="no">
        <type><ref refid="classOgre_1_1MapIterator" kindref="compound">MapIterator</ref>&lt; <ref refid="classOgre_1_1SceneManager_1ad7cf782d8eb1d5b902348c722c9f4bec" kindref="member">AnimationList</ref> &gt;</type>
        <definition>typedef MapIterator&lt;AnimationList&gt; Ogre::SceneManager::AnimationIterator</definition>
        <argsstring></argsstring>
        <name>AnimationIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2646" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a4249682ae2a69255ed225383d930aec1" prot="public" static="no">
        <type><ref refid="classOgre_1_1MapIterator" kindref="compound">MapIterator</ref>&lt; <ref refid="classOgre_1_1SceneManager_1a9f66dd334bc7a328476408fdcbc72f6d" kindref="member">MovableObjectMap</ref> &gt;</type>
        <definition>typedef MapIterator&lt;MovableObjectMap&gt; Ogre::SceneManager::MovableObjectIterator</definition>
        <argsstring></argsstring>
        <name>MovableObjectIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3282" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960" prot="protected" static="no">
        <name>BoxPlane</name>
        <enumvalue id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960aad0dc80ea2675cc30bca626042fa78c4" prot="protected">
          <name>BP_FRONT</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960acfc07f1de74ca1a396f1d82a2d1c9c5e" prot="protected">
          <name>BP_BACK</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a09545bd5ad791db9589669756be1a280" prot="protected">
          <name>BP_LEFT</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a61400b6126b1da4e3ceaade1f1db7b56" prot="protected">
          <name>BP_RIGHT</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a4547263fba7fb6507a3ea251f72d8f14" prot="protected">
          <name>BP_UP</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a70e022fc77f94d5144db297d00effd67" prot="protected">
          <name>BP_DOWN</name>
          <initializer> 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="605" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="604" bodyend="612"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1aab859720031b39ec11a526ddfabcb8dd" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, Camera* &gt;::type Ogre::SceneManager::CameraList</definition>
        <argsstring></argsstring>
        <name>CameraList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="402" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1abb3204cddb559c0cd958a01c477083b8" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, StaticGeometry* &gt;::type Ogre::SceneManager::StaticGeometryList</definition>
        <argsstring></argsstring>
        <name>StaticGeometryList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="408" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a2091430fab5446019fc276d6b531dfb4" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, InstancedGeometry* &gt;::type Ogre::SceneManager::InstancedGeometryList</definition>
        <argsstring></argsstring>
        <name>InstancedGeometryList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="410" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1aeb7beb7e3723ebd4199c5a8f727a5829" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, InstanceManager*&gt;::type Ogre::SceneManager::InstanceManagerMap</definition>
        <argsstring></argsstring>
        <name>InstanceManagerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="413" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1abf8b0fc2e37f7c04d915498662442608" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, SceneNode*&gt;::type Ogre::SceneManager::SceneNodeList</definition>
        <argsstring></argsstring>
        <name>SceneNodeList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="416" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a43d83785d6d6b6ee36aa2d1b9d7576f2" prot="protected" static="no">
        <type><ref refid="structOgre_1_1set" kindref="compound">set</ref>&lt; <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> * &gt;::type</type>
        <definition>typedef set&lt;SceneNode*&gt;::type Ogre::SceneManager::AutoTrackingSceneNodes</definition>
        <argsstring></argsstring>
        <name>AutoTrackingSceneNodes</name>
        <briefdescription>
<para>Autotracking scene nodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="435" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1ac28fad9c8bde6dd8fa30a747b12fd727" prot="protected" static="no">
        <type><ref refid="structOgre_1_1set" kindref="compound">set</ref>&lt; <ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref> &gt;::type</type>
        <definition>typedef set&lt;uint8&gt;::type Ogre::SceneManager::SpecialCaseRenderQueueList</definition>
        <argsstring></argsstring>
        <name>SpecialCaseRenderQueueList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="471" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1acb0316a267f0f8fb7e79ff68a0e8d71d" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *, <ref refid="structOgre_1_1VisibleObjectsBoundsInfo" kindref="compound">VisibleObjectsBoundsInfo</ref> &gt;::type</type>
        <definition>typedef map&lt; const Camera*, VisibleObjectsBoundsInfo&gt;::type Ogre::SceneManager::CamVisibleObjectsMap</definition>
        <argsstring></argsstring>
        <name>CamVisibleObjectsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visible objects bounding box list. <simplesect kind="remark"><para>Holds an ABB for each camera that contains the physical extends of the visible scene elements by each camera. The map is crucial for shadow algorithms which have a focus step to limit the shadow sample distribution to only valid visible scene elements. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="494" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a8e1df30516b152b7b5f4b37f67a39402" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *, const <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> * &gt;::type</type>
        <definition>typedef map&lt; const Camera*, const Light* &gt;::type Ogre::SceneManager::ShadowCamLightMapping</definition>
        <argsstring></argsstring>
        <name>ShadowCamLightMapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ShadowCamera to light mapping </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="498" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a6748ee2b37ce2586eb7c93e48714bacf" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="structOgre_1_1SceneManager_1_1LightInfo" kindref="compound">LightInfo</ref> &gt;::type</type>
        <definition>typedef vector&lt;LightInfo&gt;::type Ogre::SceneManager::LightInfoList</definition>
        <argsstring></argsstring>
        <name>LightInfoList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="528" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a9f66dd334bc7a328476408fdcbc72f6d" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, MovableObject*&gt;::type Ogre::SceneManager::MovableObjectMap</definition>
        <argsstring></argsstring>
        <name>MovableObjectMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="536" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a0a488d6629c501a7d5d648f372d6e81b" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="structOgre_1_1SceneManager_1_1MovableObjectCollection" kindref="compound">MovableObjectCollection</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, MovableObjectCollection*&gt;::type Ogre::SceneManager::MovableObjectCollectionMap</definition>
        <argsstring></argsstring>
        <name>MovableObjectCollectionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="543" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1ad7cf782d8eb1d5b902348c722c9f4bec" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, Animation*&gt;::type Ogre::SceneManager::AnimationList</definition>
        <argsstring></argsstring>
        <name>AnimationList</name>
        <briefdescription>
<para>Storage of animations, lookup by name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="635" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a6f9d5f49a24bebbb878dbc91fa54b5e5" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1RenderQueueListener" kindref="compound">RenderQueueListener</ref> * &gt;::type</type>
        <definition>typedef vector&lt;RenderQueueListener*&gt;::type Ogre::SceneManager::RenderQueueListenerList</definition>
        <argsstring></argsstring>
        <name>RenderQueueListenerList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="649" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1aa02b899ad0bb5286c04b659990d2da83" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1RenderObjectListener" kindref="compound">RenderObjectListener</ref> * &gt;::type</type>
        <definition>typedef vector&lt;RenderObjectListener*&gt;::type Ogre::SceneManager::RenderObjectListenerList</definition>
        <argsstring></argsstring>
        <name>RenderObjectListenerList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="652" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a07f99f34cb2a820ececdb7ad6c629c1f" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1SceneManager_1_1Listener" kindref="compound">Listener</ref> * &gt;::type</type>
        <definition>typedef vector&lt;Listener*&gt;::type Ogre::SceneManager::ListenerList</definition>
        <argsstring></argsstring>
        <name>ListenerList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="654" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1aaa39b3654b95b76499723c771df564b2" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> * &gt;::type</type>
        <definition>typedef vector&lt;Camera*&gt;::type Ogre::SceneManager::ShadowTextureCameraList</definition>
        <argsstring></argsstring>
        <name>ShadowTextureCameraList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="744" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1ab9caf44e613e32f36aa60663ad2253a6" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *, <ref refid="structOgre_1_1SceneManager_1_1LightClippingInfo" kindref="compound">LightClippingInfo</ref> &gt;::type</type>
        <definition>typedef map&lt;Light*, LightClippingInfo&gt;::type Ogre::SceneManager::LightClippingInfoMap</definition>
        <argsstring></argsstring>
        <name>LightClippingInfoMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="760" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1ab5e6988d5a1835b6c80c74f594b8c2bc" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> * &gt;::type</type>
        <definition>typedef vector&lt;InstanceManager*&gt;::type Ogre::SceneManager::InstanceManagerVec</definition>
        <argsstring></argsstring>
        <name>InstanceManagerVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="795" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a2b399deb8670b6473b4193c1b54f601c" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1ShadowCaster" kindref="compound">ShadowCaster</ref> * &gt;::type</type>
        <definition>typedef vector&lt;ShadowCaster*&gt;::type Ogre::SceneManager::ShadowCasterList</definition>
        <argsstring></argsstring>
        <name>ShadowCasterList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="847" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a3a8bd4ec0e13d02cd1da6ae70612f852" prot="protected" static="no">
        <type><ref refid="structOgre_1_1set" kindref="compound">set</ref>&lt; <ref refid="classOgre_1_1LodListener" kindref="compound">LodListener</ref> * &gt;::type</type>
        <definition>typedef set&lt;LodListener*&gt;::type Ogre::SceneManager::LodListenerSet</definition>
        <argsstring></argsstring>
        <name>LodListenerSet</name>
        <briefdescription>
<para>Set of registered lod listeners. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1008" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a057b9e1a36d7a99c82993dfe71d37857" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="structOgre_1_1MovableObjectLodChangedEvent" kindref="compound">MovableObjectLodChangedEvent</ref> &gt;::type</type>
        <definition>typedef vector&lt;MovableObjectLodChangedEvent&gt;::type Ogre::SceneManager::MovableObjectLodChangedEventList</definition>
        <argsstring></argsstring>
        <name>MovableObjectLodChangedEventList</name>
        <briefdescription>
<para>List of movable object lod changed events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1012" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1ac318fd8481f0f7f0e2cbed44616a680d" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="structOgre_1_1EntityMeshLodChangedEvent" kindref="compound">EntityMeshLodChangedEvent</ref> &gt;::type</type>
        <definition>typedef vector&lt;EntityMeshLodChangedEvent&gt;::type Ogre::SceneManager::EntityMeshLodChangedEventList</definition>
        <argsstring></argsstring>
        <name>EntityMeshLodChangedEventList</name>
        <briefdescription>
<para>List of entity mesh lod changed events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1016" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1SceneManager_1a2903a625b8aa2027c3225c326b03b7b4" prot="protected" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="structOgre_1_1EntityMaterialLodChangedEvent" kindref="compound">EntityMaterialLodChangedEvent</ref> &gt;::type</type>
        <definition>typedef vector&lt;EntityMaterialLodChangedEvent&gt;::type Ogre::SceneManager::EntityMaterialLodChangedEventList</definition>
        <argsstring></argsstring>
        <name>EntityMaterialLodChangedEventList</name>
        <briefdescription>
<para>List of entity material lod changed events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1020" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1020" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ada8f4ecc06b8ffe99834d8e1db66c123" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::WORLD_GEOMETRY_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>WORLD_GEOMETRY_TYPE_MASK</name>
        <briefdescription>
<para>Query type mask which will be used for world geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="144" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a43d0ee887419ee93d24975b906eb2783" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::ENTITY_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>ENTITY_TYPE_MASK</name>
        <briefdescription>
<para>Query type mask which will be used for entities. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="146" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac036d861c2df264375b88e9f3a407b1e" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::FX_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>FX_TYPE_MASK</name>
        <briefdescription>
<para>Query type mask which will be used for effects like billboardsets / particle systems. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="148" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a369ad7a1b8e0455052ea0bca0383942e" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::STATICGEOMETRY_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>STATICGEOMETRY_TYPE_MASK</name>
        <briefdescription>
<para>Query type mask which will be used for <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="150" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aeb00e5cde673e9bcf74ec69027cf8039" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::LIGHT_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>LIGHT_TYPE_MASK</name>
        <briefdescription>
<para>Query type mask which will be used for lights. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="152" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ae0f8858848acb8c595f495db753facb9" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::FRUSTUM_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>FRUSTUM_TYPE_MASK</name>
        <briefdescription>
<para>Query type mask which will be used for frusta and cameras. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="154" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a01d4bf3c6e81fddcfc96ec3f2714c8ac" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::USER_TYPE_MASK_LIMIT</definition>
        <argsstring></argsstring>
        <name>USER_TYPE_MASK_LIMIT</name>
        <briefdescription>
<para>User type mask limit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="156" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classOgre_1_1SceneManager_1a25811fa0c23672b27dccfffd48bec43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SceneMgrQueuedRenderableVisitor</definition>
        <argsstring></argsstring>
        <name>SceneMgrQueuedRenderableVisitor</name>
        <briefdescription>
<para>Allow visitor helper to access protected methods. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="380" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a0ff0b1a5241287f4ce969e9755079fb2" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::SceneManager::mName</definition>
        <argsstring></argsstring>
        <name>mName</name>
        <briefdescription>
<para>Instance name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="390" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a5411ad8b9ea980057db76161e58bb3d3" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1RenderQueue" kindref="compound">RenderQueue</ref> *</type>
        <definition>RenderQueue* Ogre::SceneManager::mRenderQueue</definition>
        <argsstring></argsstring>
        <name>mRenderQueue</name>
        <briefdescription>
<para>Queue of objects for rendering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="393" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a63e5b71e4fe7e66e1e22ef900bc04912" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mLastRenderQueueInvocationCustom</definition>
        <argsstring></argsstring>
        <name>mLastRenderQueueInvocationCustom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="394" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a1046dbbb22cc771860703cfca3a9d06a" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref></type>
        <definition>ColourValue Ogre::SceneManager::mAmbientLight</definition>
        <argsstring></argsstring>
        <name>mAmbientLight</name>
        <briefdescription>
<para>Current ambient light, cached for <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="397" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a8264f0c4e49a76667f3977acb955c7b1" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
        <definition>RenderSystem* Ogre::SceneManager::mDestRenderSystem</definition>
        <argsstring></argsstring>
        <name>mDestRenderSystem</name>
        <briefdescription>
<para>The rendering system to send the scene to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="400" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa7fc776f4946fdcf92c696524a4c2d4d" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1aab859720031b39ec11a526ddfabcb8dd" kindref="member">CameraList</ref></type>
        <definition>CameraList Ogre::SceneManager::mCameras</definition>
        <argsstring></argsstring>
        <name>mCameras</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Central list of cameras - for easy memory management and lookup. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="406" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a0973d08b56629d0116237af5b948f771" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1abb3204cddb559c0cd958a01c477083b8" kindref="member">StaticGeometryList</ref></type>
        <definition>StaticGeometryList Ogre::SceneManager::mStaticGeometryList</definition>
        <argsstring></argsstring>
        <name>mStaticGeometryList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="409" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a5aa17d2f39c5e8769f0e444db659fa91" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a2091430fab5446019fc276d6b531dfb4" kindref="member">InstancedGeometryList</ref></type>
        <definition>InstancedGeometryList Ogre::SceneManager::mInstancedGeometryList</definition>
        <argsstring></argsstring>
        <name>mInstancedGeometryList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="411" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a5ccb0331d75034b02d2d201a55cd08f4" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1aeb7beb7e3723ebd4199c5a8f727a5829" kindref="member">InstanceManagerMap</ref></type>
        <definition>InstanceManagerMap Ogre::SceneManager::mInstanceManagerMap</definition>
        <argsstring></argsstring>
        <name>mInstanceManagerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="414" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa63f58cfe1efa7a19a2ae2227d58cabc" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1abf8b0fc2e37f7c04d915498662442608" kindref="member">SceneNodeList</ref></type>
        <definition>SceneNodeList Ogre::SceneManager::mSceneNodes</definition>
        <argsstring></argsstring>
        <name>mSceneNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Central list of SceneNodes - for easy memory management. <simplesect kind="note"><para>Note that this list is used only for memory management; the structure of the scene is held using the hierarchy of SceneNodes starting with the root node. However you can look up nodes this way. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="424" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a9a2f86d3b64b1a0a5f722fa4e18a0207" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
        <definition>Camera* Ogre::SceneManager::mCameraInProgress</definition>
        <argsstring></argsstring>
        <name>mCameraInProgress</name>
        <briefdescription>
<para><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> in progress. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="427" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad341e52c96894a27d6bcc83760386e85" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
        <definition>Viewport* Ogre::SceneManager::mCurrentViewport</definition>
        <argsstring></argsstring>
        <name>mCurrentViewport</name>
        <briefdescription>
<para>Current <ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="429" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a47dc6b93ef3b1462268e4878bd8118e6" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>SceneNode* Ogre::SceneManager::mSceneRoot</definition>
        <argsstring></argsstring>
        <name>mSceneRoot</name>
        <briefdescription>
<para><ref refid="classOgre_1_1Root" kindref="compound">Root</ref> scene node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="432" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a2496f428b7e345aeee68319ebf3848ea" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a43d83785d6d6b6ee36aa2d1b9d7576f2" kindref="member">AutoTrackingSceneNodes</ref></type>
        <definition>AutoTrackingSceneNodes Ogre::SceneManager::mAutoTrackingSceneNodes</definition>
        <argsstring></argsstring>
        <name>mAutoTrackingSceneNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="436" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a1b356cfd900fc11d9aab12384db846f2" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>Entity* Ogre::SceneManager::mSkyPlaneEntity</definition>
        <argsstring></argsstring>
        <name>mSkyPlaneEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="440" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad119673b6459a4417ccd6b9132f6949e" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>Entity* Ogre::SceneManager::mSkyDomeEntity[5]</definition>
        <argsstring>[5]</argsstring>
        <name>mSkyDomeEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="441" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a1632eb9454092102844767bce15d1f22" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> *</type>
        <definition>ManualObject* Ogre::SceneManager::mSkyBoxObj</definition>
        <argsstring></argsstring>
        <name>mSkyBoxObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="442" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa22625c805a1f0f666323afb95eae01c" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>SceneNode* Ogre::SceneManager::mSkyPlaneNode</definition>
        <argsstring></argsstring>
        <name>mSkyPlaneNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="444" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a21476fa21be2e1fa6e822fa173ee4031" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>SceneNode* Ogre::SceneManager::mSkyDomeNode</definition>
        <argsstring></argsstring>
        <name>mSkyDomeNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="445" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a9a97c216a74023a495dd4a913163c0ec" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>SceneNode* Ogre::SceneManager::mSkyBoxNode</definition>
        <argsstring></argsstring>
        <name>mSkyBoxNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="446" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a743ba63a3432f88ffae6d01c7887b754" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mSkyPlaneEnabled</definition>
        <argsstring></argsstring>
        <name>mSkyPlaneEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="449" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a856c7625cb2589f10b57ea25c25d4ff6" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
        <definition>uint8 Ogre::SceneManager::mSkyPlaneRenderQueue</definition>
        <argsstring></argsstring>
        <name>mSkyPlaneRenderQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="450" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1acc6d350acb01f02cbf50090451610e38" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Plane" kindref="compound">Plane</ref></type>
        <definition>Plane Ogre::SceneManager::mSkyPlane</definition>
        <argsstring></argsstring>
        <name>mSkyPlane</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="451" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a6c4e525a3069ba18e984aafd7bb4166f" prot="protected" static="no" mutable="no">
        <type><ref refid="structOgre_1_1SceneManager_1_1SkyPlaneGenParameters" kindref="compound">SkyPlaneGenParameters</ref></type>
        <definition>SkyPlaneGenParameters Ogre::SceneManager::mSkyPlaneGenParameters</definition>
        <argsstring></argsstring>
        <name>mSkyPlaneGenParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="452" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a870b9f0b19b51dd4de3450a7b8f1dada" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mSkyBoxEnabled</definition>
        <argsstring></argsstring>
        <name>mSkyBoxEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="454" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac1c486c6f054ee0ad11a546787dd3c92" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
        <definition>uint8 Ogre::SceneManager::mSkyBoxRenderQueue</definition>
        <argsstring></argsstring>
        <name>mSkyBoxRenderQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="455" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a9a0a6799f6c031e3ba5e19e52e224be1" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref></type>
        <definition>Quaternion Ogre::SceneManager::mSkyBoxOrientation</definition>
        <argsstring></argsstring>
        <name>mSkyBoxOrientation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="456" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1afc3531fffee2ca7a25951a0a0a59af50" prot="protected" static="no" mutable="no">
        <type><ref refid="structOgre_1_1SceneManager_1_1SkyBoxGenParameters" kindref="compound">SkyBoxGenParameters</ref></type>
        <definition>SkyBoxGenParameters Ogre::SceneManager::mSkyBoxGenParameters</definition>
        <argsstring></argsstring>
        <name>mSkyBoxGenParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="457" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a6be93df7298573396205fcad20e51d80" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mSkyDomeEnabled</definition>
        <argsstring></argsstring>
        <name>mSkyDomeEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="459" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac5ec31ff245698c0ca5d5cb86e14b40c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
        <definition>uint8 Ogre::SceneManager::mSkyDomeRenderQueue</definition>
        <argsstring></argsstring>
        <name>mSkyDomeRenderQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="460" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a332c8e9c42e45503ceb067b3ebb7f469" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref></type>
        <definition>Quaternion Ogre::SceneManager::mSkyDomeOrientation</definition>
        <argsstring></argsstring>
        <name>mSkyDomeOrientation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="461" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a68bc63ccd0178ee6812cd792ac25ff1e" prot="protected" static="no" mutable="no">
        <type><ref refid="structOgre_1_1SceneManager_1_1SkyDomeGenParameters" kindref="compound">SkyDomeGenParameters</ref></type>
        <definition>SkyDomeGenParameters Ogre::SceneManager::mSkyDomeGenParameters</definition>
        <argsstring></argsstring>
        <name>mSkyDomeGenParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="462" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a17ed14a33b5393704f343d2c90568588" prot="protected" static="no" mutable="no">
        <type><ref refid="group__General_1ga83edeb2e5d33a3ca8f15834ba40020ba" kindref="member">FogMode</ref></type>
        <definition>FogMode Ogre::SceneManager::mFogMode</definition>
        <argsstring></argsstring>
        <name>mFogMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="465" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a77a36143ecafeea94fc7a0656ffaf112" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref></type>
        <definition>ColourValue Ogre::SceneManager::mFogColour</definition>
        <argsstring></argsstring>
        <name>mFogColour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="466" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad697a57bccc4fc33010c2f8151330605" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mFogStart</definition>
        <argsstring></argsstring>
        <name>mFogStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="467" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a3af93cd3e5f38b3554d3328ceb0df312" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mFogEnd</definition>
        <argsstring></argsstring>
        <name>mFogEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="468" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a08ed5443cb044a3f6fb749cb90454b49" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mFogDensity</definition>
        <argsstring></argsstring>
        <name>mFogDensity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="469" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a4d8e465d0733b5a86dc1935efcdc3af4" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1ac28fad9c8bde6dd8fa30a747b12fd727" kindref="member">SpecialCaseRenderQueueList</ref></type>
        <definition>SpecialCaseRenderQueueList Ogre::SceneManager::mSpecialCaseQueueList</definition>
        <argsstring></argsstring>
        <name>mSpecialCaseQueueList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="472" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac23b56bba91b3582f8af00dbf8050dd5" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6" kindref="member">SpecialCaseRenderQueueMode</ref></type>
        <definition>SpecialCaseRenderQueueMode Ogre::SceneManager::mSpecialCaseQueueMode</definition>
        <argsstring></argsstring>
        <name>mSpecialCaseQueueMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="473" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aeb54113eccb7f6f55e70f9319932373a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
        <definition>uint8 Ogre::SceneManager::mWorldGeometryRenderQueue</definition>
        <argsstring></argsstring>
        <name>mWorldGeometryRenderQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="474" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa3a4b9ce9a0f555e8e52de3a8bbdf5c0" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Ogre::SceneManager::mLastFrameNumber</definition>
        <argsstring></argsstring>
        <name>mLastFrameNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="476" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a784d6dc8b5c3336f34fd78cea0d718d4" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 Ogre::SceneManager::mTempXform[256]</definition>
        <argsstring>[256]</argsstring>
        <name>mTempXform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="477" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a1c35d16e51f409760b8dd2766b63d647" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mResetIdentityView</definition>
        <argsstring></argsstring>
        <name>mResetIdentityView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="478" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a000946f678ee7508dfbc31268c5d966e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mResetIdentityProj</definition>
        <argsstring></argsstring>
        <name>mResetIdentityProj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="479" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad86119ced614f90d301930b1b0f19588" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mNormaliseNormalsOnScale</definition>
        <argsstring></argsstring>
        <name>mNormaliseNormalsOnScale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="481" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1afc663fea2a213f5c0800259604c84df5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mFlipCullingOnNegativeScale</definition>
        <argsstring></argsstring>
        <name>mFlipCullingOnNegativeScale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="482" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a3797a6b398dda83a98ff62d9883aac9c" prot="protected" static="no" mutable="no">
        <type><ref refid="group__General_1gac173244ed7d950d0acd726e4f323ecdb" kindref="member">CullingMode</ref></type>
        <definition>CullingMode Ogre::SceneManager::mPassCullingMode</definition>
        <argsstring></argsstring>
        <name>mPassCullingMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="483" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aba61fc3252c41dca8fb9a161fee093e0" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1acb0316a267f0f8fb7e79ff68a0e8d71d" kindref="member">CamVisibleObjectsMap</ref></type>
        <definition>CamVisibleObjectsMap Ogre::SceneManager::mCamVisibleObjectsMap</definition>
        <argsstring></argsstring>
        <name>mCamVisibleObjectsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="495" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a604f8366d8b27064a4a20f48cc37dac4" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a8e1df30516b152b7b5f4b37f67a39402" kindref="member">ShadowCamLightMapping</ref></type>
        <definition>ShadowCamLightMapping Ogre::SceneManager::mShadowCamLightMapping</definition>
        <argsstring></argsstring>
        <name>mShadowCamLightMapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="499" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aca3a6092095443e4a5a7fb8169bcf83e" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Ogre::SceneManager::mShadowTextureCountPerType[3]</definition>
        <argsstring>[3]</argsstring>
        <name>mShadowTextureCountPerType</name>
        <briefdescription>
<para>Array defining shadow count per light type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="502" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a1b0567633eab6498dfb6c2b89724959f" prot="protected" static="no" mutable="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; size_t &gt;::type</type>
        <definition>vector&lt;size_t&gt;::type Ogre::SceneManager::mShadowTextureIndexLightList</definition>
        <argsstring></argsstring>
        <name>mShadowTextureIndexLightList</name>
        <briefdescription>
<para>Array defining shadow texture index in light list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="505" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a64adaac04645e2f83bf04862a20c5d45" prot="protected" static="no" mutable="no">
        <type><ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref></type>
        <definition>LightList Ogre::SceneManager::mLightsAffectingFrustum</definition>
        <argsstring></argsstring>
        <name>mLightsAffectingFrustum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="530" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ada2783d02c2dcd52fb91e0409ab5ec20" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a6748ee2b37ce2586eb7c93e48714bacf" kindref="member">LightInfoList</ref></type>
        <definition>LightInfoList Ogre::SceneManager::mCachedLightInfos</definition>
        <argsstring></argsstring>
        <name>mCachedLightInfos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="531" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a72f4d87312aee00bd2236e4ae1331b35" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a6748ee2b37ce2586eb7c93e48714bacf" kindref="member">LightInfoList</ref></type>
        <definition>LightInfoList Ogre::SceneManager::mTestLightInfos</definition>
        <argsstring></argsstring>
        <name>mTestLightInfos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="532" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1acd54728be554ef19ce5cdf207de09959" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1a4304981347643708ee9a7ba8884e5758" kindref="member">ulong</ref></type>
        <definition>ulong Ogre::SceneManager::mLightsDirtyCounter</definition>
        <argsstring></argsstring>
        <name>mLightsDirtyCounter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="533" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1afd83887f99a371529f043d86b9047506" prot="protected" static="no" mutable="no">
        <type><ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref></type>
        <definition>LightList Ogre::SceneManager::mShadowTextureCurrentCasterLightList</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCurrentCasterLightList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="534" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a8a3af0a8a5116a4a02dd3d8420078658" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a0a488d6629c501a7d5d648f372d6e81b" kindref="member">MovableObjectCollectionMap</ref></type>
        <definition>MovableObjectCollectionMap Ogre::SceneManager::mMovableObjectCollectionMap</definition>
        <argsstring></argsstring>
        <name>mMovableObjectCollectionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="544" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ab4b065d7701d48c4cb96e01797149faa" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1NameGenerator" kindref="compound">NameGenerator</ref></type>
        <definition>NameGenerator Ogre::SceneManager::mMovableNameGenerator</definition>
        <argsstring></argsstring>
        <name>mMovableNameGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="545" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aadaa9d36a795c8dad209fb4740015a30" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowCasterPlainBlackPass</definition>
        <argsstring></argsstring>
        <name>mShadowCasterPlainBlackPass</name>
        <briefdescription>
<para>A pass designed to let us render shadow colour on white for texture shadows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="565" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a593f82c978aa7ab17043dead7a24d29f" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowReceiverPass</definition>
        <argsstring></argsstring>
        <name>mShadowReceiverPass</name>
        <briefdescription>
<para>A pass designed to let us render shadow receivers for texture shadows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="567" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a070effc83d84478c31dc811dc92703c7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mDisplayNodes</definition>
        <argsstring></argsstring>
        <name>mDisplayNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="632" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a7c96613569926a2bbe5a359644157482" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1ad7cf782d8eb1d5b902348c722c9f4bec" kindref="member">AnimationList</ref></type>
        <definition>AnimationList Ogre::SceneManager::mAnimationsList</definition>
        <argsstring></argsstring>
        <name>mAnimationsList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="636" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a20a4a6f6531d749b1436be1184264c0b" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1AnimationStateSet" kindref="compound">AnimationStateSet</ref></type>
        <definition>AnimationStateSet Ogre::SceneManager::mAnimationStates</definition>
        <argsstring></argsstring>
        <name>mAnimationStates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="638" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad0c4537d20d352ad2818ec7cabcb7e7b" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a6f9d5f49a24bebbb878dbc91fa54b5e5" kindref="member">RenderQueueListenerList</ref></type>
        <definition>RenderQueueListenerList Ogre::SceneManager::mRenderQueueListeners</definition>
        <argsstring></argsstring>
        <name>mRenderQueueListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="650" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a9241ac2862827f8aae292bc86557ed6d" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1aa02b899ad0bb5286c04b659990d2da83" kindref="member">RenderObjectListenerList</ref></type>
        <definition>RenderObjectListenerList Ogre::SceneManager::mRenderObjectListeners</definition>
        <argsstring></argsstring>
        <name>mRenderObjectListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="653" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a077722cc09750f78a8769b0ed5e5bf72" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a07f99f34cb2a820ececdb7ad6c629c1f" kindref="member">ListenerList</ref></type>
        <definition>ListenerList Ogre::SceneManager::mListeners</definition>
        <argsstring></argsstring>
        <name>mListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="655" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aecf3af703dea330078f41ab6ed016c7e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShowBoundingBoxes</definition>
        <argsstring></argsstring>
        <name>mShowBoundingBoxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag that indicates if all of the scene node&apos;s bounding boxes should be shown as a wireframe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="688" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a63d007556fe8e97a917d952494c8e3a5" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1AutoParamDataSource" kindref="compound">AutoParamDataSource</ref> *</type>
        <definition>AutoParamDataSource* Ogre::SceneManager::mAutoParamDataSource</definition>
        <argsstring></argsstring>
        <name>mAutoParamDataSource</name>
        <briefdescription>
<para>Utility class for calculating automatic parameters for gpu programs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="723" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a92939427e23b4c60e6d16ac721462863" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1CompositorChain" kindref="compound">CompositorChain</ref> *</type>
        <definition>CompositorChain* Ogre::SceneManager::mActiveCompositorChain</definition>
        <argsstring></argsstring>
        <name>mActiveCompositorChain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="725" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a5a6b5def3e221ce6366ab12d4e1e16e3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mLateMaterialResolving</definition>
        <argsstring></argsstring>
        <name>mLateMaterialResolving</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="726" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a7adaeed1d654ab66a2c7fff4c03a431e" prot="protected" static="no" mutable="no">
        <type><ref refid="group__General_1ga79dcd426d291c31072c1ad6f183715d6" kindref="member">ShadowTechnique</ref></type>
        <definition>ShadowTechnique Ogre::SceneManager::mShadowTechnique</definition>
        <argsstring></argsstring>
        <name>mShadowTechnique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="728" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a54cbafb5e6dcc0e9f324d3898cead7ef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mDebugShadows</definition>
        <argsstring></argsstring>
        <name>mDebugShadows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="729" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1af888882852ac5512310c18017e7921e5" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref></type>
        <definition>ColourValue Ogre::SceneManager::mShadowColour</definition>
        <argsstring></argsstring>
        <name>mShadowColour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="730" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a9276e06185787c851f1ff54a152f28ad" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowDebugPass</definition>
        <argsstring></argsstring>
        <name>mShadowDebugPass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="731" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a97eb70f23035e4cf0f75aadd11850b57" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowStencilPass</definition>
        <argsstring></argsstring>
        <name>mShadowStencilPass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="732" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa14524c82d79c3e76942b0fd6dac3ac3" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowModulativePass</definition>
        <argsstring></argsstring>
        <name>mShadowModulativePass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="733" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a63c239863d9a55286a5cb7a024793659" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShadowMaterialInitDone</definition>
        <argsstring></argsstring>
        <name>mShadowMaterialInitDone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="734" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a63697c1137a52b5e02035b66b6de9874" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1HardwareIndexBufferSharedPtr" kindref="compound">HardwareIndexBufferSharedPtr</ref></type>
        <definition>HardwareIndexBufferSharedPtr Ogre::SceneManager::mShadowIndexBuffer</definition>
        <argsstring></argsstring>
        <name>mShadowIndexBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="735" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a7475f0391505adff66471a7d8b0a4da8" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Ogre::SceneManager::mShadowIndexBufferSize</definition>
        <argsstring></argsstring>
        <name>mShadowIndexBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="736" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1add5db2bd810b8c5565afa345de0e0dfb" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Rectangle2D" kindref="compound">Rectangle2D</ref> *</type>
        <definition>Rectangle2D* Ogre::SceneManager::mFullScreenQuad</definition>
        <argsstring></argsstring>
        <name>mFullScreenQuad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="737" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a45946d6a943570d2d7ac0a803a75c77e" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mShadowDirLightExtrudeDist</definition>
        <argsstring></argsstring>
        <name>mShadowDirLightExtrudeDist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="738" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1afcdad5f25f6c3956c11a824fba5d68ec" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827" kindref="member">IlluminationRenderStage</ref></type>
        <definition>IlluminationRenderStage Ogre::SceneManager::mIlluminationStage</definition>
        <argsstring></argsstring>
        <name>mIlluminationStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="739" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a76f9b63473b07dd34092f46f79f88e54" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Scene_1ga0f71238039ee719563bf5202d80ff41a" kindref="member">ShadowTextureConfigList</ref></type>
        <definition>ShadowTextureConfigList Ogre::SceneManager::mShadowTextureConfigList</definition>
        <argsstring></argsstring>
        <name>mShadowTextureConfigList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="740" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa893151c589403e0c043d8edf6d67448" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShadowTextureConfigDirty</definition>
        <argsstring></argsstring>
        <name>mShadowTextureConfigDirty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="741" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aeee75145f20f44d4bcdeba9d1884a13b" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Scene_1ga9befe4ef9c189ac3f2e016a63d560c67" kindref="member">ShadowTextureList</ref></type>
        <definition>ShadowTextureList Ogre::SceneManager::mShadowTextures</definition>
        <argsstring></argsstring>
        <name>mShadowTextures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="742" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a67ade0caa6fe5a91ad14e2d79c294bb8" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1TexturePtr" kindref="compound">TexturePtr</ref></type>
        <definition>TexturePtr Ogre::SceneManager::mNullShadowTexture</definition>
        <argsstring></argsstring>
        <name>mNullShadowTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="743" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a5a89503b16636ebf9a99605b707b2d9d" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1aaa39b3654b95b76499723c771df564b2" kindref="member">ShadowTextureCameraList</ref></type>
        <definition>ShadowTextureCameraList Ogre::SceneManager::mShadowTextureCameras</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCameras</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="745" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa14bcf591faa2d30fefc0fcb7c5857c4" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Texture" kindref="compound">Texture</ref> *</type>
        <definition>Texture* Ogre::SceneManager::mCurrentShadowTexture</definition>
        <argsstring></argsstring>
        <name>mCurrentShadowTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="746" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ae71bff7c7babb2f8a92346427d8c5fa1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShadowUseInfiniteFarPlane</definition>
        <argsstring></argsstring>
        <name>mShadowUseInfiniteFarPlane</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="747" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a3159f28f48646517418ce319b9b7dec8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShadowCasterRenderBackFaces</definition>
        <argsstring></argsstring>
        <name>mShadowCasterRenderBackFaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="748" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a933194ab15d699b1be5142ae705a010e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShadowAdditiveLightClip</definition>
        <argsstring></argsstring>
        <name>mShadowAdditiveLightClip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="749" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a9c12c8a290ce0ea51efef380760f27c8" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1ab9caf44e613e32f36aa60663ad2253a6" kindref="member">LightClippingInfoMap</ref></type>
        <definition>LightClippingInfoMap Ogre::SceneManager::mLightClippingInfoMap</definition>
        <argsstring></argsstring>
        <name>mLightClippingInfoMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="761" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac7fe720c6553bf245b058b9f5281b220" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Ogre::SceneManager::mLightClippingInfoMapFrameNumber</definition>
        <argsstring></argsstring>
        <name>mLightClippingInfoMapFrameNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="762" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aed1f03f6ccf8735715458aae3cd720ec" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Scene_1ga139829f6abc3581ec63563543ebfff15" kindref="member">ShadowCameraSetupPtr</ref></type>
        <definition>ShadowCameraSetupPtr Ogre::SceneManager::mDefaultShadowCameraSetup</definition>
        <argsstring></argsstring>
        <name>mDefaultShadowCameraSetup</name>
        <briefdescription>
<para>default shadow camera setup </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="765" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a7264db47da5f89e7932317606a24e70c" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1ab5e6988d5a1835b6c80c74f594b8c2bc" kindref="member">InstanceManagerVec</ref></type>
        <definition>InstanceManagerVec Ogre::SceneManager::mDirtyInstanceManagers</definition>
        <argsstring></argsstring>
        <name>mDirtyInstanceManagers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="796" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1abf5c5ed64b21a09012de76acd349d9e0" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1ab5e6988d5a1835b6c80c74f594b8c2bc" kindref="member">InstanceManagerVec</ref></type>
        <definition>InstanceManagerVec Ogre::SceneManager::mDirtyInstanceMgrsTmp</definition>
        <argsstring></argsstring>
        <name>mDirtyInstanceMgrsTmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="797" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ae6d775195f3f8831650e4baaebf89433" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a2b399deb8670b6473b4193c1b54f601c" kindref="member">ShadowCasterList</ref></type>
        <definition>ShadowCasterList Ogre::SceneManager::mShadowCasterList</definition>
        <argsstring></argsstring>
        <name>mShadowCasterList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="848" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1af0e984eaa8115c9753bcd84b4bd3cc11" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SphereSceneQuery" kindref="compound">SphereSceneQuery</ref> *</type>
        <definition>SphereSceneQuery* Ogre::SceneManager::mShadowCasterSphereQuery</definition>
        <argsstring></argsstring>
        <name>mShadowCasterSphereQuery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="849" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a1c6f6e1290244f6d0dd1347d8ce3453b" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1AxisAlignedBoxSceneQuery" kindref="compound">AxisAlignedBoxSceneQuery</ref> *</type>
        <definition>AxisAlignedBoxSceneQuery* Ogre::SceneManager::mShadowCasterAABBQuery</definition>
        <argsstring></argsstring>
        <name>mShadowCasterAABBQuery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="850" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a155f9c139734d33fc7d9f03c6364cc4c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mDefaultShadowFarDist</definition>
        <argsstring></argsstring>
        <name>mDefaultShadowFarDist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="851" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1afd8165b0623ae10088f400f8a9d5b592" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mDefaultShadowFarDistSquared</definition>
        <argsstring></argsstring>
        <name>mDefaultShadowFarDistSquared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="852" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a0fd0fee334159816771d34a2a03e1abe" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mShadowTextureOffset</definition>
        <argsstring></argsstring>
        <name>mShadowTextureOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="853" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a2f270a0f22844b6690c835c80ab51145" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mShadowTextureFadeStart</definition>
        <argsstring></argsstring>
        <name>mShadowTextureFadeStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="854" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a8fc134ed20d116daefa494b06554b7c8" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::SceneManager::mShadowTextureFadeEnd</definition>
        <argsstring></argsstring>
        <name>mShadowTextureFadeEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="855" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a2d366a01e2b7fea9e7eae781a25268a6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mShadowTextureSelfShadow</definition>
        <argsstring></argsstring>
        <name>mShadowTextureSelfShadow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="856" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a0ea1617bdda02c23a72330a647ea09a0" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowTextureCustomCasterPass</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomCasterPass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="857" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a8ea12599e955972ac959ef94c52e35af" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>Pass* Ogre::SceneManager::mShadowTextureCustomReceiverPass</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomReceiverPass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="858" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a12145dec119385784c27245b380ddc5a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::SceneManager::mShadowTextureCustomCasterVertexProgram</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomCasterVertexProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="859" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a07b84060116c1da6e704a267f9acb05d" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::SceneManager::mShadowTextureCustomCasterFragmentProgram</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomCasterFragmentProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="860" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1acc8a7c17bedf51c442ed02ed23ef30e3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::SceneManager::mShadowTextureCustomReceiverVertexProgram</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomReceiverVertexProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="861" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ab6c7dec2b7a7d8122ae3784e56e59918" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::SceneManager::mShadowTextureCustomReceiverFragmentProgram</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomReceiverFragmentProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="862" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1adcadb2b43a58490f9975ac44b553eedd" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Materials_1gaebab7cecf3f3ae81a1fbfa08ab36f2b5" kindref="member">GpuProgramParametersSharedPtr</ref></type>
        <definition>GpuProgramParametersSharedPtr Ogre::SceneManager::mShadowTextureCustomCasterVPParams</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomCasterVPParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="863" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac6295bd94f9cc7c1c6bc05d52f049851" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Materials_1gaebab7cecf3f3ae81a1fbfa08ab36f2b5" kindref="member">GpuProgramParametersSharedPtr</ref></type>
        <definition>GpuProgramParametersSharedPtr Ogre::SceneManager::mShadowTextureCustomCasterFPParams</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomCasterFPParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="864" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ae12d0d35465b9395c984263db68ab752" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Materials_1gaebab7cecf3f3ae81a1fbfa08ab36f2b5" kindref="member">GpuProgramParametersSharedPtr</ref></type>
        <definition>GpuProgramParametersSharedPtr Ogre::SceneManager::mShadowTextureCustomReceiverVPParams</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomReceiverVPParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="865" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a67563d09f914c80b7c007f08433b9e23" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Materials_1gaebab7cecf3f3ae81a1fbfa08ab36f2b5" kindref="member">GpuProgramParametersSharedPtr</ref></type>
        <definition>GpuProgramParametersSharedPtr Ogre::SceneManager::mShadowTextureCustomReceiverFPParams</definition>
        <argsstring></argsstring>
        <name>mShadowTextureCustomReceiverFPParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="866" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1af330714bd5a60cf8fcdcb8998ae88fc3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::mVisibilityMask</definition>
        <argsstring></argsstring>
        <name>mVisibilityMask</name>
        <briefdescription>
<para>Visibility mask used to show / hide objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="869" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad2a6d7cc9535ac69dc7e445b1cead58e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mFindVisibleObjects</definition>
        <argsstring></argsstring>
        <name>mFindVisibleObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="870" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a2f08653c064e776174c4881148f6e1ec" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mSuppressRenderStateChanges</definition>
        <argsstring></argsstring>
        <name>mSuppressRenderStateChanges</name>
        <briefdescription>
<para>Suppress render state changes? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="873" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a0220be54b3b9c8be805be65e60f136d0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mSuppressShadows</definition>
        <argsstring></argsstring>
        <name>mSuppressShadows</name>
        <briefdescription>
<para>Suppress shadows? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="875" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aa1886fd36b6128c7714ec1508f45821f" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Materials_1gaebab7cecf3f3ae81a1fbfa08ab36f2b5" kindref="member">GpuProgramParametersSharedPtr</ref></type>
        <definition>GpuProgramParametersSharedPtr Ogre::SceneManager::mInfiniteExtrusionParams</definition>
        <argsstring></argsstring>
        <name>mInfiniteExtrusionParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="878" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ab90bf0fcf5aa2c3597a811863ed0d274" prot="protected" static="no" mutable="no">
        <type><ref refid="group__Materials_1gaebab7cecf3f3ae81a1fbfa08ab36f2b5" kindref="member">GpuProgramParametersSharedPtr</ref></type>
        <definition>GpuProgramParametersSharedPtr Ogre::SceneManager::mFiniteExtrusionParams</definition>
        <argsstring></argsstring>
        <name>mFiniteExtrusionParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="879" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a35ebd62722964590cef05e5d0eb236f2" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1_1ShadowCasterSceneQueryListener" kindref="compound">ShadowCasterSceneQueryListener</ref> *</type>
        <definition>ShadowCasterSceneQueryListener* Ogre::SceneManager::mShadowCasterQueryListener</definition>
        <argsstring></argsstring>
        <name>mShadowCasterQueryListener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="913" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a585632a1f5cff9ab48205a7503ff1e69" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor" kindref="compound">SceneMgrQueuedRenderableVisitor</ref> *</type>
        <definition>SceneMgrQueuedRenderableVisitor* Ogre::SceneManager::mActiveQueuedRenderableVisitor</definition>
        <argsstring></argsstring>
        <name>mActiveQueuedRenderableVisitor</name>
        <briefdescription>
<para>The active renderable visitor class - subclasses could override this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="978" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1aed9fbb65aff18fd3b1659f68c32bcef4" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor" kindref="compound">SceneMgrQueuedRenderableVisitor</ref></type>
        <definition>SceneMgrQueuedRenderableVisitor Ogre::SceneManager::mDefaultQueuedRenderableVisitor</definition>
        <argsstring></argsstring>
        <name>mDefaultQueuedRenderableVisitor</name>
        <briefdescription>
<para>Storage for default renderable visitor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="980" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1adc88adbe55e6569c9b4d6b0e249a28df" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::SceneManager::mCameraRelativeRendering</definition>
        <argsstring></argsstring>
        <name>mCameraRelativeRendering</name>
        <briefdescription>
<para>Whether to use camera-relative rendering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="983" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a44e222e6fe97d76b98f031b72c9c2d7a" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 Ogre::SceneManager::mCachedViewMatrix</definition>
        <argsstring></argsstring>
        <name>mCachedViewMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="984" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a54d12f1b064fdf8bf735f5fcfc95134a" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 Ogre::SceneManager::mCameraRelativePosition</definition>
        <argsstring></argsstring>
        <name>mCameraRelativePosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="985" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ac203d5f0d5569dafdd09a5347e7ad712" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::mLastLightHash</definition>
        <argsstring></argsstring>
        <name>mLastLightHash</name>
        <briefdescription>
<para>Last light sets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="988" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1ad5e54c4606851aa7cee4fec2336e44bc" prot="protected" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short Ogre::SceneManager::mLastLightLimit</definition>
        <argsstring></argsstring>
        <name>mLastLightLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="989" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1acd0a23362972c2b7ce22e72dd3bbaec0" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::mLastLightHashGpuProgram</definition>
        <argsstring></argsstring>
        <name>mLastLightHashGpuProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="990" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1abd57c4b1d1517a98592666614ae4b3d0" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa8263b218e7d187ad5ef03a73a6ad7fd" kindref="member">uint16</ref></type>
        <definition>uint16 Ogre::SceneManager::mGpuParamsDirty</definition>
        <argsstring></argsstring>
        <name>mGpuParamsDirty</name>
        <briefdescription>
<para>Gpu params that need rebinding (mask of GpuParamVariability) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="992" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a27598e0999968a2d7506bcbe98c00175" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a3a8bd4ec0e13d02cd1da6ae70612f852" kindref="member">LodListenerSet</ref></type>
        <definition>LodListenerSet Ogre::SceneManager::mLodListeners</definition>
        <argsstring></argsstring>
        <name>mLodListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1009" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a47d455aaa9cdf8d440575740085c22c7" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a057b9e1a36d7a99c82993dfe71d37857" kindref="member">MovableObjectLodChangedEventList</ref></type>
        <definition>MovableObjectLodChangedEventList Ogre::SceneManager::mMovableObjectLodChangedEvents</definition>
        <argsstring></argsstring>
        <name>mMovableObjectLodChangedEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1013" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1adfed344adce485e2f2164dbb1f0cc2d3" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1ac318fd8481f0f7f0e2cbed44616a680d" kindref="member">EntityMeshLodChangedEventList</ref></type>
        <definition>EntityMeshLodChangedEventList Ogre::SceneManager::mEntityMeshLodChangedEvents</definition>
        <argsstring></argsstring>
        <name>mEntityMeshLodChangedEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1017" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1SceneManager_1a88e157d6df826056dd0d7601a557c68e" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManager_1a2903a625b8aa2027c3225c326b03b7b4" kindref="member">EntityMaterialLodChangedEventList</ref></type>
        <definition>EntityMaterialLodChangedEventList Ogre::SceneManager::mEntityMaterialLodChangedEvents</definition>
        <argsstring></argsstring>
        <name>mEntityMaterialLodChangedEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1021" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1021" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a905eb9adbd3854d84a50c08fc4937e12" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::createSceneNodeImpl</definition>
        <argsstring>(void)</argsstring>
        <name>createSceneNodeImpl</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Subclasses can override this to ensure their specialised <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="385"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af645abf4f922c75b0fd33fe2ddf784d5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::createSceneNodeImpl</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createSceneNodeImpl</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Subclasses can override this to ensure their specialised <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="387"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0828a3d2858e75cc6dfe10ff793595a0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structOgre_1_1SceneManager_1_1MovableObjectCollection" kindref="compound">MovableObjectCollection</ref> *</type>
        <definition>MovableObjectCollection* Ogre::SceneManager::getMovableObjectCollection</definition>
        <argsstring>(const String &amp;typeName)</argsstring>
        <name>getMovableObjectCollection</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the movable object collection for the given type name. <simplesect kind="remark"><para>This method create new collection if the collection does not exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="550"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad4983c85839779400c8ac52cb3ef724c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structOgre_1_1SceneManager_1_1MovableObjectCollection" kindref="compound">MovableObjectCollection</ref> *</type>
        <definition>const MovableObjectCollection* Ogre::SceneManager::getMovableObjectCollection</definition>
        <argsstring>(const String &amp;typeName) const </argsstring>
        <name>getMovableObjectCollection</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the movable object collection for the given type name. <simplesect kind="remark"><para>This method throw exception if the collection does not exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="555"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a73505bfc8792209bfc3b16042d17635d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::initRenderQueue</definition>
        <argsstring>(void)</argsstring>
        <name>initRenderQueue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Mutex over the collection of <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> types. </para>        </briefdescription>
        <detaileddescription>
<para>Internal method for initialising the render queue. <simplesect kind="remark"><para>Subclasses can use this to install their own <ref refid="classOgre_1_1RenderQueue" kindref="compound">RenderQueue</ref> implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="563"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a29de6edd7b7dc562ad54c167c1a8d5af" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>virtual const Pass* Ogre::SceneManager::deriveShadowCasterPass</definition>
        <argsstring>(const Pass *pass)</argsstring>
        <name>deriveShadowCasterPass</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for turning a regular pass into a shadow caster pass. <simplesect kind="remark"><para>This is only used for texture shadows, basically we&apos;re trying to ensure that objects are rendered solid black. This method will usually return the standard solid black pass for all fixed function passes, but will merge in a vertex program and fudge the <ref refid="classOgre_1_1AutoParamDataSource" kindref="compound">AutoParamDataSource</ref> to set black lighting for passes with vertex programs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="577"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a90a6c5e9740c233a2c32443eb4bf1345" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>virtual const Pass* Ogre::SceneManager::deriveShadowReceiverPass</definition>
        <argsstring>(const Pass *pass)</argsstring>
        <name>deriveShadowReceiverPass</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for turning a regular pass into a shadow receiver pass. <simplesect kind="remark"><para>This is only used for texture shadows, basically we&apos;re trying to ensure that objects are rendered with a projective texture. This method will usually return a standard single-texture pass for all fixed function passes, but will merge in a vertex program for passes with vertex programs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="586"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a651906559ecf9995cd318a8855b9c228" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::validatePassForRendering</definition>
        <argsstring>(const Pass *pass)</argsstring>
        <name>validatePassForRendering</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method to validate whether a <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> should be allowed to render. <simplesect kind="remark"><para>Called just before a pass is about to be used for rendering a group to allow the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> to omit it if required. A return value of false skips this pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="594"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a822454b676e71d630ca2bcd19b0950d1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::validateRenderableForRendering</definition>
        <argsstring>(const Pass *pass, const Renderable *rend)</argsstring>
        <name>validateRenderableForRendering</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> *</type>
          <declname>rend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method to validate whether a <ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> should be allowed to render. <simplesect kind="remark"><para>Called just before a pass is about to be used for rendering a <ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> to allow the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> to omit it if required. A return value of false skips it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="602"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8b94645301bb83f4738c67407bcd9ec3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1MeshPtr" kindref="compound">MeshPtr</ref></type>
        <definition>virtual MeshPtr Ogre::SceneManager::createSkyboxPlane</definition>
        <argsstring>(BoxPlane bp, Real distance, const Quaternion &amp;orientation, const String &amp;groupName)</argsstring>
        <name>createSkyboxPlane</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960" kindref="member">BoxPlane</ref></type>
          <declname>bp</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref> &amp;</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="620"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a65f806d3666e63f14e996e3d79e508a8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1MeshPtr" kindref="compound">MeshPtr</ref></type>
        <definition>virtual MeshPtr Ogre::SceneManager::createSkydomePlane</definition>
        <argsstring>(BoxPlane bp, Real curvature, Real tiling, Real distance, const Quaternion &amp;orientation, int xsegments, int ysegments, int ySegmentsToKeep, const String &amp;groupName)</argsstring>
        <name>createSkydomePlane</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960" kindref="member">BoxPlane</ref></type>
          <declname>bp</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>curvature</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>tiling</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref> &amp;</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsegments</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ySegmentsToKeep</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="629"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af3d64f04f160dbf7057ecafdf1b15133" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::useRenderableViewProjMode</definition>
        <argsstring>(const Renderable *pRend, bool fixedFunction)</argsstring>
        <name>useRenderableViewProjMode</name>
        <param>
          <type>const <ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> *</type>
          <declname>pRend</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fixedFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method used by _renderSingleObject to deal with renderables which override the camera&apos;s own view / projection materices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="643"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5f472047cc46e765ac5548553aa461db" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::resetViewProjMode</definition>
        <argsstring>(bool fixedFunction)</argsstring>
        <name>resetViewProjMode</name>
        <param>
          <type>bool</type>
          <declname>fixedFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method used by _renderSingleObject to deal with renderables which override the camera&apos;s own view / projection matrices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="647"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a443630f076a0547738c39e0f7b6624f6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::firePreRenderQueues</definition>
        <argsstring>()</argsstring>
        <name>firePreRenderQueues</name>
        <briefdescription>
<para>Internal method for firing the queue start event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="657"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ace01035f6ad12c44cefe77ad6f922354" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::firePostRenderQueues</definition>
        <argsstring>()</argsstring>
        <name>firePostRenderQueues</name>
        <briefdescription>
<para>Internal method for firing the queue end event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="659"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4e8e0def255fee437b420774354f1371" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::fireRenderQueueStarted</definition>
        <argsstring>(uint8 id, const String &amp;invocation)</argsstring>
        <name>fireRenderQueueStarted</name>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>invocation</declname>
        </param>
        <briefdescription>
<para>Internal method for firing the queue start event, returns true if queue is to be skipped. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="661"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a48c65f5fdd8d9d631889585d82fe8ab9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::fireRenderQueueEnded</definition>
        <argsstring>(uint8 id, const String &amp;invocation)</argsstring>
        <name>fireRenderQueueEnded</name>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>invocation</declname>
        </param>
        <briefdescription>
<para>Internal method for firing the queue end event, returns true if queue is to be repeated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="663"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a42fbdf3cd2148ed224e9c22f9cfa0476" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::fireRenderSingleObject</definition>
        <argsstring>(Renderable *rend, const Pass *pass, const AutoParamDataSource *source, const LightList *pLightList, bool suppressRenderStateChanges)</argsstring>
        <name>fireRenderSingleObject</name>
        <param>
          <type><ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> *</type>
          <declname>rend</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1AutoParamDataSource" kindref="compound">AutoParamDataSource</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>pLightList</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppressRenderStateChanges</declname>
        </param>
        <briefdescription>
<para>Internal method for firing when rendering a single object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="666"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad5f565ed419ccb8ab372a0f708e32f68" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::fireShadowTexturesUpdated</definition>
        <argsstring>(size_t numberOfShadowTextures)</argsstring>
        <name>fireShadowTexturesUpdated</name>
        <param>
          <type>size_t</type>
          <declname>numberOfShadowTextures</declname>
        </param>
        <briefdescription>
<para>Internal method for firing the texture shadows updated event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="669"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad338a97ae6e0079466dcd3a94e0193bd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::fireShadowTexturesPreCaster</definition>
        <argsstring>(Light *light, Camera *camera, size_t iteration)</argsstring>
        <name>fireShadowTexturesPreCaster</name>
        <param>
          <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iteration</declname>
        </param>
        <briefdescription>
<para>Internal method for firing the pre caster texture shadows event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="671"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a387b7d13cc8d2cb01f70066d6f10b359" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::fireShadowTexturesPreReceiver</definition>
        <argsstring>(Light *light, Frustum *f)</argsstring>
        <name>fireShadowTexturesPreReceiver</name>
        <param>
          <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Frustum" kindref="compound">Frustum</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Internal method for firing the pre receiver texture shadows event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="673"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1afda1cb119dc3c90721e6612c8b597ceb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::firePreUpdateSceneGraph</definition>
        <argsstring>(Camera *camera)</argsstring>
        <name>firePreUpdateSceneGraph</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
<para>Internal method for firing pre update scene graph event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="675"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a83da77c2df87d5f4e42c06947d47bbc9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::firePostUpdateSceneGraph</definition>
        <argsstring>(Camera *camera)</argsstring>
        <name>firePostUpdateSceneGraph</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
<para>Internal method for firing post update scene graph event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="677"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a63d643fd58fb678a1eebdd1545056b6f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::firePreFindVisibleObjects</definition>
        <argsstring>(Viewport *v)</argsstring>
        <name>firePreFindVisibleObjects</name>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Internal method for firing find visible objects event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="679"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a71e96e9151e3d83f39917ecb1592ab8c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::firePostFindVisibleObjects</definition>
        <argsstring>(Viewport *v)</argsstring>
        <name>firePostFindVisibleObjects</name>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Internal method for firing find visible objects event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="681"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4293bcc808bd4911307fd5ca60c52965" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::fireSceneManagerDestroyed</definition>
        <argsstring>()</argsstring>
        <name>fireSceneManagerDestroyed</name>
        <briefdescription>
<para>Internal method for firing destruction event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="683"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4dfb70c49bd65354acf13491890abe5e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setViewport</definition>
        <argsstring>(Viewport *vp)</argsstring>
        <name>setViewport</name>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for setting the destination viewport for the next render. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="685"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0185f535c0b92eda29fa741f533d1424" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderVisibleObjectsDefaultSequence</definition>
        <argsstring>(void)</argsstring>
        <name>renderVisibleObjectsDefaultSequence</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for rendering all objects using the default queue sequence. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="691"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5d330306c0f22caf946d1ddbf0cc2474" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderVisibleObjectsCustomSequence</definition>
        <argsstring>(RenderQueueInvocationSequence *s)</argsstring>
        <name>renderVisibleObjectsCustomSequence</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for rendering all objects using a custom queue sequence. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="693"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0878fb11733d9a265adc56805f6acccc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::prepareRenderQueue</definition>
        <argsstring>(void)</argsstring>
        <name>prepareRenderQueue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for preparing the render queue for use with each render. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="695"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a505ac650e6f3d1f025a3a4ca87bacf0a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderSingleObject</definition>
        <argsstring>(Renderable *rend, const Pass *pass, bool lightScissoringClipping, bool doLightIteration, const LightList *manualLightList=0)</argsstring>
        <name>renderSingleObject</name>
        <param>
          <type><ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> *</type>
          <declname>rend</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lightScissoringClipping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doLightIteration</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>manualLightList</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal utility method for rendering a single object. <simplesect kind="remark"><para>Assumes that the pass has already been set up. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rend</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderable to issue to the pipeline </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>The pass which is being used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightScissoringClipping</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, passes that have the getLightScissorEnabled and/or getLightClipPlanesEnabled flags will cause calculation and setting of scissor rectangle and user clip planes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLightIteration</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this method will issue the renderable to the pipeline possibly multiple times, if the pass indicates it should be done once per light </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>manualLightList</parametername>
</parameternamelist>
<parameterdescription>
<para>Only applicable if doLightIteration is false, this method allows you to pass in a previously determined set of lights which will be used for a single render of this object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="714"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af9654870f0601526d98af8642546b1a0" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classOgre_1_1AutoParamDataSource" kindref="compound">AutoParamDataSource</ref> *</type>
        <definition>virtual AutoParamDataSource* Ogre::SceneManager::createAutoParamDataSource</definition>
        <argsstring>(void) const </argsstring>
        <name>createAutoParamDataSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for creating the <ref refid="classOgre_1_1AutoParamDataSource" kindref="compound">AutoParamDataSource</ref> instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="718" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="717" bodyend="720"/>
        <references refid="group__Memory_1gab5fc1358fd5a889de0a06d07e45df1ff" compoundref="OgreMemoryAllocatorConfig_8h" startline="471">OGRE_NEW</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9b47cb96d4c8daf13ad13f2cefdfb84f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::findLightsAffectingFrustum</definition>
        <argsstring>(const Camera *camera)</argsstring>
        <name>findLightsAffectingFrustum</name>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for locating a list of lights which could be affecting the frustum. <simplesect kind="remark"><para>Custom scene managers are encouraged to override this method to make use of their scene partitioning scheme to more efficiently locate lights, and to eliminate lights which may be occluded by word geometry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="787"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0127361e6d7549373cf7cb991792d45b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::initShadowVolumeMaterials</definition>
        <argsstring>(void)</argsstring>
        <name>initShadowVolumeMaterials</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Internal method for setting up materials for shadows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="789"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a901dc44fa7930877825f7be4b43006cd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::ensureShadowTexturesCreated</definition>
        <argsstring>()</argsstring>
        <name>ensureShadowTexturesCreated</name>
        <briefdescription>
<para>Internal method for creating shadow textures (texture-based shadows) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="791"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aee58adae03ba713cc72c4ec59d8b1333" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyShadowTextures</definition>
        <argsstring>(void)</argsstring>
        <name>destroyShadowTextures</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Internal method for destroying shadow textures (texture-based shadows) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="793"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa4359c3133d4b3769c326fdb6b15d139" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::updateDirtyInstanceManagers</definition>
        <argsstring>(void)</argsstring>
        <name>updateDirtyInstanceManagers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates all instance managaers with dirty instance batches. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a8cd474a0bb93c6fa0e4439a5a7d11c63" kindref="member">_addDirtyInstanceManager</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="800"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6b262351699ce4a35f93faa05612fb35" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderShadowVolumesToStencil</definition>
        <argsstring>(const Light *light, const Camera *cam, bool calcScissor)</argsstring>
        <name>renderShadowVolumesToStencil</name>
        <param>
          <type>const <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>calcScissor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for rendering all the objects for a given light into the stencil buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>light</parametername>
</parameternamelist>
<parameterdescription>
<para>The light source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cam</parametername>
</parameternamelist>
<parameterdescription>
<para>The camera being viewed from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calcScissor</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the method should set up any scissor state, or false if that&apos;s already been done </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="836"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a77a1e643384ab5a2d191642a052914c8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowVolumeStencilState</definition>
        <argsstring>(bool secondpass, bool zfail, bool twosided)</argsstring>
        <name>setShadowVolumeStencilState</name>
        <param>
          <type>bool</type>
          <declname>secondpass</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zfail</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>twosided</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal utility method for setting stencil state for rendering shadow volumes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondpass</parametername>
</parameternamelist>
<parameterdescription>
<para>Is this the second pass? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zfail</parametername>
</parameternamelist>
<parameterdescription>
<para>Should we be using the zfail method? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twosided</parametername>
</parameternamelist>
<parameterdescription>
<para>Should we use a 2-sided stencil? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="842"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aac6e885d46b59352faf85df49e0c9973" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::renderShadowVolumeObjects</definition>
        <argsstring>(ShadowCaster::ShadowRenderableListIterator iShadowRenderables, Pass *pass, const LightList *manualLightList, unsigned long flags, bool secondpass, bool zfail, bool twosided)</argsstring>
        <name>renderShadowVolumeObjects</name>
        <param>
          <type><ref refid="classOgre_1_1ShadowCaster_1a7b0999d33e25db97d0449d6cf95cbecd" kindref="member">ShadowCaster::ShadowRenderableListIterator</ref></type>
          <declname>iShadowRenderables</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>manualLightList</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secondpass</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zfail</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>twosided</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a set of shadow renderables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="846"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a79519a81dcd7a50402859133216f00f2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1SceneManager_1a2b399deb8670b6473b4193c1b54f601c" kindref="member">ShadowCasterList</ref> &amp;</type>
        <definition>virtual const ShadowCasterList&amp; Ogre::SceneManager::findShadowCastersForLight</definition>
        <argsstring>(const Light *light, const Camera *camera)</argsstring>
        <name>findShadowCastersForLight</name>
        <param>
          <type>const <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for locating a list of shadow casters which could be affecting the frustum for a given light. <simplesect kind="remark"><para>Custom scene managers are encouraged to override this method to add optimisations, and to add their own custom shadow casters (perhaps for world geometry) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="922"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a79019a1aaa0d930b1adfe4adb491654f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderBasicQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *pGroup, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderBasicQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>pGroup</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group in the ordinary way </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="925"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7b0f910145e18b403ffda692dc56de0a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderAdditiveStencilShadowedQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderAdditiveStencilShadowedQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group with the added complexity of additive stencil shadows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="928"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9347a2cc68ffb1f0f30b2c3648a9f1ab" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderModulativeStencilShadowedQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderModulativeStencilShadowedQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group with the added complexity of modulative stencil shadows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="931"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a066a00620486e3bda9a256103c08cd55" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderTextureShadowCasterQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderTextureShadowCasterQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group rendering only shadow casters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="934"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2fdad5a80651ae791c322546316bdac7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderTextureShadowReceiverQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderTextureShadowReceiverQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group rendering only shadow receivers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="937"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6821367bfafa83a3c5d0ed8f0dea17f9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderModulativeTextureShadowedQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderModulativeTextureShadowedQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group with the added complexity of modulative texture shadows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="940"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a900c414251c050209e24781067052ad3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderAdditiveTextureShadowedQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>renderAdditiveTextureShadowedQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a group with additive texture shadows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="944"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae9e2a6c19e5d5e11951dc0cd5c158fe8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderObjects</definition>
        <argsstring>(const QueuedRenderableCollection &amp;objs, QueuedRenderableCollection::OrganisationMode om, bool lightScissoringClipping, bool doLightIteration, const LightList *manualLightList=0)</argsstring>
        <name>renderObjects</name>
        <param>
          <type>const <ref refid="classOgre_1_1QueuedRenderableCollection" kindref="compound">QueuedRenderableCollection</ref> &amp;</type>
          <declname>objs</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lightScissoringClipping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doLightIteration</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>manualLightList</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a set of objects, see renderSingleObject for param definitions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="948"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae588d960549fd37f66881da0c100265b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::renderTransparentShadowCasterObjects</definition>
        <argsstring>(const QueuedRenderableCollection &amp;objs, QueuedRenderableCollection::OrganisationMode om, bool lightScissoringClipping, bool doLightIteration, const LightList *manualLightList=0)</argsstring>
        <name>renderTransparentShadowCasterObjects</name>
        <param>
          <type>const <ref refid="classOgre_1_1QueuedRenderableCollection" kindref="compound">QueuedRenderableCollection</ref> &amp;</type>
          <declname>objs</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lightScissoringClipping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doLightIteration</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>manualLightList</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render those objects in the transparent pass list which have shadow casting forced on <simplesect kind="remark"><para>This function is intended to be used to render the shadows of transparent objects which have transparency_casts_shadows set to &apos;on&apos; in their material </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="956"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7a2a90e25975a2f734657cda4f8544f0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::updateRenderQueueSplitOptions</definition>
        <argsstring>(void)</argsstring>
        <name>updateRenderQueueSplitOptions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the state of the global render queue splitting based on a shadow option change. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="960"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab5c96c7dc84fa2292c7e5062ad123c0c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::updateRenderQueueGroupSplitOptions</definition>
        <argsstring>(RenderQueueGroup *group, bool suppressShadows, bool suppressRenderState)</argsstring>
        <name>updateRenderQueueGroupSplitOptions</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppressShadows</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppressRenderState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the state of the render queue group splitting based on a shadow option change. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="964"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab83baf07ebcc68e41b403f2126105f69" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__General_1ga4acd510f26a9a302753cf95b35096527" kindref="member">ClipResult</ref></type>
        <definition>virtual ClipResult Ogre::SceneManager::buildAndSetScissor</definition>
        <argsstring>(const LightList &amp;ll, const Camera *cam)</argsstring>
        <name>buildAndSetScissor</name>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> &amp;</type>
          <declname>ll</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <briefdescription>
<para>Set up a scissor rectangle from a group of lights. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="967"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a03ab7a77952100672c2191f74b898f72" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::buildScissor</definition>
        <argsstring>(const Light *l, const Camera *cam, RealRect &amp;rect)</argsstring>
        <name>buildScissor</name>
        <param>
          <type>const <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <param>
          <type><ref refid="group__General_1ga3e1c672c1d342ffb4f122f44e342bc90" kindref="member">RealRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Update a scissor rectangle from a single light. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="969"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae79444a2f5305caeab80b01f8d1275a3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::resetScissor</definition>
        <argsstring>()</argsstring>
        <name>resetScissor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="970"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a386586877ecf98bd688954e18b2a47e8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__General_1ga4acd510f26a9a302753cf95b35096527" kindref="member">ClipResult</ref></type>
        <definition>virtual ClipResult Ogre::SceneManager::buildAndSetLightClip</definition>
        <argsstring>(const LightList &amp;ll)</argsstring>
        <name>buildAndSetLightClip</name>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> &amp;</type>
          <declname>ll</declname>
        </param>
        <briefdescription>
<para>Build a set of user clip planes from a single non-directional light. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="972"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab951496f7dff614730c5b59a8e9bae91" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::buildLightClip</definition>
        <argsstring>(const Light *l, PlaneList &amp;planes)</argsstring>
        <name>buildLightClip</name>
        <param>
          <type>const <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="group__Math_1gae00d718daa48567f6c010aad9d6dd92c" kindref="member">PlaneList</ref> &amp;</type>
          <declname>planes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="973"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac79994f9a877fc1cd988b581cc1368f6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::resetLightClip</definition>
        <argsstring>()</argsstring>
        <name>resetLightClip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="974"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2ce3efd7c504bcf7c1f0699e069118c2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::checkCachedLightClippingInfo</definition>
        <argsstring>()</argsstring>
        <name>checkCachedLightClippingInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="975"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a27125188a29fa136d80a27134bf8a279" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::useLights</definition>
        <argsstring>(const LightList &amp;lights, unsigned short limit)</argsstring>
        <name>useLights</name>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> &amp;</type>
          <declname>lights</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="994"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab5db505df81bfdd4f5bc062aa8ee7f82" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setViewMatrix</definition>
        <argsstring>(const Matrix4 &amp;m)</argsstring>
        <name>setViewMatrix</name>
        <param>
          <type>const <ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="995"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a571042948114d1c3db52cc8c8be05186" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::useLightsGpuProgram</definition>
        <argsstring>(const Pass *pass, const LightList *lights)</argsstring>
        <name>useLightsGpuProgram</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>lights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="996"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a87d96c7d08e61a0661bf7d786b893652" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::bindGpuProgram</definition>
        <argsstring>(GpuProgram *prog)</argsstring>
        <name>bindGpuProgram</name>
        <param>
          <type><ref refid="classOgre_1_1GpuProgram" kindref="compound">GpuProgram</ref> *</type>
          <declname>prog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="997"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2936f0d00bf8b857bce11c738732faa2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::updateGpuProgramParameters</definition>
        <argsstring>(const Pass *p)</argsstring>
        <name>updateGpuProgramParameters</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="998"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a95cd8ff86a7178c2e37b2fcb485f64fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::prepareShadowTextures</definition>
        <argsstring>(Camera *cam, Viewport *vp, const LightList *lightList=0)</argsstring>
        <name>prepareShadowTextures</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>vp</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>lightList</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for preparing shadow textures ready for use in a regular render Do not call manually unless before frame start or rendering is paused If lightList is not supplied, will render all lights in frustum </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="806"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2392e8d6a6849a4fa1839a085733a695" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structOgre_1_1SceneManager_1_1RenderContext" kindref="compound">RenderContext</ref> *</type>
        <definition>virtual RenderContext* Ogre::SceneManager::_pauseRendering</definition>
        <argsstring>()</argsstring>
        <name>_pauseRendering</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pause rendering of the frame. This has to be called when inside a renderScene call (Usually using a listener of some sort) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="821"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a27f763bb92fef8b1238e2272889ba58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_resumeRendering</definition>
        <argsstring>(RenderContext *context)</argsstring>
        <name>_resumeRendering</name>
        <param>
          <type><ref refid="structOgre_1_1SceneManager_1_1RenderContext" kindref="compound">RenderContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resume rendering of the frame. This has to be called after a _pauseRendering call <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The rendring context, as returned by the _pauseRendering call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="825"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a09e76a674bc69c610fb49acd3da76cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ogre::SceneManager::SceneManager</definition>
        <argsstring>(const String &amp;instanceName)</argsstring>
        <name>SceneManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1026"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6c8b9108b44339a321bc69b25a0c0a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Ogre::SceneManager::~SceneManager</definition>
        <argsstring>()</argsstring>
        <name>~SceneManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1030"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a92cef591d74630c19c534709dce030f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
        <definition>const String&amp; Ogre::SceneManager::getName</definition>
        <argsstring>(void) const </argsstring>
        <name>getName</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutex to protect the scene graph from simultaneous access from multiple threads. <simplesect kind="remark"><para>If you are updating the scene in a separate thread from the rendering thread, then you should lock this mutex before making any changes to the scene graph - that means creating, modifying or deleting a scene node, or attaching / detaching objects. It is <bold>your</bold> responsibility to take out this lock, the detail methods on the nodes will not do it for you (for the reasons discussed below). </para></simplesect>
<simplesect kind="par"><title></title><para>Note that locking this mutex will prevent the scene being rendered until it is unlocked again. Therefore you should do this sparingly. Try to create any objects you need separately and fully prepare them before doing all your scene graph work in one go, thus keeping this lock for the shortest time possible. </para></simplesect>
<simplesect kind="note"><para>A single global lock is used rather than a per-node lock since it keeps the number of locks required during rendering down to a minimum. Obtaining a lock, even if there is no contention, is not free so for performance it is good to do it as little as possible. Since modifying the scene in a separate thread is a fairly rare occurrence (relative to rendering), it is better to keep the locking required during rendering lower than to make update locks more granular. Return the instance name of this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1061" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1061" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a46690a40b65fd0e7e89752e1e36be727" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
        <definition>virtual const String&amp; Ogre::SceneManager::getTypeName</definition>
        <argsstring>(void) const =0</argsstring>
        <name>getTypeName</name>
        <reimplementedby refid="classOgre_1_1DefaultSceneManager_1a3e7bf86e745239456fb18dce99bca86d">getTypeName</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the type name of this scene manager. <simplesect kind="remark"><para>This method has to be implemented by subclasses. It should return the type name of this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> which agrees with the type name of the <ref refid="classOgre_1_1SceneManagerFactory" kindref="compound">SceneManagerFactory</ref> which created it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1069"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a62ca781b4c6d23dc3aab1f3a45d61843" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
        <definition>virtual Camera* Ogre::SceneManager::createCamera</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createCamera</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a camera to be managed by this scene manager. <simplesect kind="remark"><para>This camera must be added to the scene at a later time using the attachObject method of the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> class. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the new camera. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1078"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4dbe2eeec924f88c30010e9fd4d9da0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
        <definition>virtual Camera* Ogre::SceneManager::getCamera</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getCamera</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named camera. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1083"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac4af585550a9ed44ead58855419d5f84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasCamera</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasCamera</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a camera with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1087"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1acac58e45f8b6b6826c81933f02a45046" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyCamera</definition>
        <argsstring>(Camera *cam)</argsstring>
        <name>destroyCamera</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a camera from the scene. <simplesect kind="remark"><para>This method removes a previously added camera from the scene. The camera is deleted so the caller must ensure no references to it&apos;s previous instance (e.g. in a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>) are used. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cam</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the camera to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1097"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a41b9358cdad6fd7113b2a0cad8112f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyCamera</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyCamera</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a camera from the scene. <simplesect kind="remark"><para>This method removes an camera from the scene based on the camera&apos;s name rather than a pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1104"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9cb93862284e7443b94eaabdef21564a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllCameras</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllCameras</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes (and destroys) all cameras from the scene. <simplesect kind="remark"><para>Some cameras are internal created to dealing with texture shadow, their aren&apos;t supposed to destroy outside. So, while you are using texture shadow, don&apos;t call this method, or you can set the shadow technique other than texture-based, which will destroy all internal created shadow cameras and textures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1114"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab127d52207729591dd51cb12a5b2ed2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
        <definition>virtual Light* Ogre::SceneManager::createLight</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createLight</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a light for use in the scene. <simplesect kind="remark"><para>Lights can either be in a fixed position and independent of the scene graph, or they can be attached to SceneNodes so they derive their position from the parent node. Either way, they are created using this method so that the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> manages their existence. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the new light, to identify it later. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1126"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a417bdd216730a8d171c3184b0d49c32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
        <definition>virtual Light* Ogre::SceneManager::createLight</definition>
        <argsstring>()</argsstring>
        <name>createLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a light with a generated name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1129"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af128cc414af001b325d40745b745b79c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
        <definition>virtual Light* Ogre::SceneManager::getLight</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getLight</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the named <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> which has previously been added to the scene. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1134"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a032173d58a1465af8550a394a9c5b870" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasLight</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasLight</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a light with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1138"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abd89ebb9c348ed8230ad300ef7501948" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="group__Math_1gae00d718daa48567f6c010aad9d6dd92c" kindref="member">PlaneList</ref> &amp;</type>
        <definition>virtual const PlaneList&amp; Ogre::SceneManager::getLightClippingPlanes</definition>
        <argsstring>(Light *l)</argsstring>
        <name>getLightClippingPlanes</name>
        <param>
          <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a set of clipping planes for a given light. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1142"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a384b7ee3a28ba87866c68d689571aa8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="group__General_1ga3e1c672c1d342ffb4f122f44e342bc90" kindref="member">RealRect</ref> &amp;</type>
        <definition>virtual const RealRect&amp; Ogre::SceneManager::getLightScissorRect</definition>
        <argsstring>(Light *l, const Camera *cam)</argsstring>
        <name>getLightScissorRect</name>
        <param>
          <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a scissor rectangle for a given light and camera. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1146"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aef6d26cb64e7a1984ebff9b56c45c6e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyLight</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyLight</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the named light from the scene and destroys it. <simplesect kind="remark"><para><ref refid="classOgre_1_1Any" kindref="compound">Any</ref> pointers held to this light after calling this method will be invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1152"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1acce173aa89e849bda564f4e6e3be6402" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyLight</definition>
        <argsstring>(Light *light)</argsstring>
        <name>destroyLight</name>
        <param>
          <type><ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the light from the scene and destroys it based on a pointer. <simplesect kind="remark"><para><ref refid="classOgre_1_1Any" kindref="compound">Any</ref> pointers held to this light after calling this method will be invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1158"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a723da9119c26f5022e3a2818611e9aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllLights</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllLights</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes and destroys all lights in the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1161"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aebfa8b61550010c86fc3b605e2cda669" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_notifyLightsDirty</definition>
        <argsstring>(void)</argsstring>
        <name>_notifyLightsDirty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advance method to increase the lights dirty counter due lights changed. <simplesect kind="remark"><para>Scene manager tracking lights that affecting the frustum, if changes detected (the changes includes light list itself and the light&apos;s position and attenuation range), then increase the lights dirty counter. </para></simplesect>
<simplesect kind="par"><title></title><para>For some reason, you can call this method to force whole scene objects re-populate their light list. But near in mind, call to this method will harm performance, so should avoid if possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1173"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4e9e8558a06d7bf26eadf349731f1cb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceOgre_1a4304981347643708ee9a7ba8884e5758" kindref="member">ulong</ref></type>
        <definition>ulong Ogre::SceneManager::_getLightsDirtyCounter</definition>
        <argsstring>(void) const </argsstring>
        <name>_getLightsDirtyCounter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advance method to gets the lights dirty counter. <simplesect kind="remark"><para>Scene manager tracking lights that affecting the frustum, if changes detected (the changes includes light list itself and the light&apos;s position and attenuation range), then increase the lights dirty counter. </para></simplesect>
<simplesect kind="par"><title></title><para>When implementing customise lights finding algorithm relied on either <ref refid="classOgre_1_1SceneManager_1a62876dcdf7cb0f7923de88e62cf077ac" kindref="member">SceneManager::_getLightsAffectingFrustum</ref> or <ref refid="classOgre_1_1SceneManager_1a165307402bd2bfca5b1f57e08220a739" kindref="member">SceneManager::_populateLightList</ref>, might check this value for sure that the light list are really need to re-populate, otherwise, returns cached light list (if exists) for better performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1187" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1187" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a62876dcdf7cb0f7923de88e62cf077ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> &amp;</type>
        <definition>virtual const LightList&amp; Ogre::SceneManager::_getLightsAffectingFrustum</definition>
        <argsstring>(void) const </argsstring>
        <name>_getLightsAffectingFrustum</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the list of lights which could be affecting the frustum. <simplesect kind="remark"><para>Note that default implementation of this method returns a cached light list, which is populated when rendering the scene. So by default the list of lights is only available during scene rendering. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1195"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a165307402bd2bfca5b1f57e08220a739" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_populateLightList</definition>
        <argsstring>(const Vector3 &amp;position, Real radius, LightList &amp;destList, uint32 lightMask=0xFFFFFFFF)</argsstring>
        <name>_populateLightList</name>
        <param>
          <type>const <ref refid="classOgre_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> &amp;</type>
          <declname>destList</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
          <declname>lightMask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Populate a light list with an ordered set of the lights which are closest to the position specified. <simplesect kind="remark"><para>Note that since directional lights have no position, they are always considered closer than any point lights and as such will always take precedence. </para></simplesect>
<simplesect kind="par"><title></title><para>Subclasses of the default <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> may wish to take into account other issues such as possible visibility of the light if that information is included in their data structures. This basic scenemanager simply orders by distance, eliminating those lights which are out of range or could not be affecting the frustum (i.e. only the lights returned by <ref refid="classOgre_1_1SceneManager_1a62876dcdf7cb0f7923de88e62cf077ac" kindref="member">SceneManager::_getLightsAffectingFrustum</ref> are take into account). </para></simplesect>
<simplesect kind="par"><title></title><para>The number of items in the list max exceed the maximum number of lights supported by the renderer, but the extraneous ones will never be used. In fact the limit will be imposed by <ref refid="classOgre_1_1Pass_1a7c90a998e60c3d1eaed4a9523cb11adf" kindref="member">Pass::getMaxSimultaneousLights</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position at which to evaluate the list of lights </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding radius to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destList</parametername>
</parameternamelist>
<parameterdescription>
<para>List to be populated with ordered set of lights; will be cleared by this method before population. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightMask</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask with which to include / exclude lights </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1219"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8390862f435cfe5285abf94955534334" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_populateLightList</definition>
        <argsstring>(const SceneNode *sn, Real radius, LightList &amp;destList, uint32 lightMask=0xFFFFFFFF)</argsstring>
        <name>_populateLightList</name>
        <param>
          <type>const <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
          <declname>sn</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> &amp;</type>
          <declname>destList</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
          <declname>lightMask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Populates a light list with an ordered set of the lights which are closest to the position of the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> given. <simplesect kind="remark"><para>Note that since directional lights have no position, they are always considered closer than any point lights and as such will always take precedence. This overloaded version will take the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>&apos;s position and use the second method to populate the list. </para></simplesect>
<simplesect kind="par"><title></title><para>Subclasses of the default <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> may wish to take into account other issues such as possible visibility of the light if that information is included in their data structures. This basic scenemanager simply orders by distance, eliminating those lights which are out of range or could not be affecting the frustum (i.e. only the lights returned by <ref refid="classOgre_1_1SceneManager_1a62876dcdf7cb0f7923de88e62cf077ac" kindref="member">SceneManager::_getLightsAffectingFrustum</ref> are take into account). </para></simplesect>
<simplesect kind="par"><title></title><para>Also note that subclasses of the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> might be used here to provide cached scene related data, accelerating the list population (for example light lists for SceneNodes could be cached inside subclassed <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> objects). </para></simplesect>
<simplesect kind="par"><title></title><para>The number of items in the list may exceed the maximum number of lights supported by the renderer, but the extraneous ones will never be used. In fact the limit will be imposed by <ref refid="classOgre_1_1Pass_1a7c90a998e60c3d1eaed4a9523cb11adf" kindref="member">Pass::getMaxSimultaneousLights</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> for which to evaluate the list of lights </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding radius to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destList</parametername>
</parameternamelist>
<parameterdescription>
<para>List to be populated with ordered set of lights; will be cleared by this method before population. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightMask</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask with which to include / exclude lights </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1249"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab31f9c018b801240c238c7a048439150" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::createSceneNode</definition>
        <argsstring>(void)</argsstring>
        <name>createSceneNode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. <simplesect kind="remark"><para>Note that this does not add the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> to the scene hierarchy. This method is for convenience, since it allows an instance to be created for which the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> is responsible for allocating and releasing memory, which is convenient in complex scenes. </para></simplesect>
<simplesect kind="par"><title></title><para>To include the returned <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> in the scene, use the addChild method of the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> which is to be it&apos;s parent. </para></simplesect>
<simplesect kind="par"><title></title><para>Note that this method takes no parameters, and the node created is unnamed (it is actually given a generated name, which you can retrieve if you want). If you wish to create a node with a specific name, call the alternative method which takes a name parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1267"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a73c42645ea3b064ca6e0822a8f702cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::createSceneNode</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createSceneNode</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> with a given name. <simplesect kind="remark"><para>Note that this does not add the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> to the scene hierarchy. This method is for convenience, since it allows an instance to be created for which the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> is responsible for allocating and releasing memory, which is convenient in complex scenes. </para></simplesect>
<simplesect kind="par"><title></title><para>To include the returned <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> in the scene, use the addChild method of the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> which is to be it&apos;s parent. </para></simplesect>
<simplesect kind="par"><title></title><para>Note that this method takes a name parameter, which makes the node easier to retrieve directly again later. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1283"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a813346e505716ae5d24f714cfc4a5069" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroySceneNode</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroySceneNode</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> with a given name. <simplesect kind="remark"><para>This allows you to physically delete an individual <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> if you want to. Note that this is not normally recommended, it&apos;s better to allow <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> to delete the nodes when the scene is cleared. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1291"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa613e5ffb08b95a90644a61ac10c9b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroySceneNode</definition>
        <argsstring>(SceneNode *sn)</argsstring>
        <name>destroySceneNode</name>
        <param>
          <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
          <declname>sn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. <simplesect kind="remark"><para>This allows you to physically delete an individual <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> if you want to. Note that this is not normally recommended, it&apos;s better to allow <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> to delete the nodes when the scene is cleared. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1299"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1ef8edf722bd8436ad414967bc2e8c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::getRootSceneNode</definition>
        <argsstring>(void)</argsstring>
        <name>getRootSceneNode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> at the root of the scene hierarchy. <simplesect kind="remark"><para>The entire scene is held as a hierarchy of nodes, which allows things like relative transforms, general changes in rendering state etc (See the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> class for more info). In this basic <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> class, the application using <ref refid="namespaceOgre" kindref="compound">Ogre</ref> is free to structure this hierarchy however it likes, since it has no real significance apart from making transforms relative to each node (more specialised subclasses will provide utility methods for building specific node structures e.g. loading a BSP tree). </para></simplesect>
<simplesect kind="par"><title></title><para>However, in all cases there is only ever one root node of the hierarchy, and this method returns a pointer to it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1315"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8c3389aea8f436037850ddc64f6d1d7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::getSceneNode</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getSceneNode</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a named <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> from the scene graph. <simplesect kind="remark"><para>If you chose to name a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> as you created it, or if you happened to make a note of the generated name, you can look it up wherever it is in the scene graph using this method. </para></simplesect>
<simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1324"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6389657d1838dcc93adc8b7e473e4c0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasSceneNode</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasSceneNode</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a scene node with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1328"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7bf9c5edb0ae3105c546bcad39252874" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::createEntity</definition>
        <argsstring>(const String &amp;entityName, const String &amp;meshName, const String &amp;groupName=ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME)</argsstring>
        <name>createEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>entityName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>meshName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a70da3137e703c147b98fbfbbebfbf023" kindref="member">ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> (instance of a discrete mesh). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the entity (must be unique). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meshName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="classOgre_1_1Mesh" kindref="compound">Mesh</ref> it is to be based on (e.g. &apos;knot.oof&apos;). The mesh will be loaded if it is not already. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1338"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8a69b7bb117db898c36da180d21b5856" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::createEntity</definition>
        <argsstring>(const String &amp;entityName, const MeshPtr &amp;pMesh)</argsstring>
        <name>createEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>entityName</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1MeshPtr" kindref="compound">MeshPtr</ref> &amp;</type>
          <declname>pMesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> (instance of a discrete mesh). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the entity (must be unique). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the <ref refid="classOgre_1_1Mesh" kindref="compound">Mesh</ref> it is to be based on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1346"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a747f27e6b51d98b2dfc1adf1b9d2f17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::createEntity</definition>
        <argsstring>(const String &amp;meshName)</argsstring>
        <name>createEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>meshName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> (instance of a discrete mesh) with an autogenerated name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meshName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="classOgre_1_1Mesh" kindref="compound">Mesh</ref> it is to be based on (e.g. &apos;knot.oof&apos;). The mesh will be loaded if it is not already. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1353"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abf306f7a1ff7278cb71eacb374468797" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::createEntity</definition>
        <argsstring>(const MeshPtr &amp;pMesh)</argsstring>
        <name>createEntity</name>
        <param>
          <type>const <ref refid="classOgre_1_1MeshPtr" kindref="compound">MeshPtr</ref> &amp;</type>
          <declname>pMesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> (instance of a discrete mesh) with an autogenerated name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the <ref refid="classOgre_1_1Mesh" kindref="compound">Mesh</ref> it is to be based on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1359"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9d9c135f1e3fe85db6e1976f1df3fb35" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::createEntity</definition>
        <argsstring>(const String &amp;entityName, PrefabType ptype)</argsstring>
        <name>createEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>entityName</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbf" kindref="member">PrefabType</ref></type>
          <declname>ptype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> (instance of a discrete mesh) from a range of prefab shapes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the entity (must be unique). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptype</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefab type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1379"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af9f7e37d5381c774312665b64ff5fee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::createEntity</definition>
        <argsstring>(PrefabType ptype)</argsstring>
        <name>createEntity</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbf" kindref="member">PrefabType</ref></type>
          <declname>ptype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> (instance of a discrete mesh) from a range of prefab shapes, generating the name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptype</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefab type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1384"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0d7e8374bd4774284ec6adfbd286ddbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
        <definition>virtual Entity* Ogre::SceneManager::getEntity</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1388"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1e6c904789a2393264e278c05e9c5395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasEntity</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether an entity with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1391"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aaec976bb28961a149c71a5eba62f40e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyEntity</definition>
        <argsstring>(Entity *ent)</argsstring>
        <name>destroyEntity</name>
        <param>
          <type><ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. <simplesect kind="warning"><para>Must only be done if the <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> is not attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. It may be safer to wait to clear the whole scene if you are unsure use clearScene. </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" kindref="member">SceneManager::clearScene</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1401"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3e19d4a7d848a745a59e63fca36fa79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyEntity</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys an <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> by name. <simplesect kind="warning"><para>Must only be done if the <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> is not attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. It may be safer to wait to clear the whole scene if you are unsure use clearScene. </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" kindref="member">SceneManager::clearScene</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1411"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1a77be68ccbfc90e2e1aed04340db4dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllEntities</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllEntities</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys all Entities. <simplesect kind="warning"><para>Again, use caution since no <ref refid="classOgre_1_1Entity" kindref="compound">Entity</ref> must be referred to elsewhere e.g. attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> otherwise a crash is likely. Use clearScene if you are unsure (it clears <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> entries too.) </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" kindref="member">SceneManager::clearScene</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1422"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a680ab7ccb241680100bfeea73681cce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> *</type>
        <definition>virtual ManualObject* Ogre::SceneManager::createManualObject</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createManualObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref>, an object which you populate with geometry manually through a GL immediate-mode style interface. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the object (must be unique). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1429"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af33c7c5188fb92701aad60b24e236e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> *</type>
        <definition>virtual ManualObject* Ogre::SceneManager::createManualObject</definition>
        <argsstring>()</argsstring>
        <name>createManualObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref>, an object which you populate with geometry manually through a GL immediate-mode style interface, generating the name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1433"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3c5eb0c8dd2cedf713d7309d74daf83a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> *</type>
        <definition>virtual ManualObject* Ogre::SceneManager::getManualObject</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getManualObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named <ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1437"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2f6e3800eacb8a5bb39fd5c7e94e2c82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasManualObject</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasManualObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a manual object with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1440"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a75d15c3ac882f78f0001d9d007f403be" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyManualObject</definition>
        <argsstring>(ManualObject *obj)</argsstring>
        <name>destroyManualObject</name>
        <param>
          <type><ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1444"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad42dfd20473e780251db4e939d7668d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyManualObject</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyManualObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1ManualObject" kindref="compound">ManualObject</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1447"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab3e151b6d94feb6648b8c817ba485238" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllManualObjects</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllManualObjects</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys all ManualObjects from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1450"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad0380187a8c572e303c93a64b3355062" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref> *</type>
        <definition>virtual BillboardChain* Ogre::SceneManager::createBillboardChain</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createBillboardChain</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref>, an object which you can use to render a linked chain of billboards. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the object (must be unique). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1456"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a61270f12b245fda43af0b3cedcc47675" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref> *</type>
        <definition>virtual BillboardChain* Ogre::SceneManager::createBillboardChain</definition>
        <argsstring>()</argsstring>
        <name>createBillboardChain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref>, an object which you can use to render a linked chain of billboards, with a generated name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1460"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0667cd1101c4d3e56302b8f82132986b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref> *</type>
        <definition>virtual BillboardChain* Ogre::SceneManager::getBillboardChain</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getBillboardChain</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named <ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1464"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a496f747b6482bc8170495815859c921e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasBillboardChain</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasBillboardChain</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a billboard chain with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1467"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a98bc20d44752f40fd588f0ba91e4a904" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyBillboardChain</definition>
        <argsstring>(BillboardChain *obj)</argsstring>
        <name>destroyBillboardChain</name>
        <param>
          <type><ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1471"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a149fafd649d4b9ebb34fa7467314640f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyBillboardChain</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyBillboardChain</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1BillboardChain" kindref="compound">BillboardChain</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1474"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2c01b8c2d82759fb875089c93df491a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllBillboardChains</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllBillboardChains</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys all BillboardChains from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1477"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac4edb21cec1bb77f7a003c506f344652" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref> *</type>
        <definition>virtual RibbonTrail* Ogre::SceneManager::createRibbonTrail</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createRibbonTrail</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref>, an object which you can use to render a linked chain of billboards which follows one or more nodes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the object (must be unique). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1483"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac6675774a4f13b588c1b75e9fcee440f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref> *</type>
        <definition>virtual RibbonTrail* Ogre::SceneManager::createRibbonTrail</definition>
        <argsstring>()</argsstring>
        <name>createRibbonTrail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref>, an object which you can use to render a linked chain of billboards which follows one or more nodes, generating the name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1487"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1afe38a813501eb293c9695c2db68c59b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref> *</type>
        <definition>virtual RibbonTrail* Ogre::SceneManager::getRibbonTrail</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getRibbonTrail</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named <ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1491"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad0d074b988d997b4b9fe461c26ffbab0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasRibbonTrail</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasRibbonTrail</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a ribbon trail with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1494"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af9c802d5f62e0c7b807dad407e47b97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyRibbonTrail</definition>
        <argsstring>(RibbonTrail *obj)</argsstring>
        <name>destroyRibbonTrail</name>
        <param>
          <type><ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1498"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6e86cea62012449c98c7afa14c241d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyRibbonTrail</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyRibbonTrail</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1RibbonTrail" kindref="compound">RibbonTrail</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1501"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a12e41109a26094ffe128beb5b6898f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllRibbonTrails</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllRibbonTrails</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys all RibbonTrails from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1504"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1ccfcf067b098ce531f16998e1bbe275" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> *</type>
        <definition>virtual ParticleSystem* Ogre::SceneManager::createParticleSystem</definition>
        <argsstring>(const String &amp;name, const String &amp;templateName)</argsstring>
        <name>createParticleSystem</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>templateName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a particle system based on a template. <simplesect kind="remark"><para>This method creates a new <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> instance based on the named template (defined through <ref refid="classOgre_1_1ParticleSystemManager_1ac3b4d8e5717c7eb97a06ed0585709ce5" kindref="member">ParticleSystemManager::createTemplate</ref>) and returns a pointer to the caller. The caller should not delete this object, it will be freed at system shutdown, or can be released earlier using the destroyParticleSystem method. </para></simplesect>
<simplesect kind="par"><title></title><para>Each system created from a template takes the template&apos;s settings at the time of creation, but is completely separate from the template from there on. </para></simplesect>
<simplesect kind="par"><title></title><para>Creating a particle system does not make it a part of the scene. As with other <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> subclasses, a <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> is not rendered until it is attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. </para></simplesect>
<simplesect kind="par"><title></title><para>This is probably the more useful particle system creation method since it does not require manual setup of the system. Note that the initial quota is based on the template but may be changed later. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give the new particle system instance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>templateName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the template to base the new instance on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1527"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a62589dc6a7f70e5efdbf5ebd7a282ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> *</type>
        <definition>virtual ParticleSystem* Ogre::SceneManager::createParticleSystem</definition>
        <argsstring>(const String &amp;name, size_t quota=500, const String &amp;resourceGroup=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>createParticleSystem</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>quota</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>resourceGroup</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a blank particle system. <simplesect kind="remark"><para>This method creates a new, blank <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> instance and returns a pointer to it. The caller should not delete this object, it will be freed at system shutdown, or can be released earlier using the destroyParticleSystem method. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method won&apos;t actually do anything because on creation a particle system has no emitters. The caller should manipulate the instance through it&apos;s <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> methods to actually create a real particle effect. </para></simplesect>
<simplesect kind="par"><title></title><para>Creating a particle system does not make it a part of the scene. As with other <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> subclasses, a <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> is not rendered until it is attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give the <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quota</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of particles to allow in this system. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resourceGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource group which will be used to load dependent resources </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1549"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa0d79919af93bf827cf8185930dd2a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> *</type>
        <definition>virtual ParticleSystem* Ogre::SceneManager::createParticleSystem</definition>
        <argsstring>(size_t quota=500, const String &amp;resourceGroup=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>createParticleSystem</name>
        <param>
          <type>size_t</type>
          <declname>quota</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>resourceGroup</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a blank particle system with a generated name. <simplesect kind="remark"><para>This method creates a new, blank <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> instance and returns a pointer to it. The caller should not delete this object, it will be freed at system shutdown, or can be released earlier using the destroyParticleSystem method. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method won&apos;t actually do anything because on creation a particle system has no emitters. The caller should manipulate the instance through it&apos;s <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> methods to actually create a real particle effect. </para></simplesect>
<simplesect kind="par"><title></title><para>Creating a particle system does not make it a part of the scene. As with other <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> subclasses, a <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> is not rendered until it is attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quota</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of particles to allow in this system. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resourceGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource group which will be used to load dependent resources </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1569"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a499cc0669395a5a11aea7d19979765b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> *</type>
        <definition>virtual ParticleSystem* Ogre::SceneManager::getParticleSystem</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getParticleSystem</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1573"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3dc7da5d60915c3667a531d2f053e34a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasParticleSystem</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasParticleSystem</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a particle system with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1576"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abde401fcf3796e3e2beb8c7603648f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyParticleSystem</definition>
        <argsstring>(ParticleSystem *obj)</argsstring>
        <name>destroyParticleSystem</name>
        <param>
          <type><ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1580"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abb127ba7b98f3892426d4f55abd2a953" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyParticleSystem</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyParticleSystem</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys a <ref refid="classOgre_1_1ParticleSystem" kindref="compound">ParticleSystem</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1583"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a98dbd81cd9867b1032e02e1780b6eb49" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllParticleSystems</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllParticleSystems</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys all ParticleSystems from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1586"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::clearScene</definition>
        <argsstring>(void)</argsstring>
        <name>clearScene</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empties the entire scene, inluding all SceneNodes, Entities, Lights, BillboardSets etc. Cameras are not deleted at this stage since they are still referenced by viewports, which are not destroyed during this process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1593"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7c26cdbb5703cf10a99add1f6a930ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::setAmbientLight</definition>
        <argsstring>(const ColourValue &amp;colour)</argsstring>
        <name>setAmbientLight</name>
        <param>
          <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the ambient light level to be used for the scene. <simplesect kind="remark"><para>This sets the colour and intensity of the ambient light in the scene, i.e. the light which is &apos;sourceless&apos; and illuminates all objects equally. The colour of an object is affected by a combination of the light in the scene, and the amount of light that object reflects (in this case based on the Material::ambient property). </para><simplesectsep/><para>By default the ambient light in the scene is <ref refid="classOgre_1_1ColourValue_1a7f8a06f2a9dd645417c36b560f496c1a" kindref="member">ColourValue::Black</ref>, i.e. no ambient light. This means that any objects rendered with a <ref refid="classOgre_1_1Material" kindref="compound">Material</ref> which has lighting enabled (see <ref refid="classOgre_1_1Material_1a758ce629d7d709a7038ede19d21f59cf" kindref="member">Material::setLightingEnabled</ref>) will not be visible unless you have some dynamic lights in your scene. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1607"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad4b5b77723e26e8ceb995f84b7fcade5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
        <definition>const ColourValue&amp; Ogre::SceneManager::getAmbientLight</definition>
        <argsstring>(void) const </argsstring>
        <name>getAmbientLight</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the ambient light level to be used for the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1611"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5ceb87944e7ba077e4c6ed8db8acf4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::prepareWorldGeometry</definition>
        <argsstring>(const String &amp;filename)</argsstring>
        <name>prepareWorldGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the source of the &apos;world&apos; geometry, i.e. the large, mainly static geometry making up the world e.g. rooms, landscape etc. This function can be called before setWorldGeometry in a background thread, do to some slow tasks (e.g. IO) that do not involve the backend render system. <simplesect kind="remark"><para>Depending on the type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> (subclasses will be specialised for particular world geometry types) you have requested via the <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> or <ref refid="classOgre_1_1SceneManagerEnumerator" kindref="compound">SceneManagerEnumerator</ref> classes, you can pass a filename to this method and it will attempt to load the world-level geometry for use. If you try to load an inappropriate type of world data an exception will be thrown. The default <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> cannot handle any sort of world geometry and so will always throw an exception. However subclasses like BspSceneManager can load particular types of world geometry e.g. &quot;q3dm1.bsp&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1628"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5a237a294eb4ebebee35da1825f71f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::prepareWorldGeometry</definition>
        <argsstring>(DataStreamPtr &amp;stream, const String &amp;typeName=StringUtil::BLANK)</argsstring>
        <name>prepareWorldGeometry</name>
        <param>
          <type><ref refid="group__Resources_1ga8a2a961b4205aacff9c01e81e08d7781" kindref="member">DataStreamPtr</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the source of the &apos;world&apos; geometry, i.e. the large, mainly static geometry making up the world e.g. rooms, landscape etc. This function can be called before setWorldGeometry in a background thread, do to some slow tasks (e.g. IO) that do not involve the backend render system. <simplesect kind="remark"><para>Depending on the type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> (subclasses will be specialised for particular world geometry types) you have requested via the <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> or <ref refid="classOgre_1_1SceneManagerEnumerator" kindref="compound">SceneManagerEnumerator</ref> classes, you can pass a stream to this method and it will attempt to load the world-level geometry for use. If the manager can only handle one input format the typeName parameter is not required. The stream passed will be read (and it&apos;s state updated). </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Data stream containing data to load </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>String identifying the type of world geometry contained in the stream - not required if this manager only supports one type of world geometry. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1648"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1accb0fdfbd1f61aa4d3d6e1f4625e1f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setWorldGeometry</definition>
        <argsstring>(const String &amp;filename)</argsstring>
        <name>setWorldGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the source of the &apos;world&apos; geometry, i.e. the large, mainly static geometry making up the world e.g. rooms, landscape etc. <simplesect kind="remark"><para>Depending on the type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> (subclasses will be specialised for particular world geometry types) you have requested via the <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> or <ref refid="classOgre_1_1SceneManagerEnumerator" kindref="compound">SceneManagerEnumerator</ref> classes, you can pass a filename to this method and it will attempt to load the world-level geometry for use. If you try to load an inappropriate type of world data an exception will be thrown. The default <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> cannot handle any sort of world geometry and so will always throw an exception. However subclasses like BspSceneManager can load particular types of world geometry e.g. &quot;q3dm1.bsp&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1662"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a000a7ece2364c8da5e9f4b5d6aac6730" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setWorldGeometry</definition>
        <argsstring>(DataStreamPtr &amp;stream, const String &amp;typeName=StringUtil::BLANK)</argsstring>
        <name>setWorldGeometry</name>
        <param>
          <type><ref refid="group__Resources_1ga8a2a961b4205aacff9c01e81e08d7781" kindref="member">DataStreamPtr</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the source of the &apos;world&apos; geometry, i.e. the large, mainly static geometry making up the world e.g. rooms, landscape etc. <simplesect kind="remark"><para>Depending on the type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> (subclasses will be specialised for particular world geometry types) you have requested via the <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> or <ref refid="classOgre_1_1SceneManagerEnumerator" kindref="compound">SceneManagerEnumerator</ref> classes, you can pass a stream to this method and it will attempt to load the world-level geometry for use. If the manager can only handle one input format the typeName parameter is not required. The stream passed will be read (and it&apos;s state updated). </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Data stream containing data to load </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>String identifying the type of world geometry contained in the stream - not required if this manager only supports one type of world geometry. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1680"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1257fd328d54908eeb45398b3191f92b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Ogre::SceneManager::estimateWorldGeometry</definition>
        <argsstring>(const String &amp;filename)</argsstring>
        <name>estimateWorldGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimate the number of loading stages required to load the named world geometry. <simplesect kind="remark"><para>This method should be overridden by SceneManagers that provide custom world geometry that can take some time to load. They should return from this method a count of the number of stages of progress they can report on whilst loading. During real loading (setWorldGeometry), they should call ResourceGroupManager::_notifyWorldGeometryProgress exactly that number of times when loading the geometry for real. </para></simplesect>
<simplesect kind="note"><para>The default is to return 0, ie to not report progress. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1695" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1694" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aeeea65a3bf511e82a9b59ba31b96e98f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Ogre::SceneManager::estimateWorldGeometry</definition>
        <argsstring>(DataStreamPtr &amp;stream, const String &amp;typeName=StringUtil::BLANK)</argsstring>
        <name>estimateWorldGeometry</name>
        <param>
          <type><ref refid="group__Resources_1ga8a2a961b4205aacff9c01e81e08d7781" kindref="member">DataStreamPtr</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimate the number of loading stages required to load the named world geometry. <simplesect kind="remark"><para>Operates just like the version of this method which takes a filename, but operates on a stream instead. Note that since the stream is updated, you&apos;ll need to reset the stream or reopen it when it comes to loading it for real. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Data stream containing data to load </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>String identifying the type of world geometry contained in the stream - not required if this manager only supports one type of world geometry. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1711" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1709" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1add6fe27d7a9500aafbe9325c21985801" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structOgre_1_1ViewPoint" kindref="compound">ViewPoint</ref></type>
        <definition>virtual ViewPoint Ogre::SceneManager::getSuggestedViewpoint</definition>
        <argsstring>(bool random=false)</argsstring>
        <name>getSuggestedViewpoint</name>
        <param>
          <type>bool</type>
          <declname>random</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asks the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> to provide a suggested viewpoint from which the scene should be viewed. <simplesect kind="remark"><para>Typically this method returns the origin unless a) world geometry has been loaded using <ref refid="classOgre_1_1SceneManager_1accb0fdfbd1f61aa4d3d6e1f4625e1f9c" kindref="member">SceneManager::setWorldGeometry</ref> and b) that world geometry has suggested &apos;start&apos; points. If there is more than one viewpoint which the scene manager can suggest, it will always suggest the first one unless the random parameter is true. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>random</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, and there is more than one possible suggestion, a random one will be used. If false the same one will always be suggested. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, true is returned. </para></simplesect>
<simplesect kind="par"><title></title><para>On failiure, false is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1727"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a34f3ddda75dcf75d5c5176446b3316a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::setOption</definition>
        <argsstring>(const String &amp;strKey, const void *pValue)</argsstring>
        <name>setOption</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for setting a specific option of the Scene Manager. These options are usually specific for a certain implemntation of the Scene Manager class, and may (and probably will) not exist across different implementations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strKey</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pValue</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the value - the size should be calculated by the scene manager based on the key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, true is returned. </para></simplesect>
<simplesect kind="par"><title></title><para>On failiure, false is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1743" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1742" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2ea53a860f373185f5a46239f579a361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getOption</definition>
        <argsstring>(const String &amp;strKey, void *pDestValue)</argsstring>
        <name>getOption</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pDestValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for getting the value of an implementation-specific Scene Manager option. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strKey</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pDestValue</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a memory location where the value will be copied. Currently, the memory will be allocated by the scene manager, but this may change </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, true is returned and pDestValue points to the value of the given option. </para></simplesect>
<simplesect kind="par"><title></title><para>On failiure, false is returned and pDestValue is set to NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1759" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1758" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a31da84037d0cca0008e9e894e8ddb569" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasOption</definition>
        <argsstring>(const String &amp;strKey) const </argsstring>
        <name>hasOption</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for verifying wether the scene manager has an implementation-specific option. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strKey</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to check for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the scene manager contains the given option, true is returned. </para></simplesect>
<simplesect kind="remark"><para>If it does not, false is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1771" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1770" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae291393bc0c5bd48a8c6e79742180c93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getOptionValues</definition>
        <argsstring>(const String &amp;strKey, StringVector &amp;refValueList)</argsstring>
        <name>getOptionValues</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <param>
          <type><ref refid="group__General_1ga0899c03496d3c25c6555889aa76a78db" kindref="member">StringVector</ref> &amp;</type>
          <declname>refValueList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for getting all possible values for a specific option. When this list is too large (i.e. the option expects, for example, a float), the return value will be true, but the list will contain just one element whose size will be set to 0. Otherwise, the list will be filled with all the possible values the option can accept. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strKey</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to get the values for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refValueList</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a list that will be filled with the available values. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success (the option exists), true is returned. </para></simplesect>
<simplesect kind="par"><title></title><para>On failure, false is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1788" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1787" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7c8ff6b5c19eb9eeef9d5a6c9fca9fe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getOptionKeys</definition>
        <argsstring>(StringVector &amp;refKeys)</argsstring>
        <name>getOptionKeys</name>
        <param>
          <type><ref refid="group__General_1ga0899c03496d3c25c6555889aa76a78db" kindref="member">StringVector</ref> &amp;</type>
          <declname>refKeys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for getting all the implementation-specific options of the scene manager. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refKeys</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a list that will be filled with all the available options. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, true is returned. On failiure, false is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1797" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1796" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a24ad98304368771d852a5ef62eb8d277" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_updateSceneGraph</definition>
        <argsstring>(Camera *cam)</argsstring>
        <name>_updateSceneGraph</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for updating the scene graph ie the tree of <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> instances managed by this class. <simplesect kind="remark"><para>This must be done before issuing objects to the rendering pipeline, since derived transformations from parent nodes are not updated until required. This <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> is a basic implementation which simply updates all nodes from the root. This ensures the scene is up to date but requires all the nodes to be updated even if they are not visible. Subclasses could trim this such that only potentially visible nodes are updated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1807"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abd51f4629d00ff23f5064c0d2ab37647" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_findVisibleObjects</definition>
        <argsstring>(Camera *cam, VisibleObjectsBoundsInfo *visibleBounds, bool onlyShadowCasters)</argsstring>
        <name>_findVisibleObjects</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <param>
          <type><ref refid="structOgre_1_1VisibleObjectsBoundsInfo" kindref="compound">VisibleObjectsBoundsInfo</ref> *</type>
          <declname>visibleBounds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyShadowCasters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method which parses the scene to find visible objects to render. <simplesect kind="remark"><para>If you&apos;re implementing a custom scene manager, this is the most important method to override since it&apos;s here you can apply your custom world partitioning scheme. Once you have added the appropriate objects to the render queue, you can let the default <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> objects _renderVisibleObjects handle the actual rendering of the objects you pick. </para></simplesect>
<simplesect kind="par"><title></title><para><ref refid="classOgre_1_1Any" kindref="compound">Any</ref> visible objects will be added to a rendering queue, which is indexed by material in order to ensure objects with the same material are rendered together to minimise render state changes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1820"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a58019e4c5104af4fe19d483fb1deec91" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_applySceneAnimations</definition>
        <argsstring>(void)</argsstring>
        <name>_applySceneAnimations</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for applying animations to scene nodes. <simplesect kind="remark"><para>Uses the internally stored <ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref> objects to apply animation to SceneNodes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1826"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa4714d027f9718bce87783bcca19f595" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_renderVisibleObjects</definition>
        <argsstring>(void)</argsstring>
        <name>_renderVisibleObjects</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends visible objects found in _findVisibleObjects to the rendering engine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1830"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a29ba8a2cad151d307d04781f749e7e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_renderScene</definition>
        <argsstring>(Camera *camera, Viewport *vp, bool includeOverlays)</argsstring>
        <name>_renderScene</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>vp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeOverlays</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prompts the class to send its contents to the renderer. <simplesect kind="remark"><para>This method prompts the scene manager to send the contents of the scene it manages to the rendering pipeline, possibly preceded by some sorting, culling or other scene management tasks. Note that this method is not normally called directly by the user application; it is called automatically by the <ref refid="namespaceOgre" kindref="compound">Ogre</ref> rendering loop. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a camera from whose viewpoint the scene is to be rendered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>The target viewport </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeOverlays</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not overlay objects should be rendered </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1845"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a85f817bd7ceae5bb1601b9b838eaff80" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_queueSkiesForRendering</definition>
        <argsstring>(Camera *cam)</argsstring>
        <name>_queueSkiesForRendering</name>
        <param>
          <type><ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for queueing the sky objects with the params as previously set through setSkyBox, setSkyPlane and setSkyDome. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1850"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab20c0ee49a853145d3350e6e32c59f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_setDestinationRenderSystem</definition>
        <argsstring>(RenderSystem *sys)</argsstring>
        <name>_setDestinationRenderSystem</name>
        <param>
          <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
          <declname>sys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notifies the scene manager of its destination render system <simplesect kind="remark"><para>Called automatically by RenderSystem::addSceneManager this method simply notifies the manager of the render system to which its output must be directed. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> subclass to be used as a render target. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1862"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7f9395e50574b0d0c343036cf816c2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSkyPlane</definition>
        <argsstring>(bool enable, const Plane &amp;plane, const String &amp;materialName, Real scale=1000, Real tiling=10, bool drawFirst=true, Real bow=0, int xsegments=1, int ysegments=1, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>setSkyPlane</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Plane" kindref="compound">Plane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>scale</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>tiling</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>drawFirst</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>bow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>xsegments</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky plane&apos; i.e. a plane at constant distance from the camera representing the sky. <simplesect kind="remark"><para>You can create sky planes yourself using the standard mesh and entity methods, but this creates a plane which the camera can never get closer or further away from - it moves with the camera. (NB you could create this effect by creating a world plane which was attached to the same <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> as the <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> too, but this would only apply to a single camera whereas this plane applies to any camera using this scene manager). </para></simplesect>
<simplesect kind="note"><para>To apply scaling, scrolls etc to the sky texture(s) you should use the <ref refid="classOgre_1_1TextureUnitState" kindref="compound">TextureUnitState</ref> class methods. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the plane, false to disable it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plane</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the plane, i.e. it&apos;s normal and it&apos;s distance from the camera. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the material the plane will use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling applied to the sky plane - higher values mean a bigger sky plane - you may want to tweak this depending on the size of plane.d and the other characteristics of your scene </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>How many times to tile the texture across the sky. Applies to all texture layers. If you need finer control use the <ref refid="classOgre_1_1TextureUnitState" kindref="compound">TextureUnitState</ref> texture coordinate transformation methods. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawFirst</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the plane is drawn before all other geometry in the scene, without updating the depth buffer. This is the safest rendering method since all other objects will always appear in front of the sky. However this is not the most efficient way if most of the sky is often occluded by other objects. If this is the case, you can set this parameter to false meaning it draws <emphasis>after</emphasis> all other geometry which can be an optimisation - however you must ensure that the plane.d value is large enough that no objects will &apos;poke through&apos; the sky plane when it is rendered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bow</parametername>
</parameternamelist>
<parameterdescription>
<para>If zero, the plane will be completely flat (like previous versions. If above zero, the plane will be curved, allowing the sky to appear below camera level. Curved sky planes are simular to skydomes, but are more compatible with fog. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xsegments</parametername>
<parametername>ysegments</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines the number of segments the plane will have to it. This is most important when you are bowing the plane, but may also be useful if you need tesselation on the plane to perform per-vertex effects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which to assign the plane mesh. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1922"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1791ac4fbc202fbea7247f236b363fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_setSkyPlane</definition>
        <argsstring>(bool enable, const Plane &amp;plane, const String &amp;materialName, Real scale=1000, Real tiling=10, uint8 renderQueue=RENDER_QUEUE_SKIES_EARLY, Real bow=0, int xsegments=1, int ysegments=1, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>_setSkyPlane</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Plane" kindref="compound">Plane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>scale</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>tiling</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>renderQueue</declname>
          <defval><ref refid="group__RenderSystem_1ggad08013a341ff0ef07c39fa3502bf6c00a85a7c54f44b9ac82523d80d19b6b2394" kindref="member">RENDER_QUEUE_SKIES_EARLY</ref></defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>bow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>xsegments</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky plane&apos; i.e. a plane at constant distance from the camera representing the sky. <simplesect kind="remark"><para>You can create sky planes yourself using the standard mesh and entity methods, but this creates a plane which the camera can never get closer or further away from - it moves with the camera. (NB you could create this effect by creating a world plane which was attached to the same <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> as the <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> too, but this would only apply to a single camera whereas this plane applies to any camera using this scene manager). </para></simplesect>
<simplesect kind="note"><para>To apply scaling, scrolls etc to the sky texture(s) you should use the <ref refid="classOgre_1_1TextureUnitState" kindref="compound">TextureUnitState</ref> class methods. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the plane, false to disable it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plane</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the plane, i.e. it&apos;s normal and it&apos;s distance from the camera. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the material the plane will use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling applied to the sky plane - higher values mean a bigger sky plane - you may want to tweak this depending on the size of plane.d and the other characteristics of your scene </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>How many times to tile the texture across the sky. Applies to all texture layers. If you need finer control use the <ref refid="classOgre_1_1TextureUnitState" kindref="compound">TextureUnitState</ref> texture coordinate transformation methods. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The render queue to use when rendering this object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bow</parametername>
</parameternamelist>
<parameterdescription>
<para>If zero, the plane will be completely flat (like previous versions. If above zero, the plane will be curved, allowing the sky to appear below camera level. Curved sky planes are simular to skydomes, but are more compatible with fog. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xsegments</parametername>
<parametername>ysegments</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines the number of segments the plane will have to it. This is most important when you are bowing the plane, but may also be useful if you need tesselation on the plane to perform per-vertex effects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which to assign the plane mesh. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1971"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a213f0aaaf1341fe090e66968c8907f44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSkyPlaneEnabled</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setSkyPlaneEnabled</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky plane&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1974" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1974" bodyend="1974"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9d22e78d5f0059aeb0f822064af6ed5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isSkyPlaneEnabled</definition>
        <argsstring>(void) const </argsstring>
        <name>isSkyPlaneEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a key plane is enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1977" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1977" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af4199356f06cd6fd64c1257806e5e94f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::getSkyPlaneNode</definition>
        <argsstring>(void) const </argsstring>
        <name>getSkyPlaneNode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sky plane node, if enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1980" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1980" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a68bd19b47ed424ebda3a7987a6d1c289" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="structOgre_1_1SceneManager_1_1SkyPlaneGenParameters" kindref="compound">SkyPlaneGenParameters</ref> &amp;</type>
        <definition>virtual const SkyPlaneGenParameters&amp; Ogre::SceneManager::getSkyPlaneGenParameters</definition>
        <argsstring>(void) const </argsstring>
        <name>getSkyPlaneGenParameters</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters used to construct the SkyPlane, if any </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="1983" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="1983" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af419fca38294bef65224162b3ad4af36" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSkyBox</definition>
        <argsstring>(bool enable, const String &amp;materialName, Real distance=5000, bool drawFirst=true, const Quaternion &amp;orientation=Quaternion::IDENTITY, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>setSkyBox</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
          <defval>5000</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>drawFirst</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref> &amp;</type>
          <declname>orientation</declname>
          <defval><ref refid="classOgre_1_1Quaternion_1a441b8d52549e1dedec27420325a313ef" kindref="member">Quaternion::IDENTITY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky box&apos; i.e. a 6-sided box at constant distance from the camera representing the sky. <simplesect kind="remark"><para>You could create a sky box yourself using the standard mesh and entity methods, but this creates a plane which the camera can never get closer or further away from - it moves with the camera. (NB you could create this effect by creating a world box which was attached to the same <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> as the <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> too, but this would only apply to a single camera whereas this skybox applies to any camera using this scene manager). </para></simplesect>
<simplesect kind="par"><title></title><para>The material you use for the skybox can either contain layers which are single textures, or they can be cubic textures, i.e. made up of 6 images, one for each plane of the cube. See the <ref refid="classOgre_1_1TextureUnitState" kindref="compound">TextureUnitState</ref> class for more information. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the skybox, false to disable it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the material the box will use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in world coorinates from the camera to each plane of the box. The default is normally OK. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawFirst</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the box is drawn before all other geometry in the scene, without updating the depth buffer. This is the safest rendering method since all other objects will always appear in front of the sky. However this is not the most efficient way if most of the sky is often occluded by other objects. If this is the case, you can set this parameter to false meaning it draws <emphasis>after</emphasis> all other geometry which can be an optimisation - however you must ensure that the distance value is large enough that no objects will &apos;poke through&apos; the sky box when it is rendered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter to specify the orientation of the box. By default the &apos;top&apos; of the box is deemed to be in the +y direction, and the &apos;front&apos; at the -z direction. You can use this parameter to rotate the sky if you want. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which to assign the plane mesh. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2029"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1dd29bf89d777d7c2b032ebffca7e8d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_setSkyBox</definition>
        <argsstring>(bool enable, const String &amp;materialName, Real distance=5000, uint8 renderQueue=RENDER_QUEUE_SKIES_EARLY, const Quaternion &amp;orientation=Quaternion::IDENTITY, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>_setSkyBox</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
          <defval>5000</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>renderQueue</declname>
          <defval><ref refid="group__RenderSystem_1ggad08013a341ff0ef07c39fa3502bf6c00a85a7c54f44b9ac82523d80d19b6b2394" kindref="member">RENDER_QUEUE_SKIES_EARLY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref> &amp;</type>
          <declname>orientation</declname>
          <defval><ref refid="classOgre_1_1Quaternion_1a441b8d52549e1dedec27420325a313ef" kindref="member">Quaternion::IDENTITY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky box&apos; i.e. a 6-sided box at constant distance from the camera representing the sky. <simplesect kind="remark"><para>You could create a sky box yourself using the standard mesh and entity methods, but this creates a plane which the camera can never get closer or further away from - it moves with the camera. (NB you could create this effect by creating a world box which was attached to the same <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> as the <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> too, but this would only apply to a single camera whereas this skybox applies to any camera using this scene manager). </para></simplesect>
<simplesect kind="par"><title></title><para>The material you use for the skybox can either contain layers which are single textures, or they can be cubic textures, i.e. made up of 6 images, one for each plane of the cube. See the <ref refid="classOgre_1_1TextureUnitState" kindref="compound">TextureUnitState</ref> class for more information. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the skybox, false to disable it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the material the box will use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in world coorinates from the camera to each plane of the box. The default is normally OK. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The render queue to use when rendering this object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter to specify the orientation of the box. By default the &apos;top&apos; of the box is deemed to be in the +y direction, and the &apos;front&apos; at the -z direction. You can use this parameter to rotate the sky if you want. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which to assign the plane mesh. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2066"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad8ba1fc585a224a834ffe2624db23e57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSkyBoxEnabled</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setSkyBoxEnabled</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky box&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2069" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2069" bodyend="2069"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1209e1308df35bae42460f8aece7549b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isSkyBoxEnabled</definition>
        <argsstring>(void) const </argsstring>
        <name>isSkyBoxEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a skybox is enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2072" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2072" bodyend="2072"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3092d641b3b6697fa12517898463c49b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::getSkyBoxNode</definition>
        <argsstring>(void) const </argsstring>
        <name>getSkyBoxNode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the skybox node, if enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2075" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2075" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aca48eb6f90fcd5f169c94ad3d1a27ef6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="structOgre_1_1SceneManager_1_1SkyBoxGenParameters" kindref="compound">SkyBoxGenParameters</ref> &amp;</type>
        <definition>virtual const SkyBoxGenParameters&amp; Ogre::SceneManager::getSkyBoxGenParameters</definition>
        <argsstring>(void) const </argsstring>
        <name>getSkyBoxGenParameters</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters used to generate the current SkyBox, if any </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2078" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2078" bodyend="2078"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1add758e3fa5df1291df9ff98b2594d35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSkyDome</definition>
        <argsstring>(bool enable, const String &amp;materialName, Real curvature=10, Real tiling=8, Real distance=4000, bool drawFirst=true, const Quaternion &amp;orientation=Quaternion::IDENTITY, int xsegments=16, int ysegments=16, int ysegments_keep=-1, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>setSkyDome</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>curvature</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>tiling</declname>
          <defval>8</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
          <defval>4000</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>drawFirst</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref> &amp;</type>
          <declname>orientation</declname>
          <defval><ref refid="classOgre_1_1Quaternion_1a441b8d52549e1dedec27420325a313ef" kindref="member">Quaternion::IDENTITY</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>xsegments</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments_keep</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky dome&apos; i.e. an illusion of a curved sky. <simplesect kind="remark"><para>A sky dome is actually formed by 5 sides of a cube, but with texture coordinates generated such that the surface appears curved like a dome. Sky domes are appropriate where you need a realistic looking sky where the scene is not going to be &apos;fogged&apos;, and there is always a &apos;floor&apos; of some sort to prevent the viewer looking below the horizon (the distortion effect below the horizon can be pretty horrible, and there is never anyhting directly below the viewer). If you need a complete wrap-around background, use the setSkyBox method instead. You can actually combine a sky box and a sky dome if you want, to give a positional backdrop with an overlayed curved cloud layer. </para></simplesect>
<simplesect kind="par"><title></title><para>Sky domes work well with 2D repeating textures like clouds. You can change the apparent &apos;curvature&apos; of the sky depending on how your scene is viewed - lower curvatures are better for &apos;open&apos; scenes like landscapes, whilst higher curvatures are better for say FPS levels where you don&apos;t see a lot of the sky at once and the exaggerated curve looks good. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the skydome, false to disable it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the material the dome will use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curvature</parametername>
</parameternamelist>
<parameterdescription>
<para>The curvature of the dome. Good values are between 2 and 65. Higher values are more curved leading to a smoother effect, lower values are less curved meaning more distortion at the horizons but a better distance effect. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>How many times to tile the texture(s) across the dome. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in world coorinates from the camera to each plane of the box the dome is rendered on. The default is normally OK. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawFirst</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the dome is drawn before all other geometry in the scene, without updating the depth buffer. This is the safest rendering method since all other objects will always appear in front of the sky. However this is not the most efficient way if most of the sky is often occluded by other objects. If this is the case, you can set this parameter to false meaning it draws <emphasis>after</emphasis> all other geometry which can be an optimisation - however you must ensure that the distance value is large enough that no objects will &apos;poke through&apos; the sky when it is rendered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter to specify the orientation of the dome. By default the &apos;top&apos; of the dome is deemed to be in the +y direction, and the &apos;front&apos; at the -z direction. You can use this parameter to rotate the sky if you want. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which to assign the plane mesh. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2140"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa6eea5fcfe5a6210a5db044e14a525f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_setSkyDome</definition>
        <argsstring>(bool enable, const String &amp;materialName, Real curvature=10, Real tiling=8, Real distance=4000, uint8 renderQueue=RENDER_QUEUE_SKIES_EARLY, const Quaternion &amp;orientation=Quaternion::IDENTITY, int xsegments=16, int ysegments=16, int ysegments_keep=-1, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>_setSkyDome</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>curvature</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>tiling</declname>
          <defval>8</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
          <defval>4000</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>renderQueue</declname>
          <defval><ref refid="group__RenderSystem_1ggad08013a341ff0ef07c39fa3502bf6c00a85a7c54f44b9ac82523d80d19b6b2394" kindref="member">RENDER_QUEUE_SKIES_EARLY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Quaternion" kindref="compound">Quaternion</ref> &amp;</type>
          <declname>orientation</declname>
          <defval><ref refid="classOgre_1_1Quaternion_1a441b8d52549e1dedec27420325a313ef" kindref="member">Quaternion::IDENTITY</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>xsegments</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ysegments_keep</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky dome&apos; i.e. an illusion of a curved sky. <simplesect kind="remark"><para>A sky dome is actually formed by 5 sides of a cube, but with texture coordinates generated such that the surface appears curved like a dome. Sky domes are appropriate where you need a realistic looking sky where the scene is not going to be &apos;fogged&apos;, and there is always a &apos;floor&apos; of some sort to prevent the viewer looking below the horizon (the distortion effect below the horizon can be pretty horrible, and there is never anyhting directly below the viewer). If you need a complete wrap-around background, use the setSkyBox method instead. You can actually combine a sky box and a sky dome if you want, to give a positional backdrop with an overlayed curved cloud layer. </para></simplesect>
<simplesect kind="par"><title></title><para>Sky domes work well with 2D repeating textures like clouds. You can change the apparent &apos;curvature&apos; of the sky depending on how your scene is viewed - lower curvatures are better for &apos;open&apos; scenes like landscapes, whilst higher curvatures are better for say FPS levels where you don&apos;t see a lot of the sky at once and the exaggerated curve looks good. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the skydome, false to disable it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the material the dome will use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curvature</parametername>
</parameternamelist>
<parameterdescription>
<para>The curvature of the dome. Good values are between 2 and 65. Higher values are more curved leading to a smoother effect, lower values are less curved meaning more distortion at the horizons but a better distance effect. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>How many times to tile the texture(s) across the dome. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in world coorinates from the camera to each plane of the box the dome is rendered on. The default is normally OK. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The render queue to use when rendering this object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter to specify the orientation of the dome. By default the &apos;top&apos; of the dome is deemed to be in the +y direction, and the &apos;front&apos; at the -z direction. You can use this parameter to rotate the sky if you want. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which to assign the plane mesh. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2193"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a50a692ae852b41cf6e7e8ac647d2660f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSkyDomeEnabled</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setSkyDomeEnabled</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables a &apos;sky dome&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2196" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2196" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a418e075ad2d68dec59105f743fccdae8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isSkyDomeEnabled</definition>
        <argsstring>(void) const </argsstring>
        <name>isSkyDomeEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a skydome is enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2199" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2199" bodyend="2199"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab48d1e49e2b176863c72af383b86120e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
        <definition>virtual SceneNode* Ogre::SceneManager::getSkyDomeNode</definition>
        <argsstring>(void) const </argsstring>
        <name>getSkyDomeNode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sky dome node, if enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2202" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2202" bodyend="2202"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6af078e9234b8d90812ca46a7dd7151b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="structOgre_1_1SceneManager_1_1SkyDomeGenParameters" kindref="compound">SkyDomeGenParameters</ref> &amp;</type>
        <definition>virtual const SkyDomeGenParameters&amp; Ogre::SceneManager::getSkyDomeGenParameters</definition>
        <argsstring>(void) const </argsstring>
        <name>getSkyDomeGenParameters</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters used to generate the current SkyDome, if any </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2205" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2205" bodyend="2205"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab804195c05873da617dcd16198a63d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::setFog</definition>
        <argsstring>(FogMode mode=FOG_NONE, const ColourValue &amp;colour=ColourValue::White, Real expDensity=0.001, Real linearStart=0.0, Real linearEnd=1.0)</argsstring>
        <name>setFog</name>
        <param>
          <type><ref refid="group__General_1ga83edeb2e5d33a3ca8f15834ba40020ba" kindref="member">FogMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="group__General_1gga83edeb2e5d33a3ca8f15834ba40020baab7793a21880052c0214d4cc040992310" kindref="member">FOG_NONE</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
          <declname>colour</declname>
          <defval><ref refid="classOgre_1_1ColourValue_1a8eba66b2908f44f00f8d9c9ec25877de" kindref="member">ColourValue::White</ref></defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>expDensity</declname>
          <defval>0.001</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>linearStart</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>linearEnd</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the fogging mode applied to the scene. <simplesect kind="remark"><para>This method sets up the scene-wide fogging effect. These settings apply to all geometry rendered, UNLESS the material with which it is rendered has it&apos;s own fog settings (see <ref refid="classOgre_1_1Material_1a32937d27d1a0211a76d9ce8035a221ee" kindref="member">Material::setFog</ref>). </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Set up the mode of fog as described in the FogMode enum, or set to FOG_NONE to turn off. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour of the fog. Either set this to the same as your viewport background colour, or to blend in with a skydome or skybox. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>The density of the fog in FOG_EXP or FOG_EXP2 mode, as a value between 0 and 1. The default is 0.001. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linearStart</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in world units at which linear fog starts to encroach. Only applicable if mode is FOG_LINEAR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linearEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in world units at which linear fog becomes completely opaque. Only applicable if mode is FOG_LINEAR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2233"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a361b6c81efb56c75fd70b5c6e357c3b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__General_1ga83edeb2e5d33a3ca8f15834ba40020ba" kindref="member">FogMode</ref></type>
        <definition>virtual FogMode Ogre::SceneManager::getFogMode</definition>
        <argsstring>(void) const </argsstring>
        <name>getFogMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the fog mode for the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2237"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a306704e4889173ad708e1d0f5d7e3930" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
        <definition>virtual const ColourValue&amp; Ogre::SceneManager::getFogColour</definition>
        <argsstring>(void) const </argsstring>
        <name>getFogColour</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the fog colour for the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2241"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab1a6c6d9e62244cf7b179920241d1f60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getFogStart</definition>
        <argsstring>(void) const </argsstring>
        <name>getFogStart</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the fog start distance for the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2245"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a685fdcd7904870ecff70e6cf7e962ca4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getFogEnd</definition>
        <argsstring>(void) const </argsstring>
        <name>getFogEnd</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the fog end distance for the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2249"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a251033c27ac5d12c4f9bb2eee43b4d6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getFogDensity</definition>
        <argsstring>(void) const </argsstring>
        <name>getFogDensity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the fog density for the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2253"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae4d6f699a273cf16a8ce09757ebf8baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> *</type>
        <definition>virtual BillboardSet* Ogre::SceneManager::createBillboardSet</definition>
        <argsstring>(const String &amp;name, unsigned int poolSize=20)</argsstring>
        <name>createBillboardSet</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>poolSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> for use with this scene manager. <simplesect kind="remark"><para>This method creates a new <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> which is registered with the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. The <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> will destroy this object when it shuts down or when the <ref refid="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" kindref="member">SceneManager::clearScene</ref> method is called, so the caller does not have to worry about destroying this object (in fact, it definitely should not do this). </para></simplesect>
<simplesect kind="par"><title></title><para>See the <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> documentations for full details of the returned class. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give to this billboard set. Must be unique. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poolSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial size of the pool of billboards (see <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> for more information) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2273"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a16d4d4d154cab4d3a85b3b67f9061fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> *</type>
        <definition>virtual BillboardSet* Ogre::SceneManager::createBillboardSet</definition>
        <argsstring>(unsigned int poolSize=20)</argsstring>
        <name>createBillboardSet</name>
        <param>
          <type>unsigned int</type>
          <declname>poolSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> for use with this scene manager, with a generated name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial size of the pool of billboards (see <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> for more information) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2281"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af244f7e07456f6ababa2fa97399627fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> *</type>
        <definition>virtual BillboardSet* Ogre::SceneManager::getBillboardSet</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getBillboardSet</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the named <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2285"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8227de25c67053821c2bfbdf9b27504b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasBillboardSet</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasBillboardSet</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a billboardset with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2288"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a86252d84802cb54bba22bd8ed87d84f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyBillboardSet</definition>
        <argsstring>(BillboardSet *set)</argsstring>
        <name>destroyBillboardSet</name>
        <param>
          <type><ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys an <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. <simplesect kind="warning"><para>Must only be done if the <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> is not attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. It may be safer to wait to clear the whole scene. If you are unsure, use clearScene. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2296"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a56ecce16952d08b045e500d28981d307" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyBillboardSet</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyBillboardSet</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys an <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> from the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> by name. <simplesect kind="warning"><para>Must only be done if the <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> is not attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref>. It may be safer to wait to clear the whole scene. If you are unsure, use clearScene. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2304"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a62742f3922523e75b72f6e8303fea251" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllBillboardSets</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllBillboardSets</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes &amp; destroys all BillboardSets. <simplesect kind="warning"><para>Again, use caution since no <ref refid="classOgre_1_1BillboardSet" kindref="compound">BillboardSet</ref> must be referred to elsewhere e.g. attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> otherwise a crash is likely. Use clearScene if you are unsure (it clears <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> entries too.) </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" kindref="member">SceneManager::clearScene</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2315"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a46c5cbc33b0f498ed01670289e87584c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setDisplaySceneNodes</definition>
        <argsstring>(bool display)</argsstring>
        <name>setDisplaySceneNodes</name>
        <param>
          <type>bool</type>
          <declname>display</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> whether it should render the SceneNodes which make up the scene as well as the objects in the scene. <simplesect kind="remark"><para>This method is mainly for debugging purposes. If you set this to &apos;true&apos;, each node will be rendered as a set of 3 axes to allow you to easily see the orientation of the nodes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2324"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aabe2da637fd725bf8326c662a019f4d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getDisplaySceneNodes</definition>
        <argsstring>(void) const </argsstring>
        <name>getDisplaySceneNodes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if all scene nodes axis are to be displayed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2326" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2326" bodyend="2326"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8ffb7989a0db906222663ff2d34317ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> *</type>
        <definition>virtual Animation* Ogre::SceneManager::createAnimation</definition>
        <argsstring>(const String &amp;name, Real length)</argsstring>
        <name>createAnimation</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an animation which can be used to animate scene nodes. <simplesect kind="remark"><para>An animation is a collection of &apos;tracks&apos; which over time change the position / orientation of <ref refid="classOgre_1_1Node" kindref="compound">Node</ref> objects. In this case, the animation will likely have tracks to modify the position / orientation of <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> objects, e.g. to make objects move along a path. </para></simplesect>
<simplesect kind="par"><title></title><para>You don&apos;t need to use an <ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> object to move objects around - you can do it yourself using the methods of the <ref refid="classOgre_1_1Node" kindref="compound">Node</ref> in your <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> class. However, when you need relatively complex scripted animation, this is the class to use since it will interpolate between keyframes for you and generally make the whole process easier to manage. </para></simplesect>
<simplesect kind="par"><title></title><para>A single animation can affect multiple <ref refid="classOgre_1_1Node" kindref="compound">Node</ref> objects (each <ref refid="classOgre_1_1AnimationTrack" kindref="compound">AnimationTrack</ref> affects a single <ref refid="classOgre_1_1Node" kindref="compound">Node</ref>). In addition, through animation blending a single <ref refid="classOgre_1_1Node" kindref="compound">Node</ref> can be affected by multiple animations, athough this is more useful when performing skeletal animation (see <ref refid="classOgre_1_1Skeleton_1aaffbdd130cfc11e8b61fb1ed76486a78" kindref="member">Skeleton::createAnimation</ref>). </para></simplesect>
<simplesect kind="par"><title></title><para>Note that whilst it uses the same classes, the animations created here are kept separate from the skeletal animations of meshes (each <ref refid="classOgre_1_1Skeleton" kindref="compound">Skeleton</ref> owns those animations). </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the animation, must be unique within this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The total length of the animation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2348"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7ba18a3e34e9ee8c286b6b4dfff42011" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> *</type>
        <definition>virtual Animation* Ogre::SceneManager::getAnimation</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getAnimation</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks up an <ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> object previously created with createAnimation. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2353"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa88f44e5200e790105cb18814bdee7e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasAnimation</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasAnimation</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether an animation with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2356"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7ac4e76d36c8f059d7389bf1233563b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAnimation</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyAnimation</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys an <ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref>. <simplesect kind="remark"><para>You should ensure that none of your code is referencing this animation objects since the memory will be freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2363"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a019a31618f2285f79be2b414488c04c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllAnimations</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllAnimations</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all animations created using this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2366"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3e060f962b38c9e9f43f8618ff652ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref> *</type>
        <definition>virtual AnimationState* Ogre::SceneManager::createAnimationState</definition>
        <argsstring>(const String &amp;animName)</argsstring>
        <name>createAnimationState</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>animName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an <ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref> object for managing application of animations. <simplesect kind="remark"><para>You can create <ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> objects for animating <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> obejcts using the createAnimation method. However, in order to actually apply those animations you have to call methods on <ref refid="classOgre_1_1Node" kindref="compound">Node</ref> and <ref refid="classOgre_1_1Animation" kindref="compound">Animation</ref> in a particular order (namely <ref refid="classOgre_1_1Node_1a10b19feffaf2d215682ba1aca8d07038" kindref="member">Node::resetToInitialState</ref> and <ref refid="classOgre_1_1Animation_1aa79ff8a4ddeb63225e6d68f6a16e9a24" kindref="member">Animation::apply</ref>). To make this easier and to help track the current time position of animations, the <ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref> object is provided.  So if you don&apos;t want to control animation application manually, call this method, update the returned object as you like every frame and let <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> apply the animation state for you. </para></simplesect>
<simplesect kind="par"><title></title><para>Remember, <ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref> objects are disabled by default at creation time. Turn them on when you want them using their setEnabled method. </para></simplesect>
<simplesect kind="par"><title></title><para>Note that any <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> affected by this automatic animation will have it&apos;s state reset to it&apos;s initial position before application of the animation. Unless specifically modified using <ref refid="classOgre_1_1Node_1a8119af87243123929da530b01dd54fd4" kindref="member">Node::setInitialState</ref> the <ref refid="classOgre_1_1Node" kindref="compound">Node</ref> assumes it&apos;s initial state is at the origin. If you want the base state of the <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> to be elsewhere, make your changes to the node using the standard transform methods, then call setInitialState to &apos;bake&apos; this reference position into the node. </para></simplesect>
<simplesect kind="par"><title></title><para>If the target of your animation is to be a generic <ref refid="classOgre_1_1AnimableValue" kindref="compound">AnimableValue</ref>, you should ensure that it has a base value set (unlike nodes this has no default). </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1AnimableValue_1aacef098935627873fd41f7b3bd37d3cf" kindref="member">AnimableValue::setAsBaseValue</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>animName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of an animation created already with createAnimation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2395"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae4d6cc4ff860b1e8f73ec9d3a9a960a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref> *</type>
        <definition>virtual AnimationState* Ogre::SceneManager::getAnimationState</definition>
        <argsstring>(const String &amp;animName) const </argsstring>
        <name>getAnimationState</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>animName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves animation state as previously created using createAnimationState. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2400"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a08510a6f311d26de3a385b809bb51c32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasAnimationState</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasAnimationState</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether an animation state with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2403"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a22a3f58bff113aaac870c18741f7cd76" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAnimationState</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyAnimationState</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys an <ref refid="classOgre_1_1AnimationState" kindref="compound">AnimationState</ref>. <simplesect kind="remark"><para>You should ensure that none of your code is referencing this animation state object since the memory will be freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2410"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa60a84672be1f532323cdb5dbfdc2c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllAnimationStates</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllAnimationStates</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all animation states created using this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2413"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a16f971d1a34ce55b83c16634a56e2b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::manualRender</definition>
        <argsstring>(RenderOperation *rend, Pass *pass, Viewport *vp, const Matrix4 &amp;worldMatrix, const Matrix4 &amp;viewMatrix, const Matrix4 &amp;projMatrix, bool doBeginEndFrame=false)</argsstring>
        <name>manualRender</name>
        <param>
          <type><ref refid="classOgre_1_1RenderOperation" kindref="compound">RenderOperation</ref> *</type>
          <declname>rend</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>vp</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>worldMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>viewMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>projMatrix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doBeginEndFrame</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manual rendering method, for advanced users only. <simplesect kind="remark"><para>This method allows you to send rendering commands through the pipeline on demand, bypassing OGRE&apos;s normal world processing. You should only use this if you really know what you&apos;re doing; OGRE does lots of things for you that you really should let it do. However, there are times where it may be useful to have this manual interface, for example overlaying something on top of the scene rendered by OGRE. </para></simplesect>
<simplesect kind="par"><title></title><para>Because this is an instant rendering method, timing is important. The best time to call it is from a <ref refid="classOgre_1_1RenderTargetListener" kindref="compound">RenderTargetListener</ref> event handler. </para></simplesect>
<simplesect kind="par"><title></title><para>Don&apos;t call this method a lot, it&apos;s designed for rare (1 or 2 times per frame) use. Calling it regularly per frame will cause frame rate drops! </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rend</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classOgre_1_1RenderOperation" kindref="compound">RenderOperation</ref> object describing the rendering op </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> to use for this render </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the viewport to render to, or 0 to use the current viewport </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worldMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform to apply from object to world space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform to apply from world to view space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform to apply from view to screen space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doBeginEndFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, beginFrame() and endFrame() are called, otherwise not. You should leave this as false if you are calling this within the main render loop. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2440"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8fd832d321c22ab2282c91a16a4528c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::manualRender</definition>
        <argsstring>(Renderable *rend, const Pass *pass, Viewport *vp, const Matrix4 &amp;viewMatrix, const Matrix4 &amp;projMatrix, bool doBeginEndFrame=false, bool lightScissoringClipping=true, bool doLightIteration=true, const LightList *manualLightList=0)</argsstring>
        <name>manualRender</name>
        <param>
          <type><ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> *</type>
          <declname>rend</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
          <declname>vp</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>viewMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classOgre_1_1Matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>projMatrix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doBeginEndFrame</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>lightScissoringClipping</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>doLightIteration</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>manualLightList</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manual rendering method for rendering a single object. <simplesect kind="remark"><para></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rend</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderable to issue to the pipeline </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>The pass to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the viewport to render to, or 0 to use the existing viewport </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doBeginEndFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, beginFrame() and endFrame() are called, otherwise not. You should leave this as false if you are calling this within the main render loop. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform to apply from world to view space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The transform to apply from view to screen space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightScissoringClipping</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, passes that have the getLightScissorEnabled and/or getLightClipPlanesEnabled flags will cause calculation and setting of scissor rectangle and user clip planes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLightIteration</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this method will issue the renderable to the pipeline possibly multiple times, if the pass indicates it should be done once per light </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>manualLightList</parametername>
</parameternamelist>
<parameterdescription>
<para>Only applicable if doLightIteration is false, this method allows you to pass in a previously determined set of lights which will be used for a single render of this object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2464"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8accbffd3a95901ac09bc32784b2e27d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1RenderQueue" kindref="compound">RenderQueue</ref> *</type>
        <definition>virtual RenderQueue* Ogre::SceneManager::getRenderQueue</definition>
        <argsstring>(void)</argsstring>
        <name>getRenderQueue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the internal render queue, for advanced users only. <simplesect kind="remark"><para>The render queue is mainly used internally to manage the scene object rendering queue, it also exports some methods to allow advanced users to configure the behavior of rendering process. Most methods provided by <ref refid="classOgre_1_1RenderQueue" kindref="compound">RenderQueue</ref> are supposed to be used internally only, you should reference to the <ref refid="classOgre_1_1RenderQueue" kindref="compound">RenderQueue</ref> API for more information. Do not access this directly unless you know what you are doing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2476"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae60242c5d130f884cd605d3393186df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::addRenderQueueListener</definition>
        <argsstring>(RenderQueueListener *newListener)</argsstring>
        <name>addRenderQueueListener</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueListener" kindref="compound">RenderQueueListener</ref> *</type>
          <declname>newListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a new <ref refid="classOgre_1_1RenderQueueListener" kindref="compound">RenderQueueListener</ref> which will be notified when render queues are processed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2481"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a190471ba7a61111d576a1e8ca9862706" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::removeRenderQueueListener</definition>
        <argsstring>(RenderQueueListener *delListener)</argsstring>
        <name>removeRenderQueueListener</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueListener" kindref="compound">RenderQueueListener</ref> *</type>
          <declname>delListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a listener previously added with addRenderQueueListener. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2484"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab73819442f7f3540f52431064e6b1a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::addRenderObjectListener</definition>
        <argsstring>(RenderObjectListener *newListener)</argsstring>
        <name>addRenderObjectListener</name>
        <param>
          <type><ref refid="classOgre_1_1RenderObjectListener" kindref="compound">RenderObjectListener</ref> *</type>
          <declname>newListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a new Render Object <ref refid="classOgre_1_1SceneManager_1_1Listener" kindref="compound">Listener</ref> which will be notified when rendering an object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2488"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2a482e0a9f78109a5a467ddd6c16082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::removeRenderObjectListener</definition>
        <argsstring>(RenderObjectListener *delListener)</argsstring>
        <name>removeRenderObjectListener</name>
        <param>
          <type><ref refid="classOgre_1_1RenderObjectListener" kindref="compound">RenderObjectListener</ref> *</type>
          <declname>delListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a listener previously added with addRenderObjectListener. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2490"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a80869e48b56b0c02a52e9027cad26fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::addSpecialCaseRenderQueue</definition>
        <argsstring>(uint8 qid)</argsstring>
        <name>addSpecialCaseRenderQueue</name>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>qid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds an item to the &apos;special case&apos; render queue list. <simplesect kind="remark"><para>Normally all render queues are rendered, in their usual sequence, only varying if a <ref refid="classOgre_1_1RenderQueueListener" kindref="compound">RenderQueueListener</ref> nominates for the queue to be repeated or skipped. This method allows you to add a render queue to a &apos;special case&apos; list, which varies the behaviour. The effect of this list depends on the &apos;mode&apos; in which this list is in, which might be to exclude these render queues, or to include them alone (excluding all other queues). This allows you to perform broad selective rendering without requiring a <ref refid="classOgre_1_1RenderQueueListener" kindref="compound">RenderQueueListener</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the queue which should be added to the special case list. Nothing happens if the queue is already in the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2505"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5683d75af7c73bfdd9db2b9185b99a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::removeSpecialCaseRenderQueue</definition>
        <argsstring>(uint8 qid)</argsstring>
        <name>removeSpecialCaseRenderQueue</name>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>qid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes an item to the &apos;special case&apos; render queue list. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a80869e48b56b0c02a52e9027cad26fa7" kindref="member">SceneManager::addSpecialCaseRenderQueue</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the queue which should be removed from the special case list. Nothing happens if the queue is not in the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2511"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1acfc2cc0a7f105a068603955c4dbbe3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::clearSpecialCaseRenderQueues</definition>
        <argsstring>(void)</argsstring>
        <name>clearSpecialCaseRenderQueues</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the &apos;special case&apos; render queue list. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a80869e48b56b0c02a52e9027cad26fa7" kindref="member">SceneManager::addSpecialCaseRenderQueue</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2515"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a10753c0e57be813e135395e3a882777a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setSpecialCaseRenderQueueMode</definition>
        <argsstring>(SpecialCaseRenderQueueMode mode)</argsstring>
        <name>setSpecialCaseRenderQueueMode</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6" kindref="member">SpecialCaseRenderQueueMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the way the special case render queue list is processed. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a80869e48b56b0c02a52e9027cad26fa7" kindref="member">SceneManager::addSpecialCaseRenderQueue</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode of processing </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2520"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aed183c1907c928f384cd087b40a3f685" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6" kindref="member">SpecialCaseRenderQueueMode</ref></type>
        <definition>virtual SpecialCaseRenderQueueMode Ogre::SceneManager::getSpecialCaseRenderQueueMode</definition>
        <argsstring>(void)</argsstring>
        <name>getSpecialCaseRenderQueueMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the way the special case render queue list is processed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2522"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abdf79b63bce9f65571359c96a585eb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isRenderQueueToBeProcessed</definition>
        <argsstring>(uint8 qid)</argsstring>
        <name>isRenderQueueToBeProcessed</name>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>qid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the named queue will be rendered based on the current &apos;special case&apos; render queue list and mode. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a80869e48b56b0c02a52e9027cad26fa7" kindref="member">SceneManager::addSpecialCaseRenderQueue</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the queue which should be tested </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the queue will be rendered, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2529"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3c0437a615af536aaf69ba267f2f15d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setWorldGeometryRenderQueue</definition>
        <argsstring>(uint8 qid)</argsstring>
        <name>setWorldGeometryRenderQueue</name>
        <param>
          <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
          <declname>qid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the render queue that the world geometry (if any) this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> renders will be associated with. <simplesect kind="remark"><para>SceneManagers which provide &apos;world geometry&apos; should place it in a specialised render queue in order to make it possible to enable / disable it easily using the addSpecialCaseRenderQueue method. Even if the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> does not use the render queues to render the world geometry, it should still pick a queue to represent it&apos;s manual rendering, and check isRenderQueueToBeProcessed before rendering. </para></simplesect>
<simplesect kind="note"><para>Setting this may not affect the actual ordering of rendering the world geometry, if the world geometry is being rendered manually by the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. If the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> feeds world geometry into the queues, however, the ordering will be affected. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2546"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af036aed42b3e7480915704f29865c788" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceOgre_1a119732ea9d1e88bbddc47b4ac0fa21cb" kindref="member">uint8</ref></type>
        <definition>virtual uint8 Ogre::SceneManager::getWorldGeometryRenderQueue</definition>
        <argsstring>(void)</argsstring>
        <name>getWorldGeometryRenderQueue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the render queue that the world geometry (if any) this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> renders will be associated with. <simplesect kind="remark"><para>SceneManagers which provide &apos;world geometry&apos; should place it in a specialised render queue in order to make it possible to enable / disable it easily using the addSpecialCaseRenderQueue method. Even if the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> does not use the render queues to render the world geometry, it should still pick a queue to represent it&apos;s manual rendering, and check isRenderQueueToBeProcessed before rendering. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2557"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a487859007d68fe9f261aea1645252563" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::showBoundingBoxes</definition>
        <argsstring>(bool bShow)</argsstring>
        <name>showBoundingBoxes</name>
        <param>
          <type>bool</type>
          <declname>bShow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows all bounding boxes of scene nodes to be displayed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2560"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa22b0b7e88539bb34a5c9c309c87bd34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getShowBoundingBoxes</definition>
        <argsstring>() const </argsstring>
        <name>getShowBoundingBoxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns if all bounding boxes of scene nodes are to be displayed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2563"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aae9af47cfe8ae3184744e9d19d73341f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_notifyAutotrackingSceneNode</definition>
        <argsstring>(SceneNode *node, bool autoTrack)</argsstring>
        <name>_notifyAutotrackingSceneNode</name>
        <param>
          <type><ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autoTrack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for notifying the manager that a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> is autotracking. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2566"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aacbb49cc9b31adb40d3bbddc8f51d89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1AxisAlignedBoxSceneQuery" kindref="compound">AxisAlignedBoxSceneQuery</ref> *</type>
        <definition>virtual AxisAlignedBoxSceneQuery* Ogre::SceneManager::createAABBQuery</definition>
        <argsstring>(const AxisAlignedBox &amp;box, unsigned long mask=0xFFFFFFFF)</argsstring>
        <name>createAABBQuery</name>
        <param>
          <type>const <ref refid="classOgre_1_1AxisAlignedBox" kindref="compound">AxisAlignedBox</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>mask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="classOgre_1_1AxisAlignedBoxSceneQuery" kindref="compound">AxisAlignedBoxSceneQuery</ref> for this scene manager. <simplesect kind="remark"><para>This method creates a new instance of a query object for this scene manager, for an axis aligned box region. See <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> and <ref refid="classOgre_1_1AxisAlignedBoxSceneQuery" kindref="compound">AxisAlignedBoxSceneQuery</ref> for full details. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method must be destroyed by calling <ref refid="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" kindref="member">SceneManager::destroyQuery</ref> when it is no longer required. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>box</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the box which describes the region for this query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The query mask to apply to this query; can be used to filter out certain objects; see <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2582"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a40730811207d2a7ef8f8fc0c3fda8b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SphereSceneQuery" kindref="compound">SphereSceneQuery</ref> *</type>
        <definition>virtual SphereSceneQuery* Ogre::SceneManager::createSphereQuery</definition>
        <argsstring>(const Sphere &amp;sphere, unsigned long mask=0xFFFFFFFF)</argsstring>
        <name>createSphereQuery</name>
        <param>
          <type>const <ref refid="classOgre_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>mask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classOgre_1_1SphereSceneQuery" kindref="compound">SphereSceneQuery</ref> for this scene manager. <simplesect kind="remark"><para>This method creates a new instance of a query object for this scene manager, for a spherical region. See <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> and <ref refid="classOgre_1_1SphereSceneQuery" kindref="compound">SphereSceneQuery</ref> for full details. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method must be destroyed by calling <ref refid="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" kindref="member">SceneManager::destroyQuery</ref> when it is no longer required. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphere</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the sphere which describes the region for this query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The query mask to apply to this query; can be used to filter out certain objects; see <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2596"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1acc61e987518b30805120ac4009b5dd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1PlaneBoundedVolumeListSceneQuery" kindref="compound">PlaneBoundedVolumeListSceneQuery</ref> *</type>
        <definition>virtual PlaneBoundedVolumeListSceneQuery* Ogre::SceneManager::createPlaneBoundedVolumeQuery</definition>
        <argsstring>(const PlaneBoundedVolumeList &amp;volumes, unsigned long mask=0xFFFFFFFF)</argsstring>
        <name>createPlaneBoundedVolumeQuery</name>
        <param>
          <type>const <ref refid="group__Math_1ga6253a1300d656ba28342fe58260d0e71" kindref="member">PlaneBoundedVolumeList</ref> &amp;</type>
          <declname>volumes</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>mask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classOgre_1_1PlaneBoundedVolumeListSceneQuery" kindref="compound">PlaneBoundedVolumeListSceneQuery</ref> for this scene manager. <simplesect kind="remark"><para>This method creates a new instance of a query object for this scene manager, for a region enclosed by a set of planes (normals pointing inwards). See <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> and <ref refid="classOgre_1_1PlaneBoundedVolumeListSceneQuery" kindref="compound">PlaneBoundedVolumeListSceneQuery</ref> for full details. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method must be destroyed by calling <ref refid="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" kindref="member">SceneManager::destroyQuery</ref> when it is no longer required. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>volumes</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the volumes which describe the region for this query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The query mask to apply to this query; can be used to filter out certain objects; see <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2610"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a95a6c54fd3bf3e9a3c4d16cc7dc67d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1RaySceneQuery" kindref="compound">RaySceneQuery</ref> *</type>
        <definition>virtual RaySceneQuery* Ogre::SceneManager::createRayQuery</definition>
        <argsstring>(const Ray &amp;ray, unsigned long mask=0xFFFFFFFF)</argsstring>
        <name>createRayQuery</name>
        <param>
          <type>const <ref refid="classOgre_1_1Ray" kindref="compound">Ray</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>mask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classOgre_1_1RaySceneQuery" kindref="compound">RaySceneQuery</ref> for this scene manager. <simplesect kind="remark"><para>This method creates a new instance of a query object for this scene manager, looking for objects which fall along a ray. See <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> and <ref refid="classOgre_1_1RaySceneQuery" kindref="compound">RaySceneQuery</ref> for full details. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method must be destroyed by calling <ref refid="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" kindref="member">SceneManager::destroyQuery</ref> when it is no longer required. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the ray which describes the region for this query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The query mask to apply to this query; can be used to filter out certain objects; see <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2626"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a82b0c69188695880a693df4e6392ebba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1IntersectionSceneQuery" kindref="compound">IntersectionSceneQuery</ref> *</type>
        <definition>virtual IntersectionSceneQuery* Ogre::SceneManager::createIntersectionQuery</definition>
        <argsstring>(unsigned long mask=0xFFFFFFFF)</argsstring>
        <name>createIntersectionQuery</name>
        <param>
          <type>unsigned long</type>
          <declname>mask</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="classOgre_1_1IntersectionSceneQuery" kindref="compound">IntersectionSceneQuery</ref> for this scene manager. <simplesect kind="remark"><para>This method creates a new instance of a query object for locating intersecting objects. See <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> and <ref refid="classOgre_1_1IntersectionSceneQuery" kindref="compound">IntersectionSceneQuery</ref> for full details. </para></simplesect>
<simplesect kind="par"><title></title><para>The instance returned from this method must be destroyed by calling <ref refid="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" kindref="member">SceneManager::destroyQuery</ref> when it is no longer required. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The query mask to apply to this query; can be used to filter out certain objects; see <ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> for details. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2640"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyQuery</definition>
        <argsstring>(SceneQuery *query)</argsstring>
        <name>destroyQuery</name>
        <param>
          <type><ref refid="classOgre_1_1SceneQuery" kindref="compound">SceneQuery</ref> *</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a scene query of any type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2643"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a02d7d29cc4bc8ee4cbe40d16a984291c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager_1a22fcb8a9ddb7efe79d053a975a685111" kindref="member">CameraIterator</ref></type>
        <definition>CameraIterator Ogre::SceneManager::getCameraIterator</definition>
        <argsstring>(void)</argsstring>
        <name>getCameraIterator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a specialised <ref refid="classOgre_1_1MapIterator" kindref="compound">MapIterator</ref> over all cameras in the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2650" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2650" bodyend="2652"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5057cd79d387a9c044e50e5f50702843" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classOgre_1_1SceneManager_1aab859720031b39ec11a526ddfabcb8dd" kindref="member">CameraList</ref> &amp;</type>
        <definition>const CameraList&amp; Ogre::SceneManager::getCameras</definition>
        <argsstring>() const </argsstring>
        <name>getCameras</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const version of the camera list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2655" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2655" bodyend="2655"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ab28450738168fe330709ad0d090df6b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager_1a3a720414f68274bb9c5026911e27135d" kindref="member">AnimationIterator</ref></type>
        <definition>AnimationIterator Ogre::SceneManager::getAnimationIterator</definition>
        <argsstring>(void)</argsstring>
        <name>getAnimationIterator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a specialised <ref refid="classOgre_1_1MapIterator" kindref="compound">MapIterator</ref> over all animations in the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2657" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2657" bodyend="2659"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af3612471fc74a2fff529225938145ac6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classOgre_1_1SceneManager_1ad7cf782d8eb1d5b902348c722c9f4bec" kindref="member">AnimationList</ref> &amp;</type>
        <definition>const AnimationList&amp; Ogre::SceneManager::getAnimations</definition>
        <argsstring>() const </argsstring>
        <name>getAnimations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const version of the animation list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2662" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2662" bodyend="2662"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a39bf64e686d94b6856d3ff06d627b61c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__Animation_1gac427736c80940f4469fe0f4ac1694f67" kindref="member">AnimationStateIterator</ref></type>
        <definition>AnimationStateIterator Ogre::SceneManager::getAnimationStateIterator</definition>
        <argsstring>(void)</argsstring>
        <name>getAnimationStateIterator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a specialised <ref refid="classOgre_1_1MapIterator" kindref="compound">MapIterator</ref> over all animation states in the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2664" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2664" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0f8f32d176059a385527cf9970ddc892" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTechnique</definition>
        <argsstring>(ShadowTechnique technique)</argsstring>
        <name>setShadowTechnique</name>
        <param>
          <type><ref refid="group__General_1ga79dcd426d291c31072c1ad6f183715d6" kindref="member">ShadowTechnique</ref></type>
          <declname>technique</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the general shadow technique to be used in this scene. <simplesect kind="remark"><para>There are multiple ways to generate shadows in a scene, and each has strengths and weaknesses. <itemizedlist>
<listitem>
<para>Stencil-based approaches can be used to draw very long, extreme shadows without loss of precision and the &apos;additive&apos; version can correctly show the shadowing of complex effects like bump mapping because they physically exclude the light from those areas. However, the edges are very sharp and stencils cannot handle transparency, and they involve a fair amount of CPU work in order to calculate the shadow volumes, especially when animated objects are involved. </para></listitem>
<listitem>
<para>Texture-based approaches are good for handling transparency (they can, for example, correctly shadow a mesh which uses alpha to represent holes), and they require little CPU overhead, and can happily shadow geometry which is deformed by a vertex program, unlike stencil shadows. However, they have a fixed precision which can introduce &apos;jaggies&apos; at long range and have fillrate issues of their own. </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="par"><title></title><para>We support 2 kinds of stencil shadows, and 2 kinds of texture-based shadows, and one simple decal approach. The 2 stencil approaches differ in the amount of multipass work that is required - the modulative approach simply &apos;darkens&apos; areas in shadow after the main render, which is the least expensive, whilst the additive approach has to perform a render per light and adds the cumulative effect, which is more expensive but more accurate. The texture based shadows both work in roughly the same way, the only difference is that the shadowmap approach is slightly more accurate, but requires a more recent graphics card. </para></simplesect>
<simplesect kind="par"><title></title><para>Note that because mixing many shadow techniques can cause problems, only one technique is supported at once. Also, you should call this method at the start of the scene setup. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>technique</parametername>
</parameternamelist>
<parameterdescription>
<para>The shadowing technique to use for the scene. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2700"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2b2a69e400687b335c414a6053de2b34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="group__General_1ga79dcd426d291c31072c1ad6f183715d6" kindref="member">ShadowTechnique</ref></type>
        <definition>virtual ShadowTechnique Ogre::SceneManager::getShadowTechnique</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowTechnique</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current shadow technique. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2703" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2703" bodyend="2703"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae2b74088a5229f3bbb09da8589968d9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShowDebugShadows</definition>
        <argsstring>(bool debug)</argsstring>
        <name>setShowDebugShadows</name>
        <param>
          <type>bool</type>
          <declname>debug</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables / disables the rendering of debug information for shadows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2706" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2706" bodyend="2706"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad6d310a8836f8c08b4f4f189f855d510" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getShowDebugShadows</definition>
        <argsstring>(void) const </argsstring>
        <name>getShowDebugShadows</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are debug shadows shown? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2708" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2708" bodyend="2708"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad8ab6139696f9ef50d8abea0528e85b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowColour</definition>
        <argsstring>(const ColourValue &amp;colour)</argsstring>
        <name>setShadowColour</name>
        <param>
          <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the colour used to modulate areas in shadow. <simplesect kind="remark"><para>This is only applicable for shadow techniques which involve darkening the area in shadow, as opposed to masking out the light. This colour provided is used as a modulative value to darken the areas. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2716"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac3b3146c419a2d272b14c5dc50b024c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
        <definition>virtual const ColourValue&amp; Ogre::SceneManager::getShadowColour</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowColour</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the colour used to modulate areas in shadow. <simplesect kind="remark"><para>This is only applicable for shadow techniques which involve darkening the area in shadow, as opposed to masking out the light. This colour provided is used as a modulative value to darken the areas. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2723"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9d220fa31bf0d95ad65558936c71a194" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowDirectionalLightExtrusionDistance</definition>
        <argsstring>(Real dist)</argsstring>
        <name>setShadowDirectionalLightExtrusionDistance</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the distance a shadow volume is extruded for a directional light. <simplesect kind="remark"><para>Although directional lights are essentially infinite, there are many reasons to limit the shadow extrusion distance to a finite number, not least of which is compatibility with older cards (which do not support infinite positions), and shadow caster elimination. </para></simplesect>
<simplesect kind="par"><title></title><para>The default value is 10,000 world units. This does not apply to point lights or spotlights, since they extrude up to their attenuation range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2735"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a73a0ca638976062f80ebd967a638be22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getShadowDirectionalLightExtrusionDistance</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowDirectionalLightExtrusionDistance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the distance a shadow volume is extruded for a directional light. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2738"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0e593d05e2f892b8fc3bfca917a75fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowFarDistance</definition>
        <argsstring>(Real distance)</argsstring>
        <name>setShadowFarDistance</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the default maximum distance away from the camera that shadows will be visible. You have to call this function before you create lights or the default distance of zero will be used. <simplesect kind="remark"><para>Shadow techniques can be expensive, therefore it is a good idea to limit them to being rendered close to the camera if possible, and to skip the expense of rendering shadows for distance objects. This method allows you to set the distance at which shadows will no longer be rendered. </para></simplesect>
<simplesect kind="note"><para>Each shadow technique can interpret this subtely differently. For example, one technique may use this to eliminate casters, another might use it to attenuate the shadows themselves. You should tweak this value to suit your chosen shadow technique and scene setup. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2755"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8f9420b7a640d29475bc09a83f4e2458" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getShadowFarDistance</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowFarDistance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the default maximum distance away from the camera that shadows will be visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2760" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2759" bodyend="2760"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2d50ad888092c98a14139ce03a904388" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getShadowFarDistanceSquared</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowFarDistanceSquared</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2762" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2761" bodyend="2762"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3364ae687de3cbf3bd5e87ffd52877e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowIndexBufferSize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>setShadowIndexBufferSize</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the maximum size of the index buffer used to render shadow primitives. <simplesect kind="remark"><para>This method allows you to tweak the size of the index buffer used to render shadow primitives (including stencil shadow volumes). The default size is 51,200 entries, which is 100k of GPU memory, or enough to render approximately 17,000 triangles. You can reduce this as long as you do not have any models / world geometry chunks which could require more than the amount you set. </para></simplesect>
<simplesect kind="par"><title></title><para>The maximum number of triangles required to render a single shadow volume (including light and dark caps when needed) will be 3x the number of edges on the light silhouette, plus the number of light-facing triangles. On average, half the triangles will be facing toward the light, but the number of triangles in the silhouette entirely depends on the mesh - angular meshes will have a higher silhouette tris/mesh tris ratio than a smooth mesh. You can estimate the requirements for your particular mesh by rendering it alone in a scene with shadows enabled and a single light - rotate it or the light and make a note of how high the triangle count goes (remembering to subtract the mesh triangle count) </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of indexes; divide this by 3 to determine the number of triangles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2789"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ace6c0cf42787f6c51e4df2e13d3482a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Ogre::SceneManager::getShadowIndexBufferSize</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowIndexBufferSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the size of the shadow index buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2792" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2791" bodyend="2792"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac594a29110119bed71f1c0c61265394b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureSize</definition>
        <argsstring>(unsigned short size)</argsstring>
        <name>setShadowTextureSize</name>
        <param>
          <type>unsigned short</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the size of the texture used for all texture-based shadows. <simplesect kind="remark"><para>The larger the shadow texture, the better the detail on texture based shadows, but obviously this takes more memory. The default size is 512. Sizes must be a power of 2. </para></simplesect>
<simplesect kind="note"><para>This is the simple form, see setShadowTextureConfig for the more complex form. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2801"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a78416eefd93ca3902bc15b9ec231be45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureConfig</definition>
        <argsstring>(size_t shadowIndex, unsigned short width, unsigned short height, PixelFormat format, unsigned short fsaa=0, uint16 depthBufferPoolId=1)</argsstring>
        <name>setShadowTextureConfig</name>
        <param>
          <type>size_t</type>
          <declname>shadowIndex</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>width</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="group__Image_1ga7e0353e7d36d4c2e8468641b7303d39c" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>fsaa</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa8263b218e7d187ad5ef03a73a6ad7fd" kindref="member">uint16</ref></type>
          <declname>depthBufferPoolId</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the detailed configuration for a shadow texture. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shadowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the texture to configure, must be &lt; the number of shadow textures setting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the texture </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The pixel format of the texture </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsaa</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of multisampling to use. Ignored if the device does not support it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depthBufferPoolId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool # it should query the depth buffers from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2812"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0ff40f3cef8dd775ee782bbae15d436b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureConfig</definition>
        <argsstring>(size_t shadowIndex, const ShadowTextureConfig &amp;config)</argsstring>
        <name>setShadowTextureConfig</name>
        <param>
          <type>size_t</type>
          <declname>shadowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="structOgre_1_1ShadowTextureConfig" kindref="compound">ShadowTextureConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the detailed configuration for a shadow texture. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shadowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the texture to configure, must be &lt; the number of shadow textures setting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration structure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2819"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1bb99c11f9213def3e23784ccff6435f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Scene_1ga40acba93d9441f2bccfa096b641c887d" kindref="member">ConstShadowTextureConfigIterator</ref></type>
        <definition>ConstShadowTextureConfigIterator Ogre::SceneManager::getShadowTextureConfigIterator</definition>
        <argsstring>() const </argsstring>
        <name>getShadowTextureConfigIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator over the current shadow texture settings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2822"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a87fac14153b877effba7196f116cbdc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTexturePixelFormat</definition>
        <argsstring>(PixelFormat fmt)</argsstring>
        <name>setShadowTexturePixelFormat</name>
        <param>
          <type><ref refid="group__Image_1ga7e0353e7d36d4c2e8468641b7303d39c" kindref="member">PixelFormat</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the pixel format of the textures used for texture-based shadows. <simplesect kind="remark"><para>By default, a colour texture is used (PF_X8R8G8B8) for texture shadows, but if you want to use more advanced texture shadow types you can alter this. If you do, you will have to also call setShadowTextureCasterMaterial and setShadowTextureReceiverMaterial to provide shader-based materials to use these customised shadow texture formats. </para></simplesect>
<simplesect kind="note"><para>This is the simple form, see setShadowTextureConfig for the more complex form. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2835"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad5788555e877b310410a425d0ccb14c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureFSAA</definition>
        <argsstring>(unsigned short fsaa)</argsstring>
        <name>setShadowTextureFSAA</name>
        <param>
          <type>unsigned short</type>
          <declname>fsaa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the level of multisample AA of the textures used for texture-based shadows. <simplesect kind="remark"><para>By default, the level of multisample AA is zero. </para></simplesect>
<simplesect kind="note"><para>This is the simple form, see setShadowTextureConfig for the more complex form. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2842"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7b960b480425cecbe39573215fb5e48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureCount</definition>
        <argsstring>(size_t count)</argsstring>
        <name>setShadowTextureCount</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the number of textures allocated for texture-based shadows. <simplesect kind="remark"><para>The default number of textures assigned to deal with texture based shadows is 1; however this means you can only have one light casting shadows at the same time. You can increase this number in order to make this more flexible, but be aware of the texture memory it will use. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2851"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7806a68edbfbbeac721dee76de6f869e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ogre::SceneManager::getShadowTextureCount</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowTextureCount</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of the textures allocated for texture based shadows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2853" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2853" bodyend="2853"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a70f8eddf9b8617783fb7d0995b985a9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::setShadowTextureCountPerLightType</definition>
        <argsstring>(Light::LightTypes type, size_t count)</argsstring>
        <name>setShadowTextureCountPerLightType</name>
        <param>
          <type><ref refid="classOgre_1_1Light_1a4f1dea084d1497c6f49e802ade940dbc" kindref="member">Light::LightTypes</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the number of shadow textures a light type uses. <simplesect kind="remark"><para>The default for all light types is 1. This means that each light uses only 1 shadow texture. Call this if you need more than 1 shadow texture per light, E.G. PSSM. </para></simplesect>
<simplesect kind="note"><para>This feature only works with the Integrated shadow technique. Also remember to increase the total number of shadow textures you request appropriately (e.g. via setShadowTextureCount)!! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2865" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2864" bodyend="2865"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a04405da47f025ac1e628ee25f1b85fc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ogre::SceneManager::getShadowTextureCountPerLightType</definition>
        <argsstring>(Light::LightTypes type) const </argsstring>
        <name>getShadowTextureCountPerLightType</name>
        <param>
          <type><ref refid="classOgre_1_1Light_1a4f1dea084d1497c6f49e802ade940dbc" kindref="member">Light::LightTypes</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the number of shadow textures is assigned for the given light type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2868" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2867" bodyend="2868"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a24f357817a11370d54126248c1c9a389" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureSettings</definition>
        <argsstring>(unsigned short size, unsigned short count, PixelFormat fmt=PF_X8R8G8B8, unsigned short fsaa=0, uint16 depthBufferPoolId=1)</argsstring>
        <name>setShadowTextureSettings</name>
        <param>
          <type>unsigned short</type>
          <declname>size</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="group__Image_1ga7e0353e7d36d4c2e8468641b7303d39c" kindref="member">PixelFormat</ref></type>
          <declname>fmt</declname>
          <defval><ref refid="group__Image_1gga7e0353e7d36d4c2e8468641b7303d39ca2542d39f6712cb6f69907330a31a9342" kindref="member">PF_X8R8G8B8</ref></defval>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>fsaa</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa8263b218e7d187ad5ef03a73a6ad7fd" kindref="member">uint16</ref></type>
          <declname>depthBufferPoolId</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the size and count of textures used in texture-based shadows. <simplesect kind="remark"><para></para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1ac594a29110119bed71f1c0c61265394b" kindref="member">setShadowTextureSize</ref> and <ref refid="classOgre_1_1SceneManager_1a7b960b480425cecbe39573215fb5e48c" kindref="member">setShadowTextureCount</ref> for details, this method just allows you to change both at once, which can save on reallocation if the textures have already been created. </para></simplesect>
<simplesect kind="note"><para>This is the simple form, see setShadowTextureConfig for the more complex form. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2879"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abf504cf97c1723f6fab069335ecee9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1TexturePtr" kindref="compound">TexturePtr</ref> &amp;</type>
        <definition>virtual const TexturePtr&amp; Ogre::SceneManager::getShadowTexture</definition>
        <argsstring>(size_t shadowIndex)</argsstring>
        <name>getShadowTexture</name>
        <param>
          <type>size_t</type>
          <declname>shadowIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the shadow texture currently in use at the given index. <simplesect kind="note"><para>If you change shadow settings, this reference may no longer be correct, so be sure not to hold the returned reference over texture shadow configuration changes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2887"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a893663f55c2b4a29467cff25b9b1b3f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowDirLightTextureOffset</definition>
        <argsstring>(Real offset)</argsstring>
        <name>setShadowDirLightTextureOffset</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the proportional distance which a texture shadow which is generated from a directional light will be offset into the camera view to make best use of texture space. <simplesect kind="remark"><para>When generating a shadow texture from a directional light, an approximation is used since it is not possible to render the entire scene to one texture. The texture is projected onto an area centred on the camera, and is the shadow far distance * 2 in length (it is square). This wastes a lot of texture space outside the frustum though, so this offset allows you to move the texture in front of the camera more. However, be aware that this can cause a little shadow &apos;jittering&apos; during rotation, and that if you move it too far then you&apos;ll start to get artefacts close to the camera. The value is represented as a proportion of the shadow far distance, and the default is 0.6. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2903" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2903" bodyend="2903"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a74ce4995eac32da6d1c2d2cef58c7019" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>virtual Real Ogre::SceneManager::getShadowDirLightTextureOffset</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowDirLightTextureOffset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the proportional distance which a texture shadow which is generated from a directional light will be offset into the camera view to make best use of texture space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2907" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2907" bodyend="2907"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a72fa019aa4efbc6943842efcf5f38078" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureFadeStart</definition>
        <argsstring>(Real fadeStart)</argsstring>
        <name>setShadowTextureFadeStart</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>fadeStart</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the proportional distance at which texture shadows begin to fade out. <simplesect kind="remark"><para>To hide the edges where texture shadows end (in directional lights) <ref refid="namespaceOgre" kindref="compound">Ogre</ref> will fade out the shadow in the distance. This value is a proportional distance of the entire shadow visibility distance at which the shadow begins to fade out. The default is 0.7 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2916" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2915" bodyend="2916"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a237a09e65919b808473c543fb886723f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureFadeEnd</definition>
        <argsstring>(Real fadeEnd)</argsstring>
        <name>setShadowTextureFadeEnd</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>fadeEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the proportional distance at which texture shadows finish to fading out. <simplesect kind="remark"><para>To hide the edges where texture shadows end (in directional lights) <ref refid="namespaceOgre" kindref="compound">Ogre</ref> will fade out the shadow in the distance. This value is a proportional distance of the entire shadow visibility distance at which the shadow is completely invisible. The default is 0.9. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2925" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2924" bodyend="2925"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8de7e38165fe9b0aa4baddf95ef006e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureSelfShadow</definition>
        <argsstring>(bool selfShadow)</argsstring>
        <name>setShadowTextureSelfShadow</name>
        <param>
          <type>bool</type>
          <declname>selfShadow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether or not texture shadows should attempt to self-shadow. <simplesect kind="remark"><para>The default implementation of texture shadows uses a fixed-function colour texture projection approach for maximum compatibility, and as such cannot support self-shadowing. However, if you decide to implement a more complex shadowing technique using the setShadowTextureCasterMaterial and setShadowTextureReceiverMaterial there is a possibility you may be able to support self-shadowing (e.g by implementing a shader-based shadow map). In this case you might want to enable this option. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selfShadow</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to attempt self-shadowing with texture shadows </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2939"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa5062fe502bf8cd49b974a5ca8052468" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getShadowTextureSelfShadow</definition>
        <argsstring>(void) const </argsstring>
        <name>getShadowTextureSelfShadow</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets whether or not texture shadows attempt to self-shadow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2943" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2942" bodyend="2943"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a9f0cde141313583e65561abdfae6a0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureCasterMaterial</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>setShadowTextureCasterMaterial</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the default material to use for rendering shadow casters. <simplesect kind="remark"><para>By default shadow casters are rendered into the shadow texture using an automatically generated fixed-function pass. This allows basic projective texture shadows, but it&apos;s possible to use more advanced shadow techniques by overriding the caster and receiver materials, for example providing vertex and fragment programs to implement shadow maps. </para></simplesect>
<simplesect kind="par"><title></title><para>You can rely on the ambient light in the scene being set to the requested texture shadow colour, if that&apos;s useful. </para></simplesect>
<simplesect kind="note"><para>Individual objects may also override the vertex program in your default material if their materials include shadow_caster_vertex_program_ref, shadow_receiver_vertex_program_ref shadow_caster_material entries, so if you use both make sure they are compatible. </para><simplesectsep/><para>Only a single pass is allowed in your material, although multiple techniques may be used for hardware fallback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2964"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae0d524bf189e08fdab005ca2b5560190" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowTextureReceiverMaterial</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>setShadowTextureReceiverMaterial</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the default material to use for rendering shadow receivers. <simplesect kind="remark"><para>By default shadow receivers are rendered as a post-pass using basic modulation. This allows basic projective texture shadows, but it&apos;s possible to use more advanced shadow techniques by overriding the caster and receiver materials, for example providing vertex and fragment programs to implement shadow maps. </para></simplesect>
<simplesect kind="par"><title></title><para>You can rely on texture unit 0 containing the shadow texture, and for the unit to be set to use projective texturing from the light (only useful if you&apos;re using fixed-function, which is unlikely; otherwise you should rely on the texture_viewproj_matrix auto binding) </para></simplesect>
<simplesect kind="note"><para>Individual objects may also override the vertex program in your default material if their materials include shadow_caster_vertex_program_ref shadow_receiver_vertex_program_ref shadow_receiver_material entries, so if you use both make sure they are compatible. </para><simplesectsep/><para>Only a single pass is allowed in your material, although multiple techniques may be used for hardware fallback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2986"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aaf865048d62de79942fea2758c33ee3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowCasterRenderBackFaces</definition>
        <argsstring>(bool bf)</argsstring>
        <name>setShadowCasterRenderBackFaces</name>
        <param>
          <type>bool</type>
          <declname>bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether or not shadow casters should be rendered into shadow textures using their back faces rather than their front faces. <simplesect kind="remark"><para>Rendering back faces rather than front faces into a shadow texture can help minimise depth comparison issues, if you&apos;re using depth shadowmapping. You will probably still need some biasing but you won&apos;t need as much. For solid objects the result is the same anyway, if you have objects with holes you may want to turn this option off. The default is to enable this option. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="2998" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="2998" bodyend="2998"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a99b0932e1331a4e07e0db0301172da20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getShadowCasterRenderBackFaces</definition>
        <argsstring>() const </argsstring>
        <name>getShadowCasterRenderBackFaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether or not shadow casters should be rendered into shadow textures using their back faces rather than their front faces. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3003" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3003" bodyend="3003"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1adbe1da236689cdd20690d5da950dce33" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowCameraSetup</definition>
        <argsstring>(const ShadowCameraSetupPtr &amp;shadowSetup)</argsstring>
        <name>setShadowCameraSetup</name>
        <param>
          <type>const <ref refid="group__Scene_1ga139829f6abc3581ec63563543ebfff15" kindref="member">ShadowCameraSetupPtr</ref> &amp;</type>
          <declname>shadowSetup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the shadow camera setup to use for all lights which don&apos;t have their own shadow camera setup. <simplesect kind="see"><para><ref refid="classOgre_1_1ShadowCameraSetup" kindref="compound">ShadowCameraSetup</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3009"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aae7259371b79bafd3f164daaf34a919c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="group__Scene_1ga139829f6abc3581ec63563543ebfff15" kindref="member">ShadowCameraSetupPtr</ref> &amp;</type>
        <definition>virtual const ShadowCameraSetupPtr&amp; Ogre::SceneManager::getShadowCameraSetup</definition>
        <argsstring>() const </argsstring>
        <name>getShadowCameraSetup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the shadow camera setup in use for all lights which don&apos;t have their own shadow camera setup. <simplesect kind="see"><para><ref refid="classOgre_1_1ShadowCameraSetup" kindref="compound">ShadowCameraSetup</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3015"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa40a406b22c8d5dd282523f8dcd09e34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowUseInfiniteFarPlane</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setShadowUseInfiniteFarPlane</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether we should use an inifinite camera far plane when rendering stencil shadows. <simplesect kind="remark"><para>Stencil shadow coherency is very reliant on the shadow volume not being clipped by the far plane. If this clipping happens, you get a kind of &apos;negative&apos; shadow effect. The best way to achieve coherency is to move the far plane of the camera out to infinity, thus preventing the far plane from clipping the shadow volumes. When combined with vertex program extrusion of the volume to infinity, which <ref refid="namespaceOgre" kindref="compound">Ogre</ref> does when available, this results in very robust shadow volumes. For this reason, when you enable stencil shadows, <ref refid="namespaceOgre" kindref="compound">Ogre</ref> automatically changes your camera settings to project to infinity if the card supports it. You can disable this behaviour if you like by calling this method; although you can never enable infinite projection if the card does not support it. </para></simplesect>
<simplesect kind="par"><title></title><para>If you disable infinite projection, or it is not available, you need to be far more careful with your light attenuation / directional light extrusion distances to avoid clipping artefacts at the far plane. </para></simplesect>
<simplesect kind="note"><para>Recent cards will generally support infinite far plane projection. However, we have found some cases where they do not, especially on Direct3D. There is no standard capability we can check to validate this, so we use some heuristics based on experience: <itemizedlist>
<listitem>
<para>OpenGL always seems to support it no matter what the card </para></listitem>
<listitem>
<para>Direct3D on non-vertex program capable systems (including vertex program capable cards on Direct3D7) does not support it </para></listitem>
<listitem>
<para>Direct3D on GeForce3 and GeForce4 Ti does not seem to support infinite projection</para></listitem>
<listitem>
<para></para></listitem>
</itemizedlist>
Therefore in the <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> implementation, we may veto the use of an infinite far plane based on these heuristics. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3053" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3053" bodyend="3054"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abcd82e9adadad77f0935b5cdb7182ec6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isShadowTechniqueStencilBased</definition>
        <argsstring>(void) const </argsstring>
        <name>isShadowTechniqueStencilBased</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is there a stencil shadow based shadowing technique in use? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3058" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3057" bodyend="3058"/>
        <references refid="group__General_1gga79dcd426d291c31072c1ad6f183715d6a77da660eef7a78214c39ffa491446285" compoundref="OgreCommon_8h" startline="206">Ogre::SHADOWDETAILTYPE_STENCIL</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a194ea7ba828e1f713226f16eec8cd8b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isShadowTechniqueTextureBased</definition>
        <argsstring>(void) const </argsstring>
        <name>isShadowTechniqueTextureBased</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is there a texture shadow based shadowing technique in use? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3061" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3060" bodyend="3061"/>
        <references refid="group__General_1gga79dcd426d291c31072c1ad6f183715d6a025e0b181fc7ae3830880d9a802070c0" compoundref="OgreCommon_8h" startline="209">Ogre::SHADOWDETAILTYPE_TEXTURE</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0d931a137e72d11bdaeb200fa0a8ffb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isShadowTechniqueModulative</definition>
        <argsstring>(void) const </argsstring>
        <name>isShadowTechniqueModulative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is there a modulative shadowing technique in use? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3064" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3063" bodyend="3064"/>
        <references refid="group__General_1gga79dcd426d291c31072c1ad6f183715d6a5646b85f69631dc4820b877506f3b992" compoundref="OgreCommon_8h" startline="200">Ogre::SHADOWDETAILTYPE_MODULATIVE</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6c46ea94370e147deb8c49823db0ed7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isShadowTechniqueAdditive</definition>
        <argsstring>(void) const </argsstring>
        <name>isShadowTechniqueAdditive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is there an additive shadowing technique in use? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3067" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3066" bodyend="3067"/>
        <references refid="group__General_1gga79dcd426d291c31072c1ad6f183715d6a1bc71098f374fda7da49f39aa1700fd9" compoundref="OgreCommon_8h" startline="197">Ogre::SHADOWDETAILTYPE_ADDITIVE</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7145a399f90a25b120bd9802d24448a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isShadowTechniqueIntegrated</definition>
        <argsstring>(void) const </argsstring>
        <name>isShadowTechniqueIntegrated</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the shadow technique integrated into primary materials? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3070" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3069" bodyend="3070"/>
        <references refid="group__General_1gga79dcd426d291c31072c1ad6f183715d6a7823678fe2b349b5d4af74328d4064d9" compoundref="OgreCommon_8h" startline="203">Ogre::SHADOWDETAILTYPE_INTEGRATED</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6dfdf56d941a145875d81c4c763f9391" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isShadowTechniqueInUse</definition>
        <argsstring>(void) const </argsstring>
        <name>isShadowTechniqueInUse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is there any shadowing technique in use? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3073" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3072" bodyend="3073"/>
        <references refid="group__General_1gga79dcd426d291c31072c1ad6f183715d6ad88c064ffac66e1b186fb238861046ed" compoundref="OgreCommon_8h" startline="194">Ogre::SHADOWTYPE_NONE</references>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a83a8347369ffc819ea8c85e4d416fb9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setShadowUseLightClipPlanes</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setShadowUseLightClipPlanes</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether when using a built-in additive shadow mode, user clip planes should be used to restrict light rendering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3077" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3077" bodyend="3077"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a50faf3e81e28c16fefea6937d4b6a611" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getShadowUseLightClipPlanes</definition>
        <argsstring>() const </argsstring>
        <name>getShadowUseLightClipPlanes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether when using a built-in additive shadow mode, user clip planes should be used to restrict light rendering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3081" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3081" bodyend="3081"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6673b2d01966b52e13b17451935f5b34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_setActiveCompositorChain</definition>
        <argsstring>(CompositorChain *chain)</argsstring>
        <name>_setActiveCompositorChain</name>
        <param>
          <type><ref refid="classOgre_1_1CompositorChain" kindref="compound">CompositorChain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the active compositor chain of the current scene being rendered. <simplesect kind="note"><para><ref refid="classOgre_1_1CompositorChain" kindref="compound">CompositorChain</ref> does this automatically, no need to call manually. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3086" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3086" bodyend="3086"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a86c1371039d40e139a37b2b174538978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setLateMaterialResolving</definition>
        <argsstring>(bool isLate)</argsstring>
        <name>setLateMaterialResolving</name>
        <param>
          <type>bool</type>
          <declname>isLate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether to use late material resolving or not. If set, materials will be resolved from the materials at the pass-setting stage and not at the render queue building stage. This is useful when the active material scheme during the render queue building stage is different from the one during the rendering stage. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3093" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3093" bodyend="3093"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7d482746b0adb55a7d0c670489a83152" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::isLateMaterialResolving</definition>
        <argsstring>() const </argsstring>
        <name>isLateMaterialResolving</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether using late material resolving or not. <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a86c1371039d40e139a37b2b174538978" kindref="member">setLateMaterialResolving</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3097" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3097" bodyend="3097"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3c780a67172337a28cfe02bb300a786f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classOgre_1_1CompositorChain" kindref="compound">CompositorChain</ref> *</type>
        <definition>virtual CompositorChain* Ogre::SceneManager::_getActiveCompositorChain</definition>
        <argsstring>() const </argsstring>
        <name>_getActiveCompositorChain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the active compositor chain of the current scene being rendered </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3100" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3100" bodyend="3100"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6b54e34b6a8e72d4c1456bda016731ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::addListener</definition>
        <argsstring>(Listener *s)</argsstring>
        <name>addListener</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1_1Listener" kindref="compound">Listener</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a listener which will get called back on scene manager events. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3104"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4437b11b78eae8f5db205aa89c0235ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::removeListener</definition>
        <argsstring>(Listener *s)</argsstring>
        <name>removeListener</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1_1Listener" kindref="compound">Listener</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a listener </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3107"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a552d1695774ca8f8da355ef0f11be86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> *</type>
        <definition>virtual StaticGeometry* Ogre::SceneManager::createStaticGeometry</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createStaticGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> instance suitable for use with this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. <simplesect kind="remark"><para><ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> is a way of batching up geometry into a more efficient form at the expense of being able to move it. Please read the <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> class documentation for full information. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give the new object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3118"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3193bc1a8bc05df184234b59a7701a2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> *</type>
        <definition>virtual StaticGeometry* Ogre::SceneManager::getStaticGeometry</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getStaticGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a previously created <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> instance. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3122"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1acbaddd36a321a7c00085f654df71991d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasStaticGeometry</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>hasStaticGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a static geometry instance with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3124"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a54d553be3f6098ce229e6db53ec15227" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyStaticGeometry</definition>
        <argsstring>(StaticGeometry *geom)</argsstring>
        <name>destroyStaticGeometry</name>
        <param>
          <type><ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> *</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove &amp; destroy a <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3126"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae4f180b40f4bf55669f9842fe922a003" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyStaticGeometry</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyStaticGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove &amp; destroy a <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3128"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a64f54ea048af80532212c8f60bea95d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllStaticGeometry</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllStaticGeometry</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove &amp; destroy all <ref refid="classOgre_1_1StaticGeometry" kindref="compound">StaticGeometry</ref> instances. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3130"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aaf98f349389bbdd1c3fb25c418e56887" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> *</type>
        <definition>virtual InstancedGeometry* Ogre::SceneManager::createInstancedGeometry</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createInstancedGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> instance suitable for use with this <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. <simplesect kind="remark"><para><ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> is a way of batching up geometry into a more efficient form, and still be able to move it. Please read the <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> class documentation for full information. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give the new object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3141"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2b2a069b6fd8b7e49f70d7384f96a7f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> *</type>
        <definition>virtual InstancedGeometry* Ogre::SceneManager::getInstancedGeometry</definition>
        <argsstring>(const String &amp;name) const </argsstring>
        <name>getInstancedGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a previously created <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3143"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a18bca397484fe3ba8ae396a959043e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyInstancedGeometry</definition>
        <argsstring>(InstancedGeometry *geom)</argsstring>
        <name>destroyInstancedGeometry</name>
        <param>
          <type><ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> *</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove &amp; destroy a <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3145"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a54a8d0104ab73e3421e16dc316ea15fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyInstancedGeometry</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyInstancedGeometry</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove &amp; destroy a <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3147"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abe13b71355bfe6d93303bdb73b458007" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllInstancedGeometry</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllInstancedGeometry</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove &amp; destroy all <ref refid="classOgre_1_1InstancedGeometry" kindref="compound">InstancedGeometry</ref> instances. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3149"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a5192bd4a4b82ac04c8ea59d4549d5419" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> *</type>
        <definition>virtual InstanceManager* Ogre::SceneManager::createInstanceManager</definition>
        <argsstring>(const String &amp;customName, const String &amp;meshName, const String &amp;groupName, InstanceManager::InstancingTechnique technique, size_t numInstancesPerBatch, uint16 flags=0, unsigned short subMeshIdx=0)</argsstring>
        <name>createInstanceManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>customName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>meshName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
        </param>
        <param>
          <type><ref refid="group__Scene_1ga98fb2a9ada779b56d48f74040e96a622" kindref="member">InstanceManager::InstancingTechnique</ref></type>
          <declname>technique</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numInstancesPerBatch</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa8263b218e7d187ad5ef03a73a6ad7fd" kindref="member">uint16</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>subMeshIdx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> interface to create &amp; manipulate instanced entities You need to call this function at least once before start calling createInstancedEntity to build up an instance based on the given mesh. <simplesect kind="remark"><para>Instancing is a way of batching up geometry into a much more efficient form, but with some limitations, and still be able to move &amp; animate it. Please </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> class documentation for full information. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>customName</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom name for referencing. Must be unique </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meshName</parametername>
</parameternamelist>
<parameterdescription>
<para>The mesh name the instances will be based upon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource name where the mesh lives </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOgre_1_1Technique" kindref="compound">Technique</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>to use, which may be shader based, or hardware based. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numInstancesPerBatch</parametername>
</parameternamelist>
<parameterdescription>
<para>Suggested number of instances per batch. The actual number may end up being lower if the technique doesn&apos;t support having so many. It can&apos;t be zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__General_1ga4921efc65b347efe08a6d4992af069e2" kindref="member">InstanceManagerFlags</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>only supports using one submesh from the base mesh. This parameter says which submesh to pick (must be &lt;= <ref refid="classOgre_1_1Mesh_1afe20aa1c72451105ffd82b69aac42a36" kindref="member">Mesh::getNumSubMeshes()</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3173"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aefa17f628da7ea07a48e485c4d5f2295" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> *</type>
        <definition>virtual InstanceManager* Ogre::SceneManager::getInstanceManager</definition>
        <argsstring>(const String &amp;managerName) const </argsstring>
        <name>getInstanceManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>managerName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves an existing <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> by it&apos;s name. <simplesect kind="note"><para>Throws an exception if the named <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3178"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6f3f49a48b346189f565a06463a82489" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasInstanceManager</definition>
        <argsstring>(const String &amp;managerName) const </argsstring>
        <name>hasInstanceManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>managerName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether an <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3181"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a89f3b77eab9eca1d434047a4177f162a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyInstanceManager</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyInstanceManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys an <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> <bold>if</bold> it was created with <ref refid="classOgre_1_1SceneManager_1a5192bd4a4b82ac04c8ea59d4549d5419" kindref="member">createInstanceManager()</ref> <simplesect kind="remark"><para>Be sure you don&apos;t have any <ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref> referenced somewhere which was created with this manager, since it will become a dangling pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>customName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the manager to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3189"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a53e13b78f8d3ef5dc15de63596e7313c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyInstanceManager</definition>
        <argsstring>(InstanceManager *instanceManager)</argsstring>
        <name>destroyInstanceManager</name>
        <param>
          <type><ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> *</type>
          <declname>instanceManager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3190"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2b116e020a220d8275508252f704ed6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllInstanceManagers</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllInstanceManagers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3192"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a81ffd5be029a92a8d6849d4a92584088" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Ogre::SceneManager::getNumInstancesPerBatch</definition>
        <argsstring>(const String &amp;meshName, const String &amp;groupName, const String &amp;materialName, InstanceManager::InstancingTechnique technique, size_t numInstancesPerBatch, uint16 flags=0, unsigned short subMeshIdx=0)</argsstring>
        <name>getNumInstancesPerBatch</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>meshName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type><ref refid="group__Scene_1ga98fb2a9ada779b56d48f74040e96a622" kindref="member">InstanceManager::InstancingTechnique</ref></type>
          <declname>technique</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numInstancesPerBatch</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1aa8263b218e7d187ad5ef03a73a6ad7fd" kindref="member">uint16</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>subMeshIdx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__Scene_1ga2623303420a636cfc8b06784da9077de" kindref="member">InstanceManager::getMaxOrBestNumInstancesPerBatch</ref> </para></simplesect>
<simplesect kind="remark"><para>If you&apos;ve already created an <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref>, you can call it&apos;s getMaxOrBestNumInstancesPerBatch() function directly. Another (not recommended) way to know if the technique is unsupported is by creating an <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> and use createInstancedEntity, which will return null pointer. The input parameter &quot;numInstancesPerBatch&quot; is a suggested value when using IM_VTFBESTFIT flag (in that case it should be non-zero) </para></simplesect>
<simplesect kind="return"><para>The ideal (or maximum, depending on flags) number of instances per batch for the given technique. Zero if technique is unsupported or errors were spotted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3210"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a7aad430f2aa0333e19317a895fbc2918" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref> *</type>
        <definition>virtual InstancedEntity* Ogre::SceneManager::createInstancedEntity</definition>
        <argsstring>(const String &amp;materialName, const String &amp;managerName)</argsstring>
        <name>createInstancedEntity</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>materialName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>managerName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref> based on an existing <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> (<simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a5192bd4a4b82ac04c8ea59d4549d5419" kindref="member">createInstanceManager</ref>) </para></simplesect>
<simplesect kind="remark"><para>Return value may be null if the InstanceManger technique isn&apos;t supported Try to keep the number of entities with different materials <bold>to a minimum</bold> For more information </para></simplesect>
<simplesect kind="see"><para>InstancedManager </para><simplesectsep/><para>InstancedBatch, </para><simplesectsep/><para><ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref> Alternatively you can call InstancedManager::createInstanceEntity using the returned pointer from <ref refid="classOgre_1_1SceneManager_1a5192bd4a4b82ac04c8ea59d4549d5419" kindref="member">createInstanceManager</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>materialName</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classOgre_1_1Material" kindref="compound">Material</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>managerName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the instance manager </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref> ready to be attached to a <ref refid="classOgre_1_1SceneNode" kindref="compound">SceneNode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3224"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2a4d87f4fda0a5b495890705a02b3cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyInstancedEntity</definition>
        <argsstring>(InstancedEntity *instancedEntity)</argsstring>
        <name>destroyInstancedEntity</name>
        <param>
          <type><ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref> *</type>
          <declname>instancedEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes an <ref refid="classOgre_1_1InstancedEntity" kindref="compound">InstancedEntity</ref>, <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a7aad430f2aa0333e19317a895fbc2918" kindref="member">SceneManager::createInstancedEntity</ref> &amp; </para><simplesectsep/><para><ref refid="group__Scene_1ga6603588204263c7d16173169a5e327e7" kindref="member">InstanceBatch::removeInstancedEntity</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instancedEntity</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3230"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8cd474a0bb93c6fa0e4439a5a7d11c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::_addDirtyInstanceManager</definition>
        <argsstring>(InstanceManager *dirtyManager)</argsstring>
        <name>_addDirtyInstanceManager</name>
        <param>
          <type><ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> *</type>
          <declname>dirtyManager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called by an <ref refid="classOgre_1_1InstanceManager" kindref="compound">InstanceManager</ref> when it has at least one <ref refid="classOgre_1_1InstanceBatch" kindref="compound">InstanceBatch</ref> that needs their bounds to be updated for proper culling <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirtyManager</parametername>
</parameternamelist>
<parameterdescription>
<para>The manager with dirty batches to update </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3236"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aedbccf093ce9ee7c4db9d59d9344bc94" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> *</type>
        <definition>virtual MovableObject* Ogre::SceneManager::createMovableObject</definition>
        <argsstring>(const String &amp;name, const String &amp;typeName, const NameValuePairList *params=0)</argsstring>
        <name>createMovableObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gadccb207c184efc0a6fb2a00ab6320d19" kindref="member">NameValuePairList</ref> *</type>
          <declname>params</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a movable object of the type specified. <simplesect kind="remark"><para>This is the generalised form of <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> creation where you can create a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> of any specialised type generically, including any new types registered using plugins. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give the object. Must be unique within type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional name/value pair list to give extra parameters to the created object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3249"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a904a81ccbdaa6eba08bd7ee3521df415" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> *</type>
        <definition>virtual MovableObject* Ogre::SceneManager::createMovableObject</definition>
        <argsstring>(const String &amp;typeName, const NameValuePairList *params=0)</argsstring>
        <name>createMovableObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gadccb207c184efc0a6fb2a00ab6320d19" kindref="member">NameValuePairList</ref> *</type>
          <declname>params</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a movable object of the type specified without a name. <simplesect kind="remark"><para>This is the generalised form of <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> creation where you can create a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> of any specialised type generically, including any new types registered using plugins. The name is generated automatically. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional name/value pair list to give extra parameters to the created object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3259"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1acac42f73eb41692a098bf31f1401d7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyMovableObject</definition>
        <argsstring>(const String &amp;name, const String &amp;typeName)</argsstring>
        <name>destroyMovableObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> with the name specified, of the type specified. <simplesect kind="remark"><para>The <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> will automatically detach itself from any nodes on destruction. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3265"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a32a135e382bac33ecd42f946713e2f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyMovableObject</definition>
        <argsstring>(MovableObject *m)</argsstring>
        <name>destroyMovableObject</name>
        <param>
          <type><ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref>. <simplesect kind="remark"><para>The <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> will automatically detach itself from any nodes on destruction. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3271"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8aca5477f30dd55321a101f25c6a5ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllMovableObjectsByType</definition>
        <argsstring>(const String &amp;typeName)</argsstring>
        <name>destroyAllMovableObjectsByType</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy all MovableObjects of a given type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3273"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af985062a80dbc20d8fe523be166ecca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::destroyAllMovableObjects</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllMovableObjects</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy all MovableObjects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3275"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af30f35e9d9630ae360fbf5a9de136452" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> *</type>
        <definition>virtual MovableObject* Ogre::SceneManager::getMovableObject</definition>
        <argsstring>(const String &amp;name, const String &amp;typeName) const </argsstring>
        <name>getMovableObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to a previously created <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref>. <simplesect kind="note"><para>Throws an exception if the named instance does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3279"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aaf8016cc1956244c4dd6844b030e06b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::hasMovableObject</definition>
        <argsstring>(const String &amp;name, const String &amp;typeName) const </argsstring>
        <name>hasMovableObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a movable object instance with the given name exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3281"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af19c32fbc0adc0fa28d8e6c26d9800cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classOgre_1_1SceneManager_1a4249682ae2a69255ed225383d930aec1" kindref="member">MovableObjectIterator</ref></type>
        <definition>virtual MovableObjectIterator Ogre::SceneManager::getMovableObjectIterator</definition>
        <argsstring>(const String &amp;typeName)</argsstring>
        <name>getMovableObjectIterator</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator over all MovableObect instances of a given type. <simplesect kind="note"><para>The iterator returned from this method is not thread safe, do not use this if you are creating or deleting objects of this type in another thread. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3288"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af13eb691a7bdd67e17a402dee98c4b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::injectMovableObject</definition>
        <argsstring>(MovableObject *m)</argsstring>
        <name>injectMovableObject</name>
        <param>
          <type><ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inject a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> instance created externally. <simplesect kind="remark"><para>This method &apos;injects&apos; a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> instance created externally into the <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> instance registry held in the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. You might want to use this if you have a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> which you don&apos;t want to register a factory for; for example a <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> which cannot be generally constructed by clients. </para></simplesect>
<simplesect kind="note"><para>It is important that the <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> has a unique name for the type, and that its getMovableType() method returns a proper type name. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3300"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6d14c16852b08107db556a180e61d7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::extractMovableObject</definition>
        <argsstring>(const String &amp;name, const String &amp;typeName)</argsstring>
        <name>extractMovableObject</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a previously injected <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref>. <simplesect kind="remark"><para>Essentially this does the same as destroyMovableObject, but only removes the instance from the internal lists, it does not attempt to destroy it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3307"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a874431ce04c34fa6dcbdb2ed1420b168" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::extractMovableObject</definition>
        <argsstring>(MovableObject *m)</argsstring>
        <name>extractMovableObject</name>
        <param>
          <type><ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a previously injected <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref>. <simplesect kind="remark"><para>Essentially this does the same as destroyMovableObject, but only removes the instance from the internal lists, it does not attempt to destroy it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3314"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a1c55f5e97c66261de71c979db64f6355" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::extractAllMovableObjectsByType</definition>
        <argsstring>(const String &amp;typeName)</argsstring>
        <name>extractAllMovableObjectsByType</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract all injected MovableObjects of a given type. <simplesect kind="remark"><para>Essentially this does the same as destroyAllMovableObjectsByType, but only removes the instances from the internal lists, it does not attempt to destroy them. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3321"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aef478368ad95d09c9df5ed114ba47c36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setVisibilityMask</definition>
        <argsstring>(uint32 vmask)</argsstring>
        <name>setVisibilityMask</name>
        <param>
          <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
          <declname>vmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a mask which is bitwise &apos;and&apos;ed with objects own visibility masks to determine if the object is visible. <simplesect kind="remark"><para>Note that this is combined with any per-viewport visibility mask through an &apos;and&apos; operation. </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1Viewport_1ad5a4fe00ee05861c157bf63e78e1c2b0" kindref="member">Viewport::setVisibilityMask</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3329" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3329" bodyend="3329"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abd074aaefc7c579a0c6d09593bb7d3e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>virtual uint32 Ogre::SceneManager::getVisibilityMask</definition>
        <argsstring>(void)</argsstring>
        <name>getVisibilityMask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a mask which is bitwise &apos;and&apos;ed with objects own visibility masks to determine if the object is visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3334" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3334" bodyend="3334"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4ac70da4acb59963d90d58b0b76814e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::SceneManager::_getCombinedVisibilityMask</definition>
        <argsstring>(void) const </argsstring>
        <name>_getCombinedVisibilityMask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for getting the combination between the global visibility mask and the per-viewport visibility mask. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3339"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a04c8414da02aec3e3f98acd013917ed2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setFindVisibleObjects</definition>
        <argsstring>(bool find)</argsstring>
        <name>setFindVisibleObjects</name>
        <param>
          <type>bool</type>
          <declname>find</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> should search for visible objects, or whether they are being manually handled. <simplesect kind="remark"><para>This is an advanced function, you should not use this unless you know what you are doing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3347" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3347" bodyend="3347"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a3d7d7f344e528eea2e99481247de72c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getFindVisibleObjects</definition>
        <argsstring>(void)</argsstring>
        <name>getFindVisibleObjects</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets whether the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> should search for visible objects, or whether they are being manually handled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3352" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3352" bodyend="3352"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a4fa4a94b8687098a6751be1ed36e20f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setNormaliseNormalsOnScale</definition>
        <argsstring>(bool n)</argsstring>
        <name>setNormaliseNormalsOnScale</name>
        <param>
          <type>bool</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to automatically normalise normals on objects whenever they are scaled. <simplesect kind="remark"><para>Scaling can distort normals so the default behaviour is to compensate for this, but it has a cost. If you would prefer to manually manage this, set this option to &apos;false&apos; and use <ref refid="classOgre_1_1Pass_1ad00b9d37cf0d5d7af26d23a2a48f5541" kindref="member">Pass::setNormaliseNormals</ref> only when needed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3362" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3362" bodyend="3362"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a0fdae2f94c44e3f1be79c8c27f965ec2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getNormaliseNormalsOnScale</definition>
        <argsstring>() const </argsstring>
        <name>getNormaliseNormalsOnScale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether to automatically normalise normals on objects whenever they are scaled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3367" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3367" bodyend="3367"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2a4d997503b651187f2e129cd5eeb7ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setFlipCullingOnNegativeScale</definition>
        <argsstring>(bool n)</argsstring>
        <name>setFlipCullingOnNegativeScale</name>
        <param>
          <type>bool</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to automatically flip the culling mode on objects whenever they are negatively scaled. <simplesect kind="remark"><para>Negativelyl scaling an object has the effect of flipping the triangles, so the culling mode should probably be inverted to deal with this. If you would prefer to manually manage this, set this option to &apos;false&apos; and use different materials with <ref refid="classOgre_1_1Pass_1a8942abf3ede0f3cb43584c85c4071734" kindref="member">Pass::setCullingMode</ref> set manually as needed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3377" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3377" bodyend="3377"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1abf5b90fccee3356293e5335265a2ea29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getFlipCullingOnNegativeScale</definition>
        <argsstring>() const </argsstring>
        <name>getFlipCullingOnNegativeScale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether to automatically flip the culling mode on objects whenever they are negatively scaled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3382" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3382" bodyend="3382"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a502e470a4b59819fcb0578ee0509ca6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_injectRenderWithPass</definition>
        <argsstring>(Pass *pass, Renderable *rend, bool shadowDerivation=true, bool doLightIteration=false, const LightList *manualLightList=0)</argsstring>
        <name>_injectRenderWithPass</name>
        <param>
          <type><ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> *</type>
          <declname>rend</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shadowDerivation</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>doLightIteration</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="group__General_1gaab30ef14aae93306a6044cb38d835f0c" kindref="member">LightList</ref> *</type>
          <declname>manualLightList</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render something as if it came from the current queue. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classOgre_1_1Material" kindref="compound">Material</ref> pass to use for setting up this quad. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rend</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classOgre_1_1Renderable" kindref="compound">Renderable</ref> to render </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shadowDerivation</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether passes should be replaced with shadow caster / receiver passes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3390"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6753ea2b52715774b7fdd59da232917a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_suppressRenderStateChanges</definition>
        <argsstring>(bool suppress)</argsstring>
        <name>_suppressRenderStateChanges</name>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates to the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> whether it should suppress changing the <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> states when rendering objects. <simplesect kind="remark"><para>This method allows you to tell the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> not to change any <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> state until you tell it to. This method is only intended for advanced use, don&apos;t use it if you&apos;re unsure of the effect. The only RenderSystems calls made are to set the world matrix for each object (note - view an projection matrices are NOT SET - they are under your control) and to render the object; it is up to the caller to do everything else, including enabling any vertex / fragment programs and updating their parameter state, and binding parameters to the <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref>. </para></simplesect>
<simplesect kind="note"><para>Calling this implicitly disables shadow processing since no shadows can be rendered without changing state. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, no <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> state changes will be issued until this method is called again with a parameter of false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3410"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af94f21965555436d24e715d2408fbb06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::_areRenderStateChangesSuppressed</definition>
        <argsstring>(void) const </argsstring>
        <name>_areRenderStateChangesSuppressed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are render state changes suppressed? <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a6753ea2b52715774b7fdd59da232917a" kindref="member">_suppressRenderStateChanges</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3416" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3415" bodyend="3416"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a90c2bebde23c88f9946e80627724ca44" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
        <definition>virtual const Pass* Ogre::SceneManager::_setPass</definition>
        <argsstring>(const Pass *pass, bool evenIfSuppressed=false, bool shadowDerivation=true)</argsstring>
        <name>_setPass</name>
        <param>
          <type>const <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evenIfSuppressed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shadowDerivation</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for setting up the renderstate for a rendering pass. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> details to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evenIfSuppressed</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the pass details even if render state changes are suppressed; if you are using this to manually set state when render state changes are suppressed, you should set this to true. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shadowDerivation</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, disables the derivation of shadow passes from original passes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classOgre_1_1Pass" kindref="compound">Pass</ref> object that was used instead of the one passed in, can happen when rendering shadow passes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3431"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ac631d25ab65e821544835bfa1b507fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_markGpuParamsDirty</definition>
        <argsstring>(uint16 mask)</argsstring>
        <name>_markGpuParamsDirty</name>
        <param>
          <type><ref refid="namespaceOgre_1aa8263b218e7d187ad5ef03a73a6ad7fd" kindref="member">uint16</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method to allow you to mark gpu parameters as dirty, causing them to be updated according to the mask that you set when updateGpuProgramParameters is next called. Only really useful if you&apos;re controlling parameter state in inner rendering loop callbacks. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Some combination of GpuParamVariability which is bitwise OR&apos;ed with the current dirty state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3440"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a63644515ee55a20f31979e94eb227a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_suppressShadows</definition>
        <argsstring>(bool suppress)</argsstring>
        <name>_suppressShadows</name>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates to the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> whether it should suppress the active shadow rendering technique until told otherwise. <simplesect kind="remark"><para>This is a temporary alternative to setShadowTechnique to suppress the rendering of shadows and forcing all processing down the standard rendering path. This is intended for internal use only. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, no shadow rendering will occur until this method is called again with a parameter of false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3452"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a832e91f368f91e727dd2386cc00e7485" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::_areShadowsSuppressed</definition>
        <argsstring>(void) const </argsstring>
        <name>_areShadowsSuppressed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are shadows suppressed? <simplesect kind="see"><para><ref refid="classOgre_1_1SceneManager_1a63644515ee55a20f31979e94eb227a1c" kindref="member">_suppressShadows</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3458" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3457" bodyend="3458"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae738d9a6259878ba16d0153539d3f7f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::_renderQueueGroupObjects</definition>
        <argsstring>(RenderQueueGroup *group, QueuedRenderableCollection::OrganisationMode om)</argsstring>
        <name>_renderQueueGroupObjects</name>
        <param>
          <type><ref refid="classOgre_1_1RenderQueueGroup" kindref="compound">RenderQueueGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1QueuedRenderableCollection_1ab44ba16fe8e8c0247234d4e6edfae844" kindref="member">QueuedRenderableCollection::OrganisationMode</ref></type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render the objects in a given queue group <simplesect kind="remark"><para>You should only call this from a <ref refid="classOgre_1_1RenderQueueInvocation" kindref="compound">RenderQueueInvocation</ref> implementation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3464"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1af55b7d8cf3daf68db0266139faf73492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::setQueuedRenderableVisitor</definition>
        <argsstring>(SceneMgrQueuedRenderableVisitor *visitor)</argsstring>
        <name>setQueuedRenderableVisitor</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor" kindref="compound">SceneMgrQueuedRenderableVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advanced method for supplying an alternative visitor, used for parsing the render queues and sending the results to the renderer. <simplesect kind="remark"><para>You can use this method to insert your own implementation of the <ref refid="classOgre_1_1QueuedRenderableVisitor" kindref="compound">QueuedRenderableVisitor</ref> interface, which receives calls as the queued renderables are parsed in a given order (determined by <ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref>) and are sent to the renderer. If you provide your own implementation of this visitor, you are responsible for either calling the rendersystem, or passing the calls on to the base class implementation. </para></simplesect>
<simplesect kind="note"><para>Ownership is not taken of this pointer, you are still required to delete it yourself once you&apos;re finished. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>Your implementation of <ref refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor" kindref="compound">SceneMgrQueuedRenderableVisitor</ref>. If you pass 0, the default implementation will be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3481"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1afe6dac1f080afffd346271af26c464d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor" kindref="compound">SceneMgrQueuedRenderableVisitor</ref> *</type>
        <definition>SceneMgrQueuedRenderableVisitor* Ogre::SceneManager::getQueuedRenderableVisitor</definition>
        <argsstring>(void) const </argsstring>
        <name>getQueuedRenderableVisitor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current visitor object which processes queued renderables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3484"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa5ed3c081ae69e90569fd0c2727a34df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
        <definition>RenderSystem* Ogre::SceneManager::getDestinationRenderSystem</definition>
        <argsstring>()</argsstring>
        <name>getDestinationRenderSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the rendersystem subclass to which the output of this Scene Manager gets sent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3490"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a6e2c9ea54992be4b4729ab6243ed3e3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> *</type>
        <definition>Viewport* Ogre::SceneManager::getCurrentViewport</definition>
        <argsstring>(void) const </argsstring>
        <name>getCurrentViewport</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current viewport being rendered (advanced use only, only valid during viewport update. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3494" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3494" bodyend="3494"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1aa724f4e6c46ceaa95a13d60a7d504db0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structOgre_1_1VisibleObjectsBoundsInfo" kindref="compound">VisibleObjectsBoundsInfo</ref> &amp;</type>
        <definition>const VisibleObjectsBoundsInfo&amp; Ogre::SceneManager::getVisibleObjectsBoundsInfo</definition>
        <argsstring>(const Camera *cam) const </argsstring>
        <name>getVisibleObjectsBoundsInfo</name>
        <param>
          <type>const <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref> *</type>
          <declname>cam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a visibility boundary box for a specific camera. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3497"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a63b60c5540665c878d5f15138c4cfa21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structOgre_1_1VisibleObjectsBoundsInfo" kindref="compound">VisibleObjectsBoundsInfo</ref> &amp;</type>
        <definition>const VisibleObjectsBoundsInfo&amp; Ogre::SceneManager::getShadowCasterBoundsInfo</definition>
        <argsstring>(const Light *light, size_t iteration=0) const </argsstring>
        <name>getShadowCasterBoundsInfo</name>
        <param>
          <type>const <ref refid="classOgre_1_1Light" kindref="compound">Light</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iteration</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the shadow caster AAB for a specific light-camera combination </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3500"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a52de83e40cb386682bf3d148affd192b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ogre::SceneManager::setCameraRelativeRendering</definition>
        <argsstring>(bool rel)</argsstring>
        <name>setCameraRelativeRendering</name>
        <param>
          <type>bool</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to use camera-relative co-ordinates when rendering, ie to always place the camera at the origin and move the world around it. <simplesect kind="remark"><para>This is a technique to alleviate some of the precision issues associated with rendering far from the origin, where single-precision floats as used in most GPUs begin to lose their precision. Instead of including the camera translation in the view matrix, it only includes the rotation, and the world matrices of objects must be expressed relative to this. </para></simplesect>
<simplesect kind="note"><para>If you need this option, you will probably also need to enable double-precision mode in <ref refid="namespaceOgre" kindref="compound">Ogre</ref> (OGRE_DOUBLE_PRECISION), since even though this will alleviate the rendering precision, the source camera and object positions will still suffer from precision issues leading to jerky movement. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3516" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3516" bodyend="3516"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a8aaf50983e9000284a8eed93a51353bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Ogre::SceneManager::getCameraRelativeRendering</definition>
        <argsstring>() const </argsstring>
        <name>getCameraRelativeRendering</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether to use camera-relative co-ordinates when rendering, ie to always place the camera at the origin and move the world around it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3521" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="3521" bodyend="3521"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a2ac761cb112de51be26c54609de3c83a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::addLodListener</definition>
        <argsstring>(LodListener *listener)</argsstring>
        <name>addLodListener</name>
        <param>
          <type><ref refid="classOgre_1_1LodListener" kindref="compound">LodListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a level of detail listener. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3525"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a25cc1bb36997b722fc60efc7903f3760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::removeLodListener</definition>
        <argsstring>(LodListener *listener)</argsstring>
        <name>removeLodListener</name>
        <param>
          <type><ref refid="classOgre_1_1LodListener" kindref="compound">LodListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a level of detail listener. <simplesect kind="remark"><para>Do not call from inside an <ref refid="classOgre_1_1LodListener" kindref="compound">LodListener</ref> callback method. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3532"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ae4b6a7748dc4273fd6c160fb162c544f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::_notifyMovableObjectLodChanged</definition>
        <argsstring>(MovableObjectLodChangedEvent &amp;evt)</argsstring>
        <name>_notifyMovableObjectLodChanged</name>
        <param>
          <type><ref refid="structOgre_1_1MovableObjectLodChangedEvent" kindref="compound">MovableObjectLodChangedEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify that a movable object lod change event has occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3535"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1ad0a84e6426cad7dfd721fb5fccd9976c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::_notifyEntityMeshLodChanged</definition>
        <argsstring>(EntityMeshLodChangedEvent &amp;evt)</argsstring>
        <name>_notifyEntityMeshLodChanged</name>
        <param>
          <type><ref refid="structOgre_1_1EntityMeshLodChangedEvent" kindref="compound">EntityMeshLodChangedEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify that an entity mesh lod change event has occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3538"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a272d1a76e7854e51f824f0099a4910cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::_notifyEntityMaterialLodChanged</definition>
        <argsstring>(EntityMaterialLodChangedEvent &amp;evt)</argsstring>
        <name>_notifyEntityMaterialLodChanged</name>
        <param>
          <type><ref refid="structOgre_1_1EntityMaterialLodChangedEvent" kindref="compound">EntityMaterialLodChangedEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify that an entity material lod change event has occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3541"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1SceneManager_1a72e39912a34617ffa0455f859ec438c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::SceneManager::_handleLodEvents</definition>
        <argsstring>()</argsstring>
        <name>_handleLodEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle lod events. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="3544"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Manages the organisation and rendering of a &apos;scene&apos; i.e. a collection of objects and potentially world geometry. <simplesect kind="remark"><para>This class defines the interface and the basic behaviour of a &apos;Scene Manager&apos;. A <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> organises the culling and rendering of the scene, in conjunction with the <ref refid="classOgre_1_1RenderQueue" kindref="compound">RenderQueue</ref>. This class is designed to be extended through subclassing in order to provide more specialised scene organisation structures for particular needs. The default <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> culls based on a hierarchy of node bounding boxes, other implementations can use an octree (</para></simplesect>
<simplesect kind="see"><para>OctreeSceneManager), a BSP tree (</para><simplesectsep/><para>BspSceneManager), and many other options. New <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> implementations can be added at runtime by plugins, see <ref refid="classOgre_1_1SceneManagerEnumerator" kindref="compound">SceneManagerEnumerator</ref> for the interfaces for adding new <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> types. </para></simplesect>
<simplesect kind="par"><title></title><para>There is a distinction between &apos;objects&apos; (which subclass <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref>, and are movable, discrete objects in the world), and &apos;world geometry&apos;, which is large, generally static geometry. World geometry tends to influence the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> organisational structure (e.g. lots of indoor static geometry might result in a spatial tree structure) and as such world geometry is generally tied to a given <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> implementation, whilst <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> instances can be used with any <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. Subclasses are free to define world geometry however they please. </para></simplesect>
<simplesect kind="par"><title></title><para>Multiple <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> instances can exist at one time, each one with a distinct scene. Which <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> is used to render a scene is dependent on the <ref refid="classOgre_1_1Camera" kindref="compound">Camera</ref>, which will always call back the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> which created it to render the scene. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="31640">
        <label>Ogre::SceneManager</label>
        <link refid="classOgre_1_1SceneManager"/>
        <childnode refid="31641" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31641">
        <label>SceneMgtAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31642">
        <label>Ogre::DefaultSceneManager</label>
        <link refid="classOgre_1_1DefaultSceneManager"/>
        <childnode refid="31640" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="31818">
        <label>Ogre::set&lt; String &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31867">
        <label>Ogre::vector&lt; TexturePtr &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31693">
        <label>Ogre::map&lt; String, Bone * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31660">
        <label>Ogre::UserObjectBindings::Attributes</label>
        <link refid="classOgre_1_1UserObjectBindings_1_1Attributes"/>
        <childnode refid="31657" relation="public-inheritance">
        </childnode>
        <childnode refid="31661" relation="usage">
          <edgelabel>mUserObjectsMap</edgelabel>
        </childnode>
        <childnode refid="31658" relation="usage">
          <edgelabel>mKeylessAny</edgelabel>
        </childnode>
      </node>
      <node id="31869">
        <label>Ogre::vector&lt; EntityMeshLodChangedEvent &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31746">
        <label>Ogre::ColourValue</label>
        <link refid="classOgre_1_1ColourValue"/>
        <childnode refid="31746" relation="usage">
          <edgelabel>White</edgelabel>
          <edgelabel>Blue</edgelabel>
          <edgelabel>ZERO</edgelabel>
          <edgelabel>Black</edgelabel>
          <edgelabel>Red</edgelabel>
          <edgelabel>Green</edgelabel>
        </childnode>
      </node>
      <node id="31703">
        <label>Ogre::set&lt; VertexBufferBinding * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31830">
        <label>Ogre::vector&lt; GpuSharedParametersUsage &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31809">
        <label>Ogre::CompositorInstance::TargetOperation</label>
        <link refid="classOgre_1_1CompositorInstance_1_1TargetOperation"/>
        <childnode refid="31810" relation="usage">
          <edgelabel>renderQueues</edgelabel>
        </childnode>
        <childnode refid="31811" relation="usage">
          <edgelabel>renderSystemOperations</edgelabel>
        </childnode>
        <childnode refid="31761" relation="usage">
          <edgelabel>target</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>materialScheme</edgelabel>
        </childnode>
      </node>
      <node id="31790">
        <label>Ogre::CompositorChain</label>
        <link refid="classOgre_1_1CompositorChain"/>
        <childnode refid="31791" relation="public-inheritance">
        </childnode>
        <childnode refid="31792" relation="public-inheritance">
        </childnode>
        <childnode refid="31793" relation="public-inheritance">
        </childnode>
        <childnode refid="31794" relation="usage">
          <edgelabel>mInstances</edgelabel>
        </childnode>
        <childnode refid="31795" relation="usage">
          <edgelabel>mOriginalScene</edgelabel>
        </childnode>
        <childnode refid="31806" relation="usage">
          <edgelabel>mRenderSystemOperations</edgelabel>
        </childnode>
        <childnode refid="31759" relation="usage">
          <edgelabel>mViewport</edgelabel>
        </childnode>
        <childnode refid="31807" relation="usage">
          <edgelabel>mOurListener</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mOldMaterialScheme</edgelabel>
          <edgelabel>mOriginalSceneScheme</edgelabel>
        </childnode>
        <childnode refid="31837" relation="usage">
          <edgelabel>mCompiledState</edgelabel>
        </childnode>
        <childnode refid="31809" relation="usage">
          <edgelabel>mOutputOperation</edgelabel>
        </childnode>
      </node>
      <node id="31751">
        <label>Ogre::PlaneBoundedVolume</label>
        <link refid="classOgre_1_1PlaneBoundedVolume"/>
        <childnode refid="31752" relation="usage">
          <edgelabel>planes</edgelabel>
        </childnode>
      </node>
      <node id="31735">
        <label>Ogre::MovableObject</label>
        <link refid="classOgre_1_1MovableObject"/>
        <childnode refid="31736" relation="public-inheritance">
        </childnode>
        <childnode refid="31737" relation="public-inheritance">
        </childnode>
        <childnode refid="31738" relation="public-inheritance">
        </childnode>
        <childnode refid="31739" relation="usage">
          <edgelabel>mWorldBoundingSphere</edgelabel>
        </childnode>
        <childnode refid="31648" relation="usage">
          <edgelabel>mParentNode</edgelabel>
        </childnode>
        <childnode refid="31740" relation="usage">
          <edgelabel>mCreator</edgelabel>
        </childnode>
        <childnode refid="31741" relation="usage">
          <edgelabel>mListener</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mWorldAABB</edgelabel>
          <edgelabel>mWorldDarkCapBounds</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mManager</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
        <childnode refid="31742" relation="usage">
          <edgelabel>mLightList</edgelabel>
        </childnode>
        <childnode refid="31656" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
      </node>
      <node id="31825">
        <label>Ogre::map&lt; String, GpuConstantDefinition &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31762">
        <label>RenderSysAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31785">
        <label>Ogre::map&lt; const Camera *, const Light * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31901">
        <label>Ogre::SceneQueryResult</label>
        <link refid="structOgre_1_1SceneQueryResult"/>
        <childnode refid="31644" relation="public-inheritance">
        </childnode>
        <childnode refid="31902" relation="usage">
          <edgelabel>worldFragments</edgelabel>
        </childnode>
        <childnode refid="31903" relation="usage">
          <edgelabel>movables</edgelabel>
        </childnode>
      </node>
      <node id="31655">
        <label>Ogre::Matrix4</label>
        <link refid="classOgre_1_1Matrix4"/>
        <childnode refid="31655" relation="usage">
          <edgelabel>ZEROAFFINE</edgelabel>
          <edgelabel>CLIPSPACE2DTOIMAGESPACE</edgelabel>
          <edgelabel>IDENTITY</edgelabel>
          <edgelabel>ZERO</edgelabel>
        </childnode>
      </node>
      <node id="31662">
        <label>K</label>
      </node>
      <node id="31701">
        <label>BufferAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31663">
        <label>T</label>
      </node>
      <node id="31900">
        <label>Ogre::SceneQueryListener</label>
        <link refid="classOgre_1_1SceneQueryListener"/>
      </node>
      <node id="31853">
        <label>Ogre::GpuProgram::CmdMorph</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdMorph"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31739">
        <label>Ogre::Sphere</label>
        <link refid="classOgre_1_1Sphere"/>
        <childnode refid="31650" relation="usage">
          <edgelabel>mCenter</edgelabel>
        </childnode>
      </node>
      <node id="31647">
        <label>Ogre::SceneNode</label>
        <link refid="classOgre_1_1SceneNode"/>
        <childnode refid="31648" relation="public-inheritance">
        </childnode>
        <childnode refid="31647" relation="usage">
          <edgelabel>mAutoTrackTarget</edgelabel>
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mAutoTrackOffset</edgelabel>
          <edgelabel>mYawFixedAxis</edgelabel>
          <edgelabel>mAutoTrackLocalDirection</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mWorldAABB</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mCreator</edgelabel>
        </childnode>
        <childnode refid="31733" relation="usage">
          <edgelabel>mWireBoundingBox</edgelabel>
        </childnode>
      </node>
      <node id="31787">
        <label>Ogre::Texture</label>
        <link refid="classOgre_1_1Texture"/>
        <childnode refid="31671" relation="public-inheritance">
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mFSAAHint</edgelabel>
        </childnode>
      </node>
      <node id="31717">
        <label>Ogre::LodStrategy</label>
        <link refid="classOgre_1_1LodStrategy"/>
        <childnode refid="31718" relation="public-inheritance">
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
      </node>
      <node id="31656">
        <label>Ogre::UserObjectBindings</label>
        <link refid="classOgre_1_1UserObjectBindings"/>
        <childnode refid="31657" relation="public-inheritance">
        </childnode>
        <childnode refid="31658" relation="usage">
          <edgelabel>msEmptyAny</edgelabel>
        </childnode>
        <childnode refid="31660" relation="usage">
          <edgelabel>mAttributes</edgelabel>
        </childnode>
      </node>
      <node id="31691">
        <label>Ogre::vector&lt; Bone * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31807">
        <label>Ogre::CompositorChain::RQListener</label>
        <link refid="classOgre_1_1CompositorChain_1_1RQListener"/>
        <childnode refid="31808" relation="public-inheritance">
        </childnode>
        <childnode refid="31759" relation="usage">
          <edgelabel>mViewport</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mSceneManager</edgelabel>
        </childnode>
        <childnode refid="31809" relation="usage">
          <edgelabel>mOperation</edgelabel>
        </childnode>
        <childnode refid="31812" relation="usage">
          <edgelabel>mRenderSystem</edgelabel>
        </childnode>
      </node>
      <node id="31664">
        <label>Ogre::Node::DebugRenderable</label>
        <link refid="classOgre_1_1Node_1_1DebugRenderable"/>
        <childnode refid="31665" relation="public-inheritance">
        </childnode>
        <childnode refid="31649" relation="public-inheritance">
        </childnode>
        <childnode refid="31648" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31668" relation="usage">
          <edgelabel>mMeshPtr</edgelabel>
        </childnode>
        <childnode refid="31725" relation="usage">
          <edgelabel>mMat</edgelabel>
        </childnode>
      </node>
      <node id="31870">
        <label>Ogre::vector&lt; ShadowTextureConfig &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31801">
        <label>Ogre::vector&lt; CompositionTechnique * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31910">
        <label>Ogre::SceneManager::ShadowCasterSceneQueryListener</label>
        <link refid="classOgre_1_1SceneManager_1_1ShadowCasterSceneQueryListener"/>
        <childnode refid="31900" relation="public-inheritance">
        </childnode>
        <childnode refid="31644" relation="public-inheritance">
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mSceneMgr</edgelabel>
        </childnode>
        <childnode refid="31744" relation="usage">
          <edgelabel>mLight</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mCamera</edgelabel>
        </childnode>
        <childnode refid="31911" relation="usage">
          <edgelabel>mLightClipVolumeList</edgelabel>
          <edgelabel>mCasterList</edgelabel>
        </childnode>
      </node>
      <node id="31913">
        <label>Ogre::map&lt; unsigned short, bool &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31885">
        <label>Ogre::vector&lt; ManualObjectSection * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31829">
        <label>Ogre::vector&lt; AutoConstantEntry &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31684">
        <label>Ogre::AtomicScalar&lt; LoadingState &gt;</label>
        <link refid="classOgre_1_1AtomicScalar"/>
      </node>
      <node id="31797">
        <label>Ogre::CompositionTechnique</label>
        <link refid="classOgre_1_1CompositionTechnique"/>
        <childnode refid="31793" relation="public-inheritance">
        </childnode>
        <childnode refid="31798" relation="usage">
          <edgelabel>mOutputTarget</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mSchemeName</edgelabel>
          <edgelabel>mCompositorLogicName</edgelabel>
        </childnode>
        <childnode refid="31800" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31803" relation="usage">
          <edgelabel>mTextureDefinitions</edgelabel>
        </childnode>
        <childnode refid="31804" relation="usage">
          <edgelabel>mTargetPasses</edgelabel>
        </childnode>
      </node>
      <node id="31832">
        <label>Ogre::vector&lt; float &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31677">
        <label>Ogre::ResourceManager</label>
        <link refid="classOgre_1_1ResourceManager"/>
        <childnode refid="31678" relation="public-inheritance">
        </childnode>
        <childnode refid="31676" relation="public-inheritance">
        </childnode>
        <childnode refid="31679" relation="usage">
          <edgelabel>mResourcesByHandle</edgelabel>
        </childnode>
        <childnode refid="31680" relation="usage">
          <edgelabel>mMemoryUsage</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mResourceType</edgelabel>
        </childnode>
        <childnode refid="31681" relation="usage">
          <edgelabel>mResourcePoolMap</edgelabel>
        </childnode>
        <childnode refid="31682" relation="usage">
          <edgelabel>mScriptPatterns</edgelabel>
        </childnode>
      </node>
      <node id="31852">
        <label>Ogre::GpuProgram::CmdPose</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdPose"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31876">
        <label>Ogre::RenderQueue</label>
        <link refid="classOgre_1_1RenderQueue"/>
        <childnode refid="31771" relation="public-inheritance">
        </childnode>
        <childnode refid="31877" relation="usage">
          <edgelabel>mGroups</edgelabel>
        </childnode>
        <childnode refid="31879" relation="usage">
          <edgelabel>mRenderableListener</edgelabel>
        </childnode>
      </node>
      <node id="31924">
        <label>Ogre::SceneManager::SkyBoxGenParameters</label>
        <link refid="structOgre_1_1SceneManager_1_1SkyBoxGenParameters"/>
      </node>
      <node id="31896">
        <label>Ogre::SphereSceneQuery</label>
        <link refid="classOgre_1_1SphereSceneQuery"/>
        <childnode refid="31897" relation="public-inheritance">
        </childnode>
        <childnode refid="31739" relation="usage">
          <edgelabel>mSphere</edgelabel>
        </childnode>
      </node>
      <node id="31838">
        <label>Ogre::SceneManager::SceneMgrQueuedRenderableVisitor</label>
        <link refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor"/>
        <childnode refid="31839" relation="public-inheritance">
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>targetSceneMgr</edgelabel>
        </childnode>
        <childnode refid="31840" relation="usage">
          <edgelabel>mUsedPass</edgelabel>
        </childnode>
        <childnode refid="31742" relation="usage">
          <edgelabel>manualLightList</edgelabel>
        </childnode>
      </node>
      <node id="31674">
        <label>Ogre::map&lt; String, ParamCommand * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31741">
        <label>Ogre::MovableObject::Listener</label>
        <link refid="classOgre_1_1MovableObject_1_1Listener"/>
      </node>
      <node id="31690">
        <label>Ogre::vector&lt; LinkedSkeletonAnimationSource &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31744">
        <label>Ogre::Light</label>
        <link refid="classOgre_1_1Light"/>
        <childnode refid="31735" relation="public-inheritance">
        </childnode>
        <childnode refid="31745" relation="usage">
          <edgelabel>mFrustumClipVolumes</edgelabel>
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mPosition</edgelabel>
          <edgelabel>mDerivedDirection</edgelabel>
          <edgelabel>mDerivedCamRelativePosition</edgelabel>
          <edgelabel>mDerivedPosition</edgelabel>
          <edgelabel>mDirection</edgelabel>
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>mDiffuse</edgelabel>
          <edgelabel>mSpecular</edgelabel>
        </childnode>
        <childnode refid="31747" relation="usage">
          <edgelabel>mCustomShadowCameraSetup</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31750" relation="usage">
          <edgelabel>mCustomParameters</edgelabel>
        </childnode>
        <childnode refid="31751" relation="usage">
          <edgelabel>mNearClipVolume</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mCameraToBeRelativeTo</edgelabel>
        </childnode>
        <childnode refid="31758" relation="usage">
          <edgelabel>mSpotInner</edgelabel>
          <edgelabel>mSpotOuter</edgelabel>
        </childnode>
      </node>
      <node id="31686">
        <label>Ogre::AnimationContainer</label>
        <link refid="classOgre_1_1AnimationContainer"/>
      </node>
      <node id="31911">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="31663" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31835">
        <label>Ogre::list&lt; Listener * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31859">
        <label>TechniqueAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31847">
        <label>Ogre::SharedPtr&lt; GpuProgram &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31848" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31895">
        <label>Ogre::map&lt; String, InstanceManager * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31753">
        <label>Ogre::Camera</label>
        <link refid="classOgre_1_1Camera"/>
        <childnode refid="31754" relation="public-inheritance">
        </childnode>
        <childnode refid="31647" relation="usage">
          <edgelabel>mAutoTrackTarget</edgelabel>
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mAutoTrackOffset</edgelabel>
          <edgelabel>mYawFixedAxis</edgelabel>
          <edgelabel>mPosition</edgelabel>
          <edgelabel>mDerivedPosition</edgelabel>
          <edgelabel>mRealPosition</edgelabel>
        </childnode>
        <childnode refid="31754" relation="usage">
          <edgelabel>mCullFrustum</edgelabel>
        </childnode>
        <childnode refid="31752" relation="usage">
          <edgelabel>mWindowClipPlanes</edgelabel>
        </childnode>
        <childnode refid="31759" relation="usage">
          <edgelabel>mLastViewport</edgelabel>
        </childnode>
        <childnode refid="31773" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mSceneMgr</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mLodCamera</edgelabel>
        </childnode>
        <childnode refid="31732" relation="usage">
          <edgelabel>mDerivedOrientation</edgelabel>
          <edgelabel>mOrientation</edgelabel>
          <edgelabel>mRealOrientation</edgelabel>
        </childnode>
      </node>
      <node id="31659">
        <label>Ogre::Any::placeholder</label>
        <link refid="classOgre_1_1Any_1_1placeholder"/>
      </node>
      <node id="31917">
        <label>Ogre::vector&lt; SubEntity * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31784">
        <label>Ogre::map&lt; Light *, LightClippingInfo &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31702">
        <label>Ogre::set&lt; HardwareIndexBuffer * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31822">
        <label>GpuParamsAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31919">
        <label>Ogre::HardwareBufferLicensee</label>
        <link refid="classOgre_1_1HardwareBufferLicensee"/>
      </node>
      <node id="31758">
        <label>Ogre::Radian</label>
        <link refid="classOgre_1_1Radian"/>
      </node>
      <node id="31899">
        <label>Ogre::set&lt; WorldFragmentType &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31760">
        <label>ViewportAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31764">
        <label>Ogre::vector&lt; RenderTargetListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31742">
        <label>Ogre::HashedVector&lt; Light * &gt;</label>
        <link refid="classOgre_1_1HashedVector"/>
        <childnode refid="31743" relation="usage">
          <edgelabel>mList</edgelabel>
        </childnode>
      </node>
      <node id="31814">
        <label>Ogre::map&lt; uint16, DepthBufferVec &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31643">
        <label>Ogre::SceneManager</label>
        <link refid="classOgre_1_1SceneManager"/>
        <childnode refid="31644" relation="public-inheritance">
        </childnode>
        <childnode refid="31645" relation="usage">
          <edgelabel>mRenderObjectListeners</edgelabel>
        </childnode>
        <childnode refid="31646" relation="usage">
          <edgelabel>mCamVisibleObjectsMap</edgelabel>
        </childnode>
        <childnode refid="31647" relation="usage">
          <edgelabel>mSkyPlaneNode</edgelabel>
          <edgelabel>mSkyDomeNode</edgelabel>
          <edgelabel>mSceneRoot</edgelabel>
          <edgelabel>mSkyBoxNode</edgelabel>
        </childnode>
        <childnode refid="31780" relation="usage">
          <edgelabel>mFullScreenQuad</edgelabel>
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mCameraRelativePosition</edgelabel>
        </childnode>
        <childnode refid="31781" relation="usage">
          <edgelabel>mRenderQueueListeners</edgelabel>
        </childnode>
        <childnode refid="31782" relation="usage">
          <edgelabel>mEntityMaterialLodChangedEvents</edgelabel>
        </childnode>
        <childnode refid="31783" relation="usage">
          <edgelabel>mMovableObjectLodChangedEvents</edgelabel>
        </childnode>
        <childnode refid="31784" relation="usage">
          <edgelabel>mLightClippingInfoMap</edgelabel>
        </childnode>
        <childnode refid="31777" relation="usage">
          <edgelabel>mShadowIndexBuffer</edgelabel>
        </childnode>
        <childnode refid="31785" relation="usage">
          <edgelabel>mShadowCamLightMapping</edgelabel>
        </childnode>
        <childnode refid="31786" relation="usage">
          <edgelabel>mStaticGeometryList</edgelabel>
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>mAmbientLight</edgelabel>
          <edgelabel>mFogColour</edgelabel>
          <edgelabel>mShadowColour</edgelabel>
        </childnode>
        <childnode refid="31787" relation="usage">
          <edgelabel>mCurrentShadowTexture</edgelabel>
        </childnode>
        <childnode refid="31692" relation="usage">
          <edgelabel>mAnimationsList</edgelabel>
        </childnode>
        <childnode refid="31756" relation="usage">
          <edgelabel>mSkyPlane</edgelabel>
        </childnode>
        <childnode refid="31788" relation="usage">
          <edgelabel>mCameras</edgelabel>
        </childnode>
        <childnode refid="31789" relation="usage">
          <edgelabel>mSceneNodes</edgelabel>
        </childnode>
        <childnode refid="31790" relation="usage">
          <edgelabel>mActiveCompositorChain</edgelabel>
        </childnode>
        <childnode refid="31838" relation="usage">
          <edgelabel>mDefaultQueuedRenderableVisitor</edgelabel>
          <edgelabel>mActiveQueuedRenderableVisitor</edgelabel>
        </childnode>
        <childnode refid="31865" relation="usage">
          <edgelabel>mShadowTextureCameras</edgelabel>
        </childnode>
        <childnode refid="31759" relation="usage">
          <edgelabel>mCurrentViewport</edgelabel>
        </childnode>
        <childnode refid="31866" relation="usage">
          <edgelabel>mLodListeners</edgelabel>
        </childnode>
        <childnode refid="31867" relation="usage">
          <edgelabel>mShadowTextures</edgelabel>
        </childnode>
        <childnode refid="31773" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31868" relation="usage">
          <edgelabel>mTestLightInfos</edgelabel>
          <edgelabel>mCachedLightInfos</edgelabel>
        </childnode>
        <childnode refid="31869" relation="usage">
          <edgelabel>mEntityMeshLodChangedEvents</edgelabel>
        </childnode>
        <childnode refid="31820" relation="usage">
          <edgelabel>mFiniteExtrusionParams</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverFPParams</edgelabel>
          <edgelabel>mShadowTextureCustomCasterFPParams</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverVPParams</edgelabel>
          <edgelabel>mShadowTextureCustomCasterVPParams</edgelabel>
          <edgelabel>mInfiniteExtrusionParams</edgelabel>
        </childnode>
        <childnode refid="31870" relation="usage">
          <edgelabel>mShadowTextureConfigList</edgelabel>
        </childnode>
        <childnode refid="31840" relation="usage">
          <edgelabel>mShadowReceiverPass</edgelabel>
          <edgelabel>mShadowModulativePass</edgelabel>
          <edgelabel>mShadowCasterPlainBlackPass</edgelabel>
          <edgelabel>mShadowStencilPass</edgelabel>
          <edgelabel>mShadowDebugPass</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverPass</edgelabel>
          <edgelabel>mShadowTextureCustomCasterPass</edgelabel>
        </childnode>
        <childnode refid="31651" relation="usage">
          <edgelabel>mMovableNameGenerator</edgelabel>
        </childnode>
        <childnode refid="31747" relation="usage">
          <edgelabel>mDefaultShadowCameraSetup</edgelabel>
        </childnode>
        <childnode refid="31871" relation="usage">
          <edgelabel>mAnimationStates</edgelabel>
        </childnode>
        <childnode refid="31875" relation="usage">
          <edgelabel>mSkyPlaneGenParameters</edgelabel>
        </childnode>
        <childnode refid="31876" relation="usage">
          <edgelabel>mRenderQueue</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mShadowTextureCustomReceiverVertexProgram</edgelabel>
          <edgelabel>mName</edgelabel>
          <edgelabel>mShadowTextureCustomCasterVertexProgram</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverFragmentProgram</edgelabel>
          <edgelabel>mShadowTextureCustomCasterFragmentProgram</edgelabel>
        </childnode>
        <childnode refid="31880" relation="usage">
          <edgelabel>mNullShadowTexture</edgelabel>
        </childnode>
        <childnode refid="31742" relation="usage">
          <edgelabel>mLightsAffectingFrustum</edgelabel>
          <edgelabel>mShadowTextureCurrentCasterLightList</edgelabel>
        </childnode>
        <childnode refid="31882" relation="usage">
          <edgelabel>mShadowTextureIndexLightList</edgelabel>
        </childnode>
        <childnode refid="31883" relation="usage">
          <edgelabel>mSpecialCaseQueueList</edgelabel>
        </childnode>
        <childnode refid="31884" relation="usage">
          <edgelabel>mSkyBoxObj</edgelabel>
        </childnode>
        <childnode refid="31895" relation="usage">
          <edgelabel>mInstanceManagerMap</edgelabel>
        </childnode>
        <childnode refid="31896" relation="usage">
          <edgelabel>mShadowCasterSphereQuery</edgelabel>
        </childnode>
        <childnode refid="31904" relation="usage">
          <edgelabel>mShadowCasterList</edgelabel>
        </childnode>
        <childnode refid="31905" relation="usage">
          <edgelabel>mDirtyInstanceManagers</edgelabel>
          <edgelabel>mDirtyInstanceMgrsTmp</edgelabel>
        </childnode>
        <childnode refid="31906" relation="usage">
          <edgelabel>mMovableObjectCollectionMap</edgelabel>
        </childnode>
        <childnode refid="31655" relation="usage">
          <edgelabel>mTempXform</edgelabel>
          <edgelabel>mCachedViewMatrix</edgelabel>
        </childnode>
        <childnode refid="31907" relation="usage">
          <edgelabel>mShadowCasterAABBQuery</edgelabel>
        </childnode>
        <childnode refid="31908" relation="usage">
          <edgelabel>mAutoParamDataSource</edgelabel>
        </childnode>
        <childnode refid="31910" relation="usage">
          <edgelabel>mShadowCasterQueryListener</edgelabel>
        </childnode>
        <childnode refid="31732" relation="usage">
          <edgelabel>mSkyDomeOrientation</edgelabel>
          <edgelabel>mSkyBoxOrientation</edgelabel>
        </childnode>
        <childnode refid="31912" relation="usage">
          <edgelabel>mSkyDomeEntity</edgelabel>
          <edgelabel>mSkyPlaneEntity</edgelabel>
        </childnode>
        <childnode refid="31921" relation="usage">
          <edgelabel>mAutoTrackingSceneNodes</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mCameraInProgress</edgelabel>
        </childnode>
        <childnode refid="31922" relation="usage">
          <edgelabel>mInstancedGeometryList</edgelabel>
        </childnode>
        <childnode refid="31923" relation="usage">
          <edgelabel>mSkyDomeGenParameters</edgelabel>
        </childnode>
        <childnode refid="31924" relation="usage">
          <edgelabel>mSkyBoxGenParameters</edgelabel>
        </childnode>
        <childnode refid="31812" relation="usage">
          <edgelabel>mDestRenderSystem</edgelabel>
        </childnode>
      </node>
      <node id="31918">
        <label>Ogre::TempBlendedBufferInfo</label>
        <link refid="classOgre_1_1TempBlendedBufferInfo"/>
        <childnode refid="31919" relation="public-inheritance">
        </childnode>
        <childnode refid="31701" relation="public-inheritance">
        </childnode>
        <childnode refid="31708" relation="usage">
          <edgelabel>srcNormalBuffer</edgelabel>
          <edgelabel>srcPositionBuffer</edgelabel>
          <edgelabel>destNormalBuffer</edgelabel>
          <edgelabel>destPositionBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31714">
        <label>Ogre::vector&lt; Pose * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31734">
        <label>Ogre::SimpleRenderable</label>
        <link refid="classOgre_1_1SimpleRenderable"/>
        <childnode refid="31735" relation="public-inheritance">
        </childnode>
        <childnode refid="31665" relation="public-inheritance">
        </childnode>
        <childnode refid="31725" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="31774" relation="usage">
          <edgelabel>mRenderOp</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mParentSceneManager</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mBox</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mMatName</edgelabel>
        </childnode>
        <childnode refid="31655" relation="usage">
          <edgelabel>mWorldTransform</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mCamera</edgelabel>
        </childnode>
      </node>
      <node id="31706">
        <label>Ogre::set&lt; HardwareVertexBuffer * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31730">
        <label>Ogre::map&lt; unsigned short, LodTechniques * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31851">
        <label>Ogre::GpuProgram::CmdAdjacency</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdAdjacency"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31907">
        <label>Ogre::AxisAlignedBoxSceneQuery</label>
        <link refid="classOgre_1_1AxisAlignedBoxSceneQuery"/>
        <childnode refid="31897" relation="public-inheritance">
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mAABB</edgelabel>
        </childnode>
      </node>
      <node id="31676">
        <label>ResourceAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31697">
        <label>Ogre::vector&lt; HardwareAnimationData &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31821">
        <label>Ogre::GpuProgramParameters</label>
        <link refid="classOgre_1_1GpuProgramParameters"/>
        <childnode refid="31822" relation="public-inheritance">
        </childnode>
        <childnode refid="31823" relation="usage">
          <edgelabel>mNamedConstants</edgelabel>
        </childnode>
        <childnode refid="31826" relation="usage">
          <edgelabel>mIntLogicalToPhysical</edgelabel>
          <edgelabel>mFloatLogicalToPhysical</edgelabel>
        </childnode>
        <childnode refid="31829" relation="usage">
          <edgelabel>mAutoConstants</edgelabel>
        </childnode>
        <childnode refid="31658" relation="usage">
          <edgelabel>mRenderSystemData</edgelabel>
        </childnode>
        <childnode refid="31830" relation="usage">
          <edgelabel>mSharedParamSets</edgelabel>
        </childnode>
        <childnode refid="31831" relation="usage">
          <edgelabel>mIntConstants</edgelabel>
        </childnode>
        <childnode refid="31832" relation="usage">
          <edgelabel>mFloatConstants</edgelabel>
        </childnode>
        <childnode refid="31833" relation="usage">
          <edgelabel>AutoConstantDictionary</edgelabel>
        </childnode>
      </node>
      <node id="31858">
        <label>Ogre::Technique</label>
        <link refid="classOgre_1_1Technique"/>
        <childnode refid="31859" relation="public-inheritance">
        </childnode>
        <childnode refid="31727" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31860" relation="usage">
          <edgelabel>mIlluminationPasses</edgelabel>
        </childnode>
        <childnode refid="31725" relation="usage">
          <edgelabel>mShadowReceiverMaterial</edgelabel>
          <edgelabel>mShadowCasterMaterial</edgelabel>
        </childnode>
        <childnode refid="31861" relation="usage">
          <edgelabel>mGPUVendorRules</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mShadowReceiverMaterialName</edgelabel>
          <edgelabel>mShadowCasterMaterialName</edgelabel>
        </childnode>
        <childnode refid="31862" relation="usage">
          <edgelabel>mGPUDeviceNameRules</edgelabel>
        </childnode>
        <childnode refid="31656" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
        <childnode refid="31863" relation="usage">
          <edgelabel>mPasses</edgelabel>
        </childnode>
      </node>
      <node id="31779">
        <label>Ogre::HardwareIndexBuffer</label>
        <link refid="classOgre_1_1HardwareIndexBuffer"/>
        <childnode refid="31711" relation="public-inheritance">
        </childnode>
        <childnode refid="31700" relation="usage">
          <edgelabel>mMgr</edgelabel>
        </childnode>
      </node>
      <node id="31745">
        <label>Ogre::vector&lt; PlaneBoundedVolume &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31731">
        <label>Ogre::Node::Listener</label>
        <link refid="classOgre_1_1Node_1_1Listener"/>
      </node>
      <node id="31834">
        <label>Ogre::list&lt; HardwareOcclusionQuery * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31799">
        <label>Ogre::vector&lt; CompositionPass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31661">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="31662" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="31663" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31813">
        <label>Ogre::multimap&lt; uchar, RenderTarget * &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="31819">
        <label>Ogre::DriverVersion</label>
        <link refid="structOgre_1_1DriverVersion"/>
      </node>
      <node id="31781">
        <label>Ogre::vector&lt; RenderQueueListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31842">
        <label>Ogre::Pass::HashFunc</label>
        <link refid="structOgre_1_1Pass_1_1HashFunc"/>
      </node>
      <node id="31854">
        <label>Ogre::GpuProgram::CmdType</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdType"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31720">
        <label>Ogre::multimap&lt; size_t, VertexBoneAssignment &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="31658">
        <label>Ogre::Any</label>
        <link refid="classOgre_1_1Any"/>
        <childnode refid="31659" relation="usage">
          <edgelabel>mContent</edgelabel>
        </childnode>
      </node>
      <node id="31707">
        <label>Ogre::set&lt; VertexDeclaration * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31810">
        <label>std::bitset&lt; RENDER_QUEUE_COUNT &gt;</label>
      </node>
      <node id="31771">
        <label>RenderQueueAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31679">
        <label>Ogre::map&lt; ResourceHandle, ResourcePtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31866">
        <label>Ogre::set&lt; LodListener * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31803">
        <label>Ogre::vector&lt; TextureDefinition * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31789">
        <label>Ogre::map&lt; String, SceneNode * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31796">
        <label>Ogre::map&lt; String, TexturePtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31723">
        <label>Ogre::DataStream</label>
        <link refid="classOgre_1_1DataStream"/>
        <childnode refid="31724" relation="public-inheritance">
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
      </node>
      <node id="31817">
        <label>Ogre::RenderSystemCapabilities</label>
        <link refid="classOgre_1_1RenderSystemCapabilities"/>
        <childnode refid="31762" relation="public-inheritance">
        </childnode>
        <childnode refid="31818" relation="usage">
          <edgelabel>mSupportedShaderProfiles</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mRenderSystemName</edgelabel>
          <edgelabel>mDeviceName</edgelabel>
        </childnode>
        <childnode refid="31819" relation="usage">
          <edgelabel>mDriverVersion</edgelabel>
        </childnode>
      </node>
      <node id="31833">
        <label>Ogre::GpuProgramParameters::AutoConstantDefinition</label>
        <link refid="structOgre_1_1GpuProgramParameters_1_1AutoConstantDefinition"/>
        <childnode refid="31652" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="31806">
        <label>Ogre::vector&lt; CompositorInstance::RenderSystemOperation * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31725">
        <label>Ogre::MaterialPtr</label>
        <link refid="classOgre_1_1MaterialPtr"/>
        <childnode refid="31726" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31755">
        <label>Ogre::Vector2</label>
        <link refid="classOgre_1_1Vector2"/>
        <childnode refid="31755" relation="usage">
          <edgelabel>ZERO</edgelabel>
          <edgelabel>UNIT_SCALE</edgelabel>
          <edgelabel>NEGATIVE_UNIT_X</edgelabel>
          <edgelabel>UNIT_X</edgelabel>
          <edgelabel>NEGATIVE_UNIT_Y</edgelabel>
          <edgelabel>UNIT_Y</edgelabel>
        </childnode>
      </node>
      <node id="31700">
        <label>Ogre::HardwareBufferManagerBase</label>
        <link refid="classOgre_1_1HardwareBufferManagerBase"/>
        <childnode refid="31701" relation="public-inheritance">
        </childnode>
        <childnode refid="31702" relation="usage">
          <edgelabel>mIndexBuffers</edgelabel>
        </childnode>
        <childnode refid="31703" relation="usage">
          <edgelabel>mVertexBufferBindings</edgelabel>
        </childnode>
        <childnode refid="31704" relation="usage">
          <edgelabel>mFreeTempVertexBufferMap</edgelabel>
        </childnode>
        <childnode refid="31705" relation="usage">
          <edgelabel>mTempVertexBufferLicenses</edgelabel>
        </childnode>
        <childnode refid="31706" relation="usage">
          <edgelabel>mVertexBuffers</edgelabel>
        </childnode>
        <childnode refid="31707" relation="usage">
          <edgelabel>mVertexDeclarations</edgelabel>
        </childnode>
      </node>
      <node id="31650">
        <label>Ogre::Vector3</label>
        <link refid="classOgre_1_1Vector3"/>
        <childnode refid="31650" relation="usage">
          <edgelabel>ZERO</edgelabel>
          <edgelabel>UNIT_SCALE</edgelabel>
          <edgelabel>NEGATIVE_UNIT_X</edgelabel>
          <edgelabel>UNIT_X</edgelabel>
          <edgelabel>NEGATIVE_UNIT_Y</edgelabel>
          <edgelabel>UNIT_Y</edgelabel>
          <edgelabel>NEGATIVE_UNIT_Z</edgelabel>
          <edgelabel>UNIT_Z</edgelabel>
        </childnode>
      </node>
      <node id="31893">
        <label>Ogre::Vector4</label>
        <link refid="classOgre_1_1Vector4"/>
        <childnode refid="31893" relation="usage">
          <edgelabel>ZERO</edgelabel>
        </childnode>
      </node>
      <node id="31780">
        <label>Ogre::Rectangle2D</label>
        <link refid="classOgre_1_1Rectangle2D"/>
        <childnode refid="31734" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31645">
        <label>Ogre::vector&lt; RenderObjectListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31879">
        <label>Ogre::RenderQueue::RenderableListener</label>
        <link refid="classOgre_1_1RenderQueue_1_1RenderableListener"/>
      </node>
      <node id="31902">
        <label>Ogre::list&lt; SceneQuery::WorldFragment * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31776">
        <label>IndexDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31724">
        <label>StreamAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31644">
        <label>SceneMgtAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31912">
        <label>Ogre::Entity</label>
        <link refid="classOgre_1_1Entity"/>
        <childnode refid="31735" relation="public-inheritance">
        </childnode>
        <childnode refid="31845" relation="public-inheritance">
        </childnode>
        <childnode refid="31913" relation="usage">
          <edgelabel>mSchemeHardwareAnim</edgelabel>
        </childnode>
        <childnode refid="31695" relation="usage">
          <edgelabel>mSoftwareVertexAnimVertexData</edgelabel>
          <edgelabel>mSkelAnimVertexData</edgelabel>
          <edgelabel>mHardwareVertexAnimVertexData</edgelabel>
        </childnode>
        <childnode refid="31668" relation="usage">
          <edgelabel>mMesh</edgelabel>
        </childnode>
        <childnode refid="31914" relation="usage">
          <edgelabel>mChildObjectList</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mFullBoundingBox</edgelabel>
        </childnode>
        <childnode refid="31915" relation="usage">
          <edgelabel>mSkeletonInstance</edgelabel>
        </childnode>
        <childnode refid="31871" relation="usage">
          <edgelabel>mAnimationState</edgelabel>
        </childnode>
        <childnode refid="31864" relation="usage">
          <edgelabel>mSharedSkeletonEntities</edgelabel>
        </childnode>
        <childnode refid="31917" relation="usage">
          <edgelabel>mSubEntityList</edgelabel>
        </childnode>
        <childnode refid="31655" relation="usage">
          <edgelabel>mLastParentXform</edgelabel>
          <edgelabel>mBoneMatrices</edgelabel>
          <edgelabel>mBoneWorldMatrices</edgelabel>
        </childnode>
        <childnode refid="31918" relation="usage">
          <edgelabel>mTempSkelAnimInfo</edgelabel>
          <edgelabel>mTempVertexAnimInfo</edgelabel>
        </childnode>
        <childnode refid="31920" relation="usage">
          <edgelabel>mLodEntityList</edgelabel>
        </childnode>
      </node>
      <node id="31811">
        <label>Ogre::vector&lt; RenderSystemOpPair &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31861">
        <label>Ogre::vector&lt; GPUVendorRule &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31689">
        <label>Ogre::Skeleton</label>
        <link refid="classOgre_1_1Skeleton"/>
        <childnode refid="31671" relation="public-inheritance">
        </childnode>
        <childnode refid="31686" relation="public-inheritance">
        </childnode>
        <childnode refid="31690" relation="usage">
          <edgelabel>mLinkedSkeletonAnimSourceList</edgelabel>
        </childnode>
        <childnode refid="31691" relation="usage">
          <edgelabel>mBoneList</edgelabel>
          <edgelabel>mRootBones</edgelabel>
        </childnode>
        <childnode refid="31692" relation="usage">
          <edgelabel>mAnimationsList</edgelabel>
        </childnode>
        <childnode refid="31693" relation="usage">
          <edgelabel>mBoneListByName</edgelabel>
        </childnode>
        <childnode refid="31694" relation="usage">
          <edgelabel>mManualBones</edgelabel>
        </childnode>
      </node>
      <node id="31738">
        <label>MovableAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31756">
        <label>Ogre::Plane</label>
        <link refid="classOgre_1_1Plane"/>
        <childnode refid="31650" relation="usage">
          <edgelabel>normal</edgelabel>
        </childnode>
      </node>
      <node id="31715">
        <label>Ogre::vector&lt; unsigned short &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31778">
        <label>Ogre::SharedPtr&lt; HardwareIndexBuffer &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31779" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31688">
        <label>Ogre::SharedPtr&lt; Skeleton &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31689" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31680">
        <label>Ogre::AtomicScalar&lt; size_t &gt;</label>
        <link refid="classOgre_1_1AtomicScalar"/>
      </node>
      <node id="31922">
        <label>Ogre::map&lt; String, InstancedGeometry * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31897">
        <label>Ogre::RegionSceneQuery</label>
        <link refid="classOgre_1_1RegionSceneQuery"/>
        <childnode refid="31898" relation="public-inheritance">
        </childnode>
        <childnode refid="31900" relation="public-inheritance">
        </childnode>
        <childnode refid="31901" relation="usage">
          <edgelabel>mLastResult</edgelabel>
        </childnode>
      </node>
      <node id="31812">
        <label>Ogre::RenderSystem</label>
        <link refid="classOgre_1_1RenderSystem"/>
        <childnode refid="31762" relation="public-inheritance">
        </childnode>
        <childnode refid="31813" relation="usage">
          <edgelabel>mPrioritisedRenderTargets</edgelabel>
        </childnode>
        <childnode refid="31814" relation="usage">
          <edgelabel>mDepthBufferPool</edgelabel>
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mTexProjRelativeOrigin</edgelabel>
        </childnode>
        <childnode refid="31698" relation="usage">
          <edgelabel>mGlobalInstanceVertexBufferVertexDeclaration</edgelabel>
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>mManualBlendColours</edgelabel>
        </childnode>
        <childnode refid="31761" relation="usage">
          <edgelabel>mActiveRenderTarget</edgelabel>
        </childnode>
        <childnode refid="31752" relation="usage">
          <edgelabel>mClipPlanes</edgelabel>
        </childnode>
        <childnode refid="31708" relation="usage">
          <edgelabel>mGlobalInstanceVertexBuffer</edgelabel>
        </childnode>
        <childnode refid="31759" relation="usage">
          <edgelabel>mActiveViewport</edgelabel>
        </childnode>
        <childnode refid="31815" relation="usage">
          <edgelabel>mTextureManager</edgelabel>
        </childnode>
        <childnode refid="31817" relation="usage">
          <edgelabel>mRealCapabilities</edgelabel>
          <edgelabel>mCurrentCapabilities</edgelabel>
        </childnode>
        <childnode refid="31820" relation="usage">
          <edgelabel>mActiveGeometryGpuProgramParameters</edgelabel>
          <edgelabel>mActiveFragmentGpuProgramParameters</edgelabel>
          <edgelabel>mActiveVertexGpuProgramParameters</edgelabel>
        </childnode>
        <childnode refid="31682" relation="usage">
          <edgelabel>mEventNames</edgelabel>
        </childnode>
        <childnode refid="31834" relation="usage">
          <edgelabel>mHwOcclusionQueries</edgelabel>
        </childnode>
        <childnode refid="31835" relation="usage">
          <edgelabel>mEventListeners</edgelabel>
        </childnode>
        <childnode refid="31836" relation="usage">
          <edgelabel>mRenderTargets</edgelabel>
        </childnode>
        <childnode refid="31819" relation="usage">
          <edgelabel>mDriverVersion</edgelabel>
        </childnode>
      </node>
      <node id="31699">
        <label>Ogre::list&lt; VertexElement &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31921">
        <label>Ogre::set&lt; SceneNode * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31667">
        <label>Ogre::Renderable::RenderSystemData</label>
        <link refid="classOgre_1_1Renderable_1_1RenderSystemData"/>
      </node>
      <node id="31903">
        <label>Ogre::list&lt; MovableObject * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31766">
        <label>TimerAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31804">
        <label>Ogre::vector&lt; CompositionTargetPass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31682">
        <label>Ogre::vector&lt; String &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31696">
        <label>VertexDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31908">
        <label>Ogre::AutoParamDataSource</label>
        <link refid="classOgre_1_1AutoParamDataSource"/>
        <childnode refid="31644" relation="public-inheritance">
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mCameraRelativePosition</edgelabel>
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>mAmbientLight</edgelabel>
          <edgelabel>mFogColour</edgelabel>
        </childnode>
        <childnode refid="31893" relation="usage">
          <edgelabel>mCameraPositionObjectSpace</edgelabel>
          <edgelabel>mSceneDepthRange</edgelabel>
          <edgelabel>mFogParams</edgelabel>
          <edgelabel>mLodCameraPositionObjectSpace</edgelabel>
          <edgelabel>mShadowCamDepthRanges</edgelabel>
          <edgelabel>mCameraPosition</edgelabel>
          <edgelabel>mLodCameraPosition</edgelabel>
        </childnode>
        <childnode refid="31761" relation="usage">
          <edgelabel>mCurrentRenderTarget</edgelabel>
        </childnode>
        <childnode refid="31754" relation="usage">
          <edgelabel>mCurrentTextureProjector</edgelabel>
        </childnode>
        <childnode refid="31759" relation="usage">
          <edgelabel>mCurrentViewport</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mCurrentSceneManager</edgelabel>
        </childnode>
        <childnode refid="31744" relation="usage">
          <edgelabel>mBlankLight</edgelabel>
        </childnode>
        <childnode refid="31840" relation="usage">
          <edgelabel>mCurrentPass</edgelabel>
        </childnode>
        <childnode refid="31909" relation="usage">
          <edgelabel>mMainCamBoundsInfo</edgelabel>
        </childnode>
        <childnode refid="31742" relation="usage">
          <edgelabel>mCurrentLightList</edgelabel>
        </childnode>
        <childnode refid="31655" relation="usage">
          <edgelabel>mInverseTransposeWorldMatrix</edgelabel>
          <edgelabel>mViewProjMatrix</edgelabel>
          <edgelabel>mInverseViewMatrix</edgelabel>
          <edgelabel>mProjectionMatrix</edgelabel>
          <edgelabel>mWorldViewProjMatrix</edgelabel>
          <edgelabel>mInverseWorldMatrix</edgelabel>
          <edgelabel>mWorldMatrixArray</edgelabel>
          <edgelabel>mTextureViewProjMatrix</edgelabel>
          <edgelabel>mSpotlightViewProjMatrix</edgelabel>
          <edgelabel>mSpotlightWorldViewProjMatrix</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mCurrentCamera</edgelabel>
        </childnode>
        <childnode refid="31665" relation="usage">
          <edgelabel>mCurrentRenderable</edgelabel>
        </childnode>
      </node>
      <node id="31877">
        <label>Ogre::RenderQueue::RenderQueueGroupMap</label>
        <link refid="classOgre_1_1RenderQueue_1_1RenderQueueGroupMap"/>
        <childnode refid="31878" relation="usage">
          <edgelabel>mGroupVector</edgelabel>
        </childnode>
      </node>
      <node id="31722">
        <label>Ogre::SharedPtr&lt; DataStream &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31723" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31770">
        <label>Ogre::RenderQueueInvocationSequence</label>
        <link refid="classOgre_1_1RenderQueueInvocationSequence"/>
        <childnode refid="31771" relation="public-inheritance">
        </childnode>
        <childnode refid="31772" relation="usage">
          <edgelabel>mInvocations</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
      </node>
      <node id="31905">
        <label>Ogre::vector&lt; InstanceManager * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31646">
        <label>Ogre::map&lt; const Camera *, VisibleObjectsBoundsInfo &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31666">
        <label>Ogre::map&lt; size_t, Vector4 &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31653">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="31894">
        <label>Ogre::ManualObject::TempVertex</label>
        <link refid="structOgre_1_1ManualObject_1_1TempVertex"/>
        <childnode refid="31650" relation="usage">
          <edgelabel>tangent</edgelabel>
          <edgelabel>normal</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>colour</edgelabel>
        </childnode>
        <childnode refid="31893" relation="usage">
          <edgelabel>texCoord</edgelabel>
        </childnode>
      </node>
      <node id="31892">
        <label>std::vector&lt; Vector4, STLAllocator&lt; Vector4, CategorisedAlignAllocPolicy&lt; MEMCATEGORY_GEOMETRY &gt; &gt; &gt;</label>
        <childnode refid="31893" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31747">
        <label>Ogre::SharedPtr&lt; ShadowCameraSetup &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31748" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31669">
        <label>Ogre::SharedPtr&lt; Mesh &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31670" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31709">
        <label>Ogre::SharedPtr&lt; HardwareVertexBuffer &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31710" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31772">
        <label>Ogre::vector&lt; RenderQueueInvocation * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31761">
        <label>Ogre::RenderTarget</label>
        <link refid="classOgre_1_1RenderTarget"/>
        <childnode refid="31762" relation="public-inheritance">
        </childnode>
        <childnode refid="31763" relation="usage">
          <edgelabel>mStats</edgelabel>
        </childnode>
        <childnode refid="31764" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31765" relation="usage">
          <edgelabel>mTimer</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mFSAAHint</edgelabel>
        </childnode>
        <childnode refid="31767" relation="usage">
          <edgelabel>mViewportList</edgelabel>
        </childnode>
        <childnode refid="31768" relation="usage">
          <edgelabel>mDepthBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31888">
        <label>EdgeDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31708">
        <label>Ogre::HardwareVertexBufferSharedPtr</label>
        <link refid="classOgre_1_1HardwareVertexBufferSharedPtr"/>
        <childnode refid="31709" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31800">
        <label>Ogre::Compositor</label>
        <link refid="classOgre_1_1Compositor"/>
        <childnode refid="31671" relation="public-inheritance">
        </childnode>
        <childnode refid="31796" relation="usage">
          <edgelabel>mGlobalTextures</edgelabel>
        </childnode>
        <childnode refid="31801" relation="usage">
          <edgelabel>mTechniques</edgelabel>
          <edgelabel>mSupportedTechniques</edgelabel>
        </childnode>
        <childnode refid="31802" relation="usage">
          <edgelabel>mGlobalMRTs</edgelabel>
        </childnode>
      </node>
      <node id="31710">
        <label>Ogre::HardwareVertexBuffer</label>
        <link refid="classOgre_1_1HardwareVertexBuffer"/>
        <childnode refid="31711" relation="public-inheritance">
        </childnode>
        <childnode refid="31700" relation="usage">
          <edgelabel>mMgr</edgelabel>
        </childnode>
      </node>
      <node id="31823">
        <label>Ogre::SharedPtr&lt; GpuNamedConstants &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31824" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31671">
        <label>Ogre::Resource</label>
        <link refid="classOgre_1_1Resource"/>
        <childnode refid="31672" relation="public-inheritance">
        </childnode>
        <childnode refid="31676" relation="public-inheritance">
        </childnode>
        <childnode refid="31677" relation="usage">
          <edgelabel>mCreator</edgelabel>
        </childnode>
        <childnode refid="31683" relation="usage">
          <edgelabel>mLoader</edgelabel>
        </childnode>
        <childnode refid="31684" relation="usage">
          <edgelabel>mLoadingState</edgelabel>
        </childnode>
        <childnode refid="31685" relation="usage">
          <edgelabel>mListenerList</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mGroup</edgelabel>
          <edgelabel>mOrigin</edgelabel>
        </childnode>
      </node>
      <node id="31718">
        <label>LodAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31716">
        <label>Ogre::vector&lt; SubMesh * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31873">
        <label>Ogre::map&lt; String, AnimationState * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31737">
        <label>Ogre::AnimableObject</label>
        <link refid="classOgre_1_1AnimableObject"/>
        <childnode refid="31661" relation="usage">
          <edgelabel>msAnimableDictionary</edgelabel>
        </childnode>
      </node>
      <node id="31692">
        <label>Ogre::map&lt; String, Animation * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31916">
        <label>Ogre::list&lt; TagPoint * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31754">
        <label>Ogre::Frustum</label>
        <link refid="classOgre_1_1Frustum"/>
        <childnode refid="31735" relation="public-inheritance">
        </childnode>
        <childnode refid="31665" relation="public-inheritance">
        </childnode>
        <childnode refid="31755" relation="usage">
          <edgelabel>mFrustumOffset</edgelabel>
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mWorldSpaceCorners</edgelabel>
          <edgelabel>mLastParentPosition</edgelabel>
        </childnode>
        <childnode refid="31695" relation="usage">
          <edgelabel>mVertexData</edgelabel>
        </childnode>
        <childnode refid="31756" relation="usage">
          <edgelabel>mReflectPlane</edgelabel>
          <edgelabel>mFrustumPlanes</edgelabel>
          <edgelabel>mObliqueProjPlane</edgelabel>
          <edgelabel>mLastLinkedReflectionPlane</edgelabel>
          <edgelabel>mLastLinkedObliqueProjPlane</edgelabel>
        </childnode>
        <childnode refid="31757" relation="usage">
          <edgelabel>mLinkedReflectPlane</edgelabel>
          <edgelabel>mLinkedObliqueProjPlane</edgelabel>
        </childnode>
        <childnode refid="31725" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mBoundingBox</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31655" relation="usage">
          <edgelabel>mProjMatrixRSDepth</edgelabel>
          <edgelabel>mReflectMatrix</edgelabel>
          <edgelabel>mProjMatrix</edgelabel>
          <edgelabel>mProjMatrixRS</edgelabel>
          <edgelabel>mViewMatrix</edgelabel>
        </childnode>
        <childnode refid="31732" relation="usage">
          <edgelabel>mLastParentOrientation</edgelabel>
        </childnode>
        <childnode refid="31758" relation="usage">
          <edgelabel>mFOVy</edgelabel>
        </childnode>
      </node>
      <node id="31654">
        <label>Ogre::set&lt; Node * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31793">
        <label>CompositorInstAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31782">
        <label>Ogre::vector&lt; EntityMaterialLodChangedEvent &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31774">
        <label>Ogre::RenderOperation</label>
        <link refid="classOgre_1_1RenderOperation"/>
        <childnode refid="31775" relation="usage">
          <edgelabel>indexData</edgelabel>
        </childnode>
        <childnode refid="31695" relation="usage">
          <edgelabel>vertexData</edgelabel>
        </childnode>
        <childnode refid="31665" relation="usage">
          <edgelabel>srcRenderable</edgelabel>
        </childnode>
      </node>
      <node id="31887">
        <label>Ogre::EdgeData</label>
        <link refid="classOgre_1_1EdgeData"/>
        <childnode refid="31888" relation="public-inheritance">
        </childnode>
        <childnode refid="31889" relation="usage">
          <edgelabel>triangleLightFacings</edgelabel>
        </childnode>
        <childnode refid="31890" relation="usage">
          <edgelabel>triangles</edgelabel>
        </childnode>
        <childnode refid="31891" relation="usage">
          <edgelabel>edgeGroups</edgelabel>
        </childnode>
        <childnode refid="31892" relation="usage">
          <edgelabel>triangleFaceNormals</edgelabel>
        </childnode>
      </node>
      <node id="31881">
        <label>Ogre::SharedPtr&lt; Texture &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31787" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31705">
        <label>Ogre::map&lt; HardwareVertexBuffer *, VertexBufferLicense &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31786">
        <label>Ogre::map&lt; String, StaticGeometry * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31651">
        <label>Ogre::NameGenerator</label>
        <link refid="classOgre_1_1NameGenerator"/>
        <childnode refid="31652" relation="usage">
          <edgelabel>mPrefix</edgelabel>
        </childnode>
      </node>
      <node id="31733">
        <label>Ogre::WireBoundingBox</label>
        <link refid="classOgre_1_1WireBoundingBox"/>
        <childnode refid="31734" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31880">
        <label>Ogre::TexturePtr</label>
        <link refid="classOgre_1_1TexturePtr"/>
        <childnode refid="31881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31865">
        <label>Ogre::vector&lt; Camera * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31886">
        <label>Ogre::ManualObject::ManualObjectSection</label>
        <link refid="classOgre_1_1ManualObject_1_1ManualObjectSection"/>
        <childnode refid="31665" relation="public-inheritance">
        </childnode>
        <childnode refid="31738" relation="public-inheritance">
        </childnode>
        <childnode refid="31774" relation="usage">
          <edgelabel>mRenderOperation</edgelabel>
        </childnode>
        <childnode refid="31725" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mMaterialName</edgelabel>
          <edgelabel>mGroupName</edgelabel>
        </childnode>
        <childnode refid="31884" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
      </node>
      <node id="31763">
        <label>Ogre::RenderTarget::FrameStats</label>
        <link refid="structOgre_1_1RenderTarget_1_1FrameStats"/>
      </node>
      <node id="31843">
        <label>Ogre::vector&lt; TextureUnitState * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31728">
        <label>Ogre::vector&lt; Real &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31820">
        <label>Ogre::SharedPtr&lt; GpuProgramParameters &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31821" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31719">
        <label>Ogre::AxisAlignedBox</label>
        <link refid="classOgre_1_1AxisAlignedBox"/>
        <childnode refid="31650" relation="usage">
          <edgelabel>mMaximum</edgelabel>
          <edgelabel>mCorners</edgelabel>
          <edgelabel>mMinimum</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>BOX_INFINITE</edgelabel>
          <edgelabel>BOX_NULL</edgelabel>
        </childnode>
      </node>
      <node id="31694">
        <label>Ogre::set&lt; Bone * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31726">
        <label>Ogre::SharedPtr&lt; Material &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31727" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31681">
        <label>Ogre::map&lt; String, ResourcePool * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31824">
        <label>Ogre::GpuNamedConstants</label>
        <link refid="structOgre_1_1GpuNamedConstants"/>
        <childnode refid="31822" relation="public-inheritance">
        </childnode>
        <childnode refid="31825" relation="usage">
          <edgelabel>map</edgelabel>
        </childnode>
      </node>
      <node id="31856">
        <label>Ogre::GpuProgram::CmdSyntax</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdSyntax"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31826">
        <label>Ogre::SharedPtr&lt; GpuLogicalBufferStruct &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31827" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31732">
        <label>Ogre::Quaternion</label>
        <link refid="classOgre_1_1Quaternion"/>
        <childnode refid="31732" relation="usage">
          <edgelabel>IDENTITY</edgelabel>
          <edgelabel>ZERO</edgelabel>
        </childnode>
      </node>
      <node id="31729">
        <label>Ogre::vector&lt; Technique * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31768">
        <label>Ogre::DepthBuffer</label>
        <link refid="classOgre_1_1DepthBuffer"/>
        <childnode refid="31762" relation="public-inheritance">
        </childnode>
        <childnode refid="31769" relation="usage">
          <edgelabel>mAttachedRenderTargets</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mFsaaHint</edgelabel>
        </childnode>
      </node>
      <node id="31871">
        <label>Ogre::AnimationStateSet</label>
        <link refid="classOgre_1_1AnimationStateSet"/>
        <childnode refid="31872" relation="public-inheritance">
        </childnode>
        <childnode refid="31873" relation="usage">
          <edgelabel>mAnimationStates</edgelabel>
        </childnode>
        <childnode refid="31874" relation="usage">
          <edgelabel>mEnabledAnimationStates</edgelabel>
        </childnode>
      </node>
      <node id="31752">
        <label>Ogre::vector&lt; Plane &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31683">
        <label>Ogre::ManualResourceLoader</label>
        <link refid="classOgre_1_1ManualResourceLoader"/>
      </node>
      <node id="31878">
        <label>Ogre::vector&lt; value_type &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31795">
        <label>Ogre::CompositorInstance</label>
        <link refid="classOgre_1_1CompositorInstance"/>
        <childnode refid="31793" relation="public-inheritance">
        </childnode>
        <childnode refid="31796" relation="usage">
          <edgelabel>mLocalTextures</edgelabel>
        </childnode>
        <childnode refid="31795" relation="usage">
          <edgelabel>mPreviousInstance</edgelabel>
        </childnode>
        <childnode refid="31797" relation="usage">
          <edgelabel>mTechnique</edgelabel>
        </childnode>
        <childnode refid="31790" relation="usage">
          <edgelabel>mChain</edgelabel>
        </childnode>
        <childnode refid="31773" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31805" relation="usage">
          <edgelabel>mReserveTextures</edgelabel>
        </childnode>
        <childnode refid="31800" relation="usage">
          <edgelabel>mCompositor</edgelabel>
        </childnode>
        <childnode refid="31802" relation="usage">
          <edgelabel>mLocalMRTs</edgelabel>
        </childnode>
      </node>
      <node id="31673">
        <label>Ogre::ParamDictionary</label>
        <link refid="classOgre_1_1ParamDictionary"/>
        <childnode refid="31674" relation="usage">
          <edgelabel>mParamCommands</edgelabel>
        </childnode>
        <childnode refid="31675" relation="usage">
          <edgelabel>mParamDefs</edgelabel>
        </childnode>
      </node>
      <node id="31805">
        <label>Ogre::map&lt; CompositionTechnique::TextureDefinition *, TexturePtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31685">
        <label>Ogre::set&lt; Listener * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31839">
        <label>Ogre::QueuedRenderableVisitor</label>
        <link refid="classOgre_1_1QueuedRenderableVisitor"/>
      </node>
      <node id="31802">
        <label>Ogre::map&lt; String, MultiRenderTarget * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31840">
        <label>Ogre::Pass</label>
        <link refid="classOgre_1_1Pass"/>
        <childnode refid="31841" relation="public-inheritance">
        </childnode>
        <childnode refid="31842" relation="usage">
          <edgelabel>msHashFunc</edgelabel>
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>mDiffuse</edgelabel>
          <edgelabel>mFogColour</edgelabel>
          <edgelabel>mEmissive</edgelabel>
          <edgelabel>mSpecular</edgelabel>
          <edgelabel>mAmbient</edgelabel>
        </childnode>
        <childnode refid="31843" relation="usage">
          <edgelabel>mTextureUnitStates</edgelabel>
        </childnode>
        <childnode refid="31715" relation="usage">
          <edgelabel>mShadowContentTypeLookup</edgelabel>
        </childnode>
        <childnode refid="31844" relation="usage">
          <edgelabel>mFragmentProgramUsage</edgelabel>
          <edgelabel>mGeometryProgramUsage</edgelabel>
          <edgelabel>mShadowCasterVertexProgramUsage</edgelabel>
          <edgelabel>mShadowReceiverVertexProgramUsage</edgelabel>
          <edgelabel>mShadowReceiverFragmentProgramUsage</edgelabel>
          <edgelabel>mShadowCasterFragmentProgramUsage</edgelabel>
          <edgelabel>mVertexProgramUsage</edgelabel>
        </childnode>
        <childnode refid="31858" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
        <childnode refid="31864" relation="usage">
          <edgelabel>msDirtyHashList</edgelabel>
          <edgelabel>msPassGraveyard</edgelabel>
        </childnode>
        <childnode refid="31656" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
      </node>
      <node id="31836">
        <label>Ogre::map&lt; String, RenderTarget * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31915">
        <label>Ogre::SkeletonInstance</label>
        <link refid="classOgre_1_1SkeletonInstance"/>
        <childnode refid="31689" relation="public-inheritance">
        </childnode>
        <childnode refid="31687" relation="usage">
          <edgelabel>mSkeleton</edgelabel>
        </childnode>
        <childnode refid="31916" relation="usage">
          <edgelabel>mFreeTagPoints</edgelabel>
          <edgelabel>mActiveTagPoints</edgelabel>
        </childnode>
      </node>
      <node id="31898">
        <label>Ogre::SceneQuery</label>
        <link refid="classOgre_1_1SceneQuery"/>
        <childnode refid="31644" relation="public-inheritance">
        </childnode>
        <childnode refid="31899" relation="usage">
          <edgelabel>mSupportedWorldFragments</edgelabel>
        </childnode>
        <childnode refid="31643" relation="usage">
          <edgelabel>mParentSceneMgr</edgelabel>
        </childnode>
      </node>
      <node id="31743">
        <label>std::vector&lt; Light *, STLAllocator&lt; Light *, GeneralAllocPolicy &gt; &gt;</label>
        <childnode refid="31744" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31874">
        <label>Ogre::list&lt; AnimationState * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31884">
        <label>Ogre::ManualObject</label>
        <link refid="classOgre_1_1ManualObject"/>
        <childnode refid="31735" relation="public-inheritance">
        </childnode>
        <childnode refid="31885" relation="usage">
          <edgelabel>mSectionList</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mAABB</edgelabel>
        </childnode>
        <childnode refid="31886" relation="usage">
          <edgelabel>mCurrentSection</edgelabel>
        </childnode>
        <childnode refid="31887" relation="usage">
          <edgelabel>mEdgeList</edgelabel>
        </childnode>
        <childnode refid="31894" relation="usage">
          <edgelabel>mTempVertex</edgelabel>
        </childnode>
      </node>
      <node id="31864">
        <label>std::set&lt; K &gt;</label>
        <childnode refid="31662" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="31657">
        <label>GeneralAllocatedObject</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31712">
        <label>Ogre::VertexBufferBinding</label>
        <link refid="classOgre_1_1VertexBufferBinding"/>
        <childnode refid="31696" relation="public-inheritance">
        </childnode>
        <childnode refid="31713" relation="usage">
          <edgelabel>mBindingMap</edgelabel>
        </childnode>
      </node>
      <node id="31749">
        <label>ShadowDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31857">
        <label>Ogre::GpuProgram::CmdSkeletal</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdSkeletal"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31890">
        <label>Ogre::vector&lt; Triangle &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31868">
        <label>Ogre::vector&lt; LightInfo &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31748">
        <label>Ogre::ShadowCameraSetup</label>
        <link refid="classOgre_1_1ShadowCameraSetup"/>
        <childnode refid="31749" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31727">
        <label>Ogre::Material</label>
        <link refid="classOgre_1_1Material"/>
        <childnode refid="31671" relation="public-inheritance">
        </childnode>
        <childnode refid="31728" relation="usage">
          <edgelabel>mUserLodValues</edgelabel>
          <edgelabel>mLodValues</edgelabel>
        </childnode>
        <childnode refid="31729" relation="usage">
          <edgelabel>mTechniques</edgelabel>
          <edgelabel>mSupportedTechniques</edgelabel>
        </childnode>
        <childnode refid="31717" relation="usage">
          <edgelabel>mLodStrategy</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mUnsupportedReasons</edgelabel>
        </childnode>
        <childnode refid="31730" relation="usage">
          <edgelabel>mBestTechniquesBySchemeList</edgelabel>
        </childnode>
      </node>
      <node id="31698">
        <label>Ogre::VertexDeclaration</label>
        <link refid="classOgre_1_1VertexDeclaration"/>
        <childnode refid="31696" relation="public-inheritance">
        </childnode>
        <childnode refid="31699" relation="usage">
          <edgelabel>mElementList</edgelabel>
        </childnode>
      </node>
      <node id="31670">
        <label>Ogre::Mesh</label>
        <link refid="classOgre_1_1Mesh"/>
        <childnode refid="31671" relation="public-inheritance">
        </childnode>
        <childnode refid="31686" relation="public-inheritance">
        </childnode>
        <childnode refid="31687" relation="usage">
          <edgelabel>mSkeleton</edgelabel>
        </childnode>
        <childnode refid="31695" relation="usage">
          <edgelabel>sharedVertexData</edgelabel>
        </childnode>
        <childnode refid="31692" relation="usage">
          <edgelabel>mAnimationsList</edgelabel>
        </childnode>
        <childnode refid="31714" relation="usage">
          <edgelabel>mPoseList</edgelabel>
        </childnode>
        <childnode refid="31715" relation="usage">
          <edgelabel>sharedBlendIndexToBoneIndexMap</edgelabel>
        </childnode>
        <childnode refid="31716" relation="usage">
          <edgelabel>mSubMeshList</edgelabel>
        </childnode>
        <childnode refid="31717" relation="usage">
          <edgelabel>mLodStrategy</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mAABB</edgelabel>
        </childnode>
        <childnode refid="31720" relation="usage">
          <edgelabel>mBoneAssignments</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mSkeletonName</edgelabel>
        </childnode>
        <childnode refid="31721" relation="usage">
          <edgelabel>mMeshLodUsageList</edgelabel>
        </childnode>
        <childnode refid="31722" relation="usage">
          <edgelabel>mFreshFromDisk</edgelabel>
        </childnode>
      </node>
      <node id="31668">
        <label>Ogre::MeshPtr</label>
        <link refid="classOgre_1_1MeshPtr"/>
        <childnode refid="31669" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31816">
        <label>Ogre::Singleton&lt; TextureManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31815" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31855">
        <label>Ogre::GpuProgram::CmdVTF</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdVTF"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31883">
        <label>Ogre::set&lt; uint8 &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31923">
        <label>Ogre::SceneManager::SkyDomeGenParameters</label>
        <link refid="structOgre_1_1SceneManager_1_1SkyDomeGenParameters"/>
      </node>
      <node id="31740">
        <label>Ogre::MovableObjectFactory</label>
        <link refid="classOgre_1_1MovableObjectFactory"/>
        <childnode refid="31738" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31828">
        <label>Ogre::map&lt; size_t, GpuLogicalIndexUse &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31875">
        <label>Ogre::SceneManager::SkyPlaneGenParameters</label>
        <link refid="structOgre_1_1SceneManager_1_1SkyPlaneGenParameters"/>
      </node>
      <node id="31920">
        <label>Ogre::vector&lt; Entity * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31815">
        <label>Ogre::TextureManager</label>
        <link refid="classOgre_1_1TextureManager"/>
        <childnode refid="31677" relation="public-inheritance">
        </childnode>
        <childnode refid="31816" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31777">
        <label>Ogre::HardwareIndexBufferSharedPtr</label>
        <link refid="classOgre_1_1HardwareIndexBufferSharedPtr"/>
        <childnode refid="31778" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31757">
        <label>Ogre::MovablePlane</label>
        <link refid="classOgre_1_1MovablePlane"/>
        <childnode refid="31756" relation="public-inheritance">
        </childnode>
        <childnode refid="31735" relation="public-inheritance">
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mLastTranslate</edgelabel>
        </childnode>
        <childnode refid="31756" relation="usage">
          <edgelabel>mDerivedPlane</edgelabel>
        </childnode>
        <childnode refid="31719" relation="usage">
          <edgelabel>mNullBB</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31732" relation="usage">
          <edgelabel>mLastRotate</edgelabel>
        </childnode>
      </node>
      <node id="31882">
        <label>Ogre::vector&lt; size_t &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31775">
        <label>Ogre::IndexData</label>
        <link refid="classOgre_1_1IndexData"/>
        <childnode refid="31776" relation="public-inheritance">
        </childnode>
        <childnode refid="31777" relation="usage">
          <edgelabel>indexBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31841">
        <label>PassAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31649">
        <label>NodeAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31648">
        <label>Ogre::Node</label>
        <link refid="classOgre_1_1Node"/>
        <childnode refid="31649" relation="public-inheritance">
        </childnode>
        <childnode refid="31650" relation="usage">
          <edgelabel>mInitialScale</edgelabel>
          <edgelabel>mInitialPosition</edgelabel>
          <edgelabel>mPosition</edgelabel>
          <edgelabel>mDerivedPosition</edgelabel>
          <edgelabel>mDerivedScale</edgelabel>
          <edgelabel>mScale</edgelabel>
        </childnode>
        <childnode refid="31648" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31651" relation="usage">
          <edgelabel>msNameGenerator</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
        <childnode refid="31654" relation="usage">
          <edgelabel>mChildrenToUpdate</edgelabel>
        </childnode>
        <childnode refid="31655" relation="usage">
          <edgelabel>mCachedTransform</edgelabel>
        </childnode>
        <childnode refid="31656" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
        <childnode refid="31664" relation="usage">
          <edgelabel>mDebug</edgelabel>
        </childnode>
        <childnode refid="31731" relation="usage">
          <edgelabel>mListener</edgelabel>
        </childnode>
        <childnode refid="31732" relation="usage">
          <edgelabel>mInitialOrientation</edgelabel>
          <edgelabel>mDerivedOrientation</edgelabel>
          <edgelabel>mOrientation</edgelabel>
        </childnode>
      </node>
      <node id="31675">
        <label>Ogre::vector&lt; ParameterDef &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31827">
        <label>Ogre::GpuLogicalBufferStruct</label>
        <link refid="structOgre_1_1GpuLogicalBufferStruct"/>
        <childnode refid="31822" relation="public-inheritance">
        </childnode>
        <childnode refid="31828" relation="usage">
          <edgelabel>map</edgelabel>
        </childnode>
      </node>
      <node id="31848">
        <label>Ogre::GpuProgram</label>
        <link refid="classOgre_1_1GpuProgram"/>
        <childnode refid="31671" relation="public-inheritance">
        </childnode>
        <childnode refid="31823" relation="usage">
          <edgelabel>mConstantDefs</edgelabel>
        </childnode>
        <childnode refid="31826" relation="usage">
          <edgelabel>mIntLogicalToPhysical</edgelabel>
          <edgelabel>mFloatLogicalToPhysical</edgelabel>
        </childnode>
        <childnode refid="31849" relation="usage">
          <edgelabel>msManNamedConstsFileCmd</edgelabel>
        </childnode>
        <childnode refid="31851" relation="usage">
          <edgelabel>msAdjacencyCmd</edgelabel>
        </childnode>
        <childnode refid="31852" relation="usage">
          <edgelabel>msPoseCmd</edgelabel>
        </childnode>
        <childnode refid="31820" relation="usage">
          <edgelabel>mDefaultParams</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mSyntaxCode</edgelabel>
          <edgelabel>mSource</edgelabel>
          <edgelabel>mFilename</edgelabel>
          <edgelabel>mManualNamedConstantsFile</edgelabel>
        </childnode>
        <childnode refid="31853" relation="usage">
          <edgelabel>msMorphCmd</edgelabel>
        </childnode>
        <childnode refid="31854" relation="usage">
          <edgelabel>msTypeCmd</edgelabel>
        </childnode>
        <childnode refid="31855" relation="usage">
          <edgelabel>msVTFCmd</edgelabel>
        </childnode>
        <childnode refid="31856" relation="usage">
          <edgelabel>msSyntaxCmd</edgelabel>
        </childnode>
        <childnode refid="31857" relation="usage">
          <edgelabel>msSkeletalCmd</edgelabel>
        </childnode>
      </node>
      <node id="31850">
        <label>Ogre::ParamCommand</label>
        <link refid="classOgre_1_1ParamCommand"/>
      </node>
      <node id="31849">
        <label>Ogre::GpuProgram::CmdManualNamedConstsFile</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdManualNamedConstsFile"/>
        <childnode refid="31850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31808">
        <label>Ogre::RenderQueueListener</label>
        <link refid="classOgre_1_1RenderQueueListener"/>
      </node>
      <node id="31860">
        <label>Ogre::vector&lt; IlluminationPass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31788">
        <label>Ogre::map&lt; String, Camera * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31687">
        <label>Ogre::SkeletonPtr</label>
        <link refid="classOgre_1_1SkeletonPtr"/>
        <childnode refid="31688" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31765">
        <label>Ogre::Timer</label>
        <link refid="classOgre_1_1Timer"/>
        <childnode refid="31766" relation="public-inheritance">
        </childnode>
        <childnode refid="31766" relation="public-inheritance">
        </childnode>
        <childnode refid="31766" relation="public-inheritance">
        </childnode>
        <childnode refid="31766" relation="public-inheritance">
        </childnode>
        <childnode refid="31766" relation="public-inheritance">
        </childnode>
        <childnode refid="31766" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31704">
        <label>Ogre::multimap&lt; HardwareVertexBuffer *, HardwareVertexBufferSharedPtr &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="31889">
        <label>Ogre::vector&lt; char &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31891">
        <label>Ogre::vector&lt; EdgeGroup &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31846">
        <label>Ogre::GpuProgramPtr</label>
        <link refid="classOgre_1_1GpuProgramPtr"/>
        <childnode refid="31847" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31798">
        <label>Ogre::CompositionTargetPass</label>
        <link refid="classOgre_1_1CompositionTargetPass"/>
        <childnode refid="31793" relation="public-inheritance">
        </childnode>
        <childnode refid="31797" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mOutputName</edgelabel>
          <edgelabel>mMaterialScheme</edgelabel>
        </childnode>
        <childnode refid="31799" relation="usage">
          <edgelabel>mPasses</edgelabel>
        </childnode>
      </node>
      <node id="31665">
        <label>Ogre::Renderable</label>
        <link refid="classOgre_1_1Renderable"/>
        <childnode refid="31666" relation="usage">
          <edgelabel>mCustomParameters</edgelabel>
        </childnode>
        <childnode refid="31667" relation="usage">
          <edgelabel>mRenderSystemData</edgelabel>
        </childnode>
        <childnode refid="31656" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
      </node>
      <node id="31721">
        <label>Ogre::vector&lt; MeshLodUsage &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31711">
        <label>Ogre::HardwareBuffer</label>
        <link refid="classOgre_1_1HardwareBuffer"/>
        <childnode refid="31701" relation="public-inheritance">
        </childnode>
        <childnode refid="31711" relation="usage">
          <edgelabel>mShadowBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31769">
        <label>Ogre::set&lt; RenderTarget * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31914">
        <label>Ogre::map&lt; String, MovableObject * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31791">
        <label>Ogre::RenderTargetListener</label>
        <link refid="classOgre_1_1RenderTargetListener"/>
      </node>
      <node id="31831">
        <label>Ogre::vector&lt; int &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31783">
        <label>Ogre::vector&lt; MovableObjectLodChangedEvent &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31759">
        <label>Ogre::Viewport</label>
        <link refid="classOgre_1_1Viewport"/>
        <childnode refid="31760" relation="public-inheritance">
        </childnode>
        <childnode refid="31746" relation="usage">
          <edgelabel>mBackColour</edgelabel>
        </childnode>
        <childnode refid="31761" relation="usage">
          <edgelabel>mTarget</edgelabel>
        </childnode>
        <childnode refid="31770" relation="usage">
          <edgelabel>mRQSequence</edgelabel>
        </childnode>
        <childnode refid="31773" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mMaterialSchemeName</edgelabel>
          <edgelabel>mRQSequenceName</edgelabel>
        </childnode>
        <childnode refid="31753" relation="usage">
          <edgelabel>mCamera</edgelabel>
        </childnode>
      </node>
      <node id="31750">
        <label>Ogre::map&lt; uint16, Vector4 &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31872">
        <label>AnimationAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31844">
        <label>Ogre::GpuProgramUsage</label>
        <link refid="classOgre_1_1GpuProgramUsage"/>
        <childnode refid="31845" relation="public-inheritance">
        </childnode>
        <childnode refid="31841" relation="public-inheritance">
        </childnode>
        <childnode refid="31820" relation="usage">
          <edgelabel>mParameters</edgelabel>
        </childnode>
        <childnode refid="31840" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31846" relation="usage">
          <edgelabel>mProgram</edgelabel>
        </childnode>
      </node>
      <node id="31845">
        <label>Ogre::Resource::Listener</label>
        <link refid="classOgre_1_1Resource_1_1Listener"/>
      </node>
      <node id="31695">
        <label>Ogre::VertexData</label>
        <link refid="classOgre_1_1VertexData"/>
        <childnode refid="31696" relation="public-inheritance">
        </childnode>
        <childnode refid="31697" relation="usage">
          <edgelabel>hwAnimationDataList</edgelabel>
        </childnode>
        <childnode refid="31698" relation="usage">
          <edgelabel>vertexDeclaration</edgelabel>
        </childnode>
        <childnode refid="31700" relation="usage">
          <edgelabel>mMgr</edgelabel>
        </childnode>
        <childnode refid="31708" relation="usage">
          <edgelabel>hardwareShadowVolWBuffer</edgelabel>
        </childnode>
        <childnode refid="31712" relation="usage">
          <edgelabel>vertexBufferBinding</edgelabel>
        </childnode>
      </node>
      <node id="31678">
        <label>Ogre::ScriptLoader</label>
        <link refid="classOgre_1_1ScriptLoader"/>
      </node>
      <node id="31863">
        <label>Ogre::vector&lt; Pass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31672">
        <label>Ogre::StringInterface</label>
        <link refid="classOgre_1_1StringInterface"/>
        <childnode refid="31661" relation="usage">
          <edgelabel>msDictionary</edgelabel>
        </childnode>
        <childnode refid="31673" relation="usage">
          <edgelabel>mParamDict</edgelabel>
        </childnode>
        <childnode refid="31652" relation="usage">
          <edgelabel>mParamDictName</edgelabel>
        </childnode>
      </node>
      <node id="31862">
        <label>Ogre::vector&lt; GPUDeviceNameRule &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31904">
        <label>Ogre::vector&lt; ShadowCaster * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31794">
        <label>Ogre::vector&lt; CompositorInstance * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31773">
        <label>Ogre::vector&lt; Listener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31837">
        <label>Ogre::vector&lt; TargetOperation &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31713">
        <label>Ogre::map&lt; unsigned short, HardwareVertexBufferSharedPtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31652">
        <label>std::string</label>
        <childnode refid="31653" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31792">
        <label>Ogre::Viewport::Listener</label>
        <link refid="classOgre_1_1Viewport_1_1Listener"/>
      </node>
      <node id="31736">
        <label>Ogre::ShadowCaster</label>
        <link refid="classOgre_1_1ShadowCaster"/>
      </node>
      <node id="31906">
        <label>Ogre::map&lt; String, MovableObjectCollection * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31909">
        <label>Ogre::VisibleObjectsBoundsInfo</label>
        <link refid="structOgre_1_1VisibleObjectsBoundsInfo"/>
        <childnode refid="31719" relation="usage">
          <edgelabel>aabb</edgelabel>
          <edgelabel>receiverAabb</edgelabel>
        </childnode>
      </node>
      <node id="31767">
        <label>Ogre::map&lt; int, Viewport * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
    </collaborationgraph>
    <location file="/home/david/workspace/Mogre/include/OgreSceneManager.h" line="141" bodyfile="/home/david/workspace/Mogre/include/OgreSceneManager.h" bodystart="140" bodyend="3545"/>
    <listofallmembers>
      <member refid="classOgre_1_1SceneManager_1a8cd474a0bb93c6fa0e4439a5a7d11c63" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_addDirtyInstanceManager</name></member>
      <member refid="classOgre_1_1SceneManager_1a58019e4c5104af4fe19d483fb1deec91" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_applySceneAnimations</name></member>
      <member refid="classOgre_1_1SceneManager_1af94f21965555436d24e715d2408fbb06" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_areRenderStateChangesSuppressed</name></member>
      <member refid="classOgre_1_1SceneManager_1a832e91f368f91e727dd2386cc00e7485" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_areShadowsSuppressed</name></member>
      <member refid="classOgre_1_1SceneManager_1abd51f4629d00ff23f5064c0d2ab37647" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_findVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a3c780a67172337a28cfe02bb300a786f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_getActiveCompositorChain</name></member>
      <member refid="classOgre_1_1SceneManager_1a4ac70da4acb59963d90d58b0b76814e1" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_getCombinedVisibilityMask</name></member>
      <member refid="classOgre_1_1SceneManager_1a62876dcdf7cb0f7923de88e62cf077ac" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_getLightsAffectingFrustum</name></member>
      <member refid="classOgre_1_1SceneManager_1a4e9e8558a06d7bf26eadf349731f1cb3" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_getLightsDirtyCounter</name></member>
      <member refid="classOgre_1_1SceneManager_1a72e39912a34617ffa0455f859ec438c3" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_handleLodEvents</name></member>
      <member refid="classOgre_1_1SceneManager_1a502e470a4b59819fcb0578ee0509ca6c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_injectRenderWithPass</name></member>
      <member refid="classOgre_1_1SceneManager_1ac631d25ab65e821544835bfa1b507fc2" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_markGpuParamsDirty</name></member>
      <member refid="classOgre_1_1SceneManager_1aae9af47cfe8ae3184744e9d19d73341f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_notifyAutotrackingSceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a272d1a76e7854e51f824f0099a4910cf" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_notifyEntityMaterialLodChanged</name></member>
      <member refid="classOgre_1_1SceneManager_1ad0a84e6426cad7dfd721fb5fccd9976c" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_notifyEntityMeshLodChanged</name></member>
      <member refid="classOgre_1_1SceneManager_1aebfa8b61550010c86fc3b605e2cda669" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_notifyLightsDirty</name></member>
      <member refid="classOgre_1_1SceneManager_1ae4b6a7748dc4273fd6c160fb162c544f" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>_notifyMovableObjectLodChanged</name></member>
      <member refid="classOgre_1_1SceneManager_1a2392e8d6a6849a4fa1839a085733a695" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_pauseRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1a165307402bd2bfca5b1f57e08220a739" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_populateLightList</name></member>
      <member refid="classOgre_1_1SceneManager_1a8390862f435cfe5285abf94955534334" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_populateLightList</name></member>
      <member refid="classOgre_1_1SceneManager_1a85f817bd7ceae5bb1601b9b838eaff80" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_queueSkiesForRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1ae738d9a6259878ba16d0153539d3f7f8" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_renderQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a29ba8a2cad151d307d04781f749e7e84" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_renderScene</name></member>
      <member refid="classOgre_1_1SceneManager_1aa4714d027f9718bce87783bcca19f595" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_renderVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a27f763bb92fef8b1238e2272889ba58d" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_resumeRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1a6673b2d01966b52e13b17451935f5b34" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_setActiveCompositorChain</name></member>
      <member refid="classOgre_1_1SceneManager_1ab20c0ee49a853145d3350e6e32c59f32" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_setDestinationRenderSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1a90c2bebde23c88f9946e80627724ca44" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_setPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a1dd29bf89d777d7c2b032ebffca7e8d5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_setSkyBox</name></member>
      <member refid="classOgre_1_1SceneManager_1aa6eea5fcfe5a6210a5db044e14a525f8" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_setSkyDome</name></member>
      <member refid="classOgre_1_1SceneManager_1a1791ac4fbc202fbea7247f236b363fa4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_setSkyPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a6753ea2b52715774b7fdd59da232917a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_suppressRenderStateChanges</name></member>
      <member refid="classOgre_1_1SceneManager_1a63644515ee55a20f31979e94eb227a1c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_suppressShadows</name></member>
      <member refid="classOgre_1_1SceneManager_1a24ad98304368771d852a5ef62eb8d277" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>_updateSceneGraph</name></member>
      <member refid="classOgre_1_1SceneManager_1a6b54e34b6a8e72d4c1456bda016731ad" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>addListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a2ac761cb112de51be26c54609de3c83a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>addLodListener</name></member>
      <member refid="classOgre_1_1SceneManager_1ab73819442f7f3540f52431064e6b1a97" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>addRenderObjectListener</name></member>
      <member refid="classOgre_1_1SceneManager_1ae60242c5d130f884cd605d3393186df6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>addRenderQueueListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a80869e48b56b0c02a52e9027cad26fa7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>addSpecialCaseRenderQueue</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a366445eb206e55a2199267b8b9089ebb" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>AllocatedObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a3a720414f68274bb9c5026911e27135d" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>AnimationIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1ad7cf782d8eb1d5b902348c722c9f4bec" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>AnimationList</name></member>
      <member refid="classOgre_1_1SceneManager_1a43d83785d6d6b6ee36aa2d1b9d7576f2" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>AutoTrackingSceneNodes</name></member>
      <member refid="classOgre_1_1SceneManager_1a87d96c7d08e61a0661bf7d786b893652" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>bindGpuProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BoxPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960acfc07f1de74ca1a396f1d82a2d1c9c5e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BP_BACK</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a70e022fc77f94d5144db297d00effd67" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BP_DOWN</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960aad0dc80ea2675cc30bca626042fa78c4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BP_FRONT</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a09545bd5ad791db9589669756be1a280" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BP_LEFT</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a61400b6126b1da4e3ceaade1f1db7b56" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BP_RIGHT</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ff1f0a66a642f96927361029d397960a4547263fba7fb6507a3ea251f72d8f14" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>BP_UP</name></member>
      <member refid="classOgre_1_1SceneManager_1a386586877ecf98bd688954e18b2a47e8" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>buildAndSetLightClip</name></member>
      <member refid="classOgre_1_1SceneManager_1ab83baf07ebcc68e41b403f2126105f69" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>buildAndSetScissor</name></member>
      <member refid="classOgre_1_1SceneManager_1ab951496f7dff614730c5b59a8e9bae91" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>buildLightClip</name></member>
      <member refid="classOgre_1_1SceneManager_1a03ab7a77952100672c2191f74b898f72" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>buildScissor</name></member>
      <member refid="classOgre_1_1SceneManager_1a22fcb8a9ddb7efe79d053a975a685111" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>CameraIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1aab859720031b39ec11a526ddfabcb8dd" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>CameraList</name></member>
      <member refid="classOgre_1_1SceneManager_1acb0316a267f0f8fb7e79ff68a0e8d71d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>CamVisibleObjectsMap</name></member>
      <member refid="classOgre_1_1SceneManager_1a2ce3efd7c504bcf7c1f0699e069118c2" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>checkCachedLightClippingInfo</name></member>
      <member refid="classOgre_1_1SceneManager_1aa5b2047b5740b691b0e636d57f2dba7e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>clearScene</name></member>
      <member refid="classOgre_1_1SceneManager_1acfc2cc0a7f105a068603955c4dbbe3c4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>clearSpecialCaseRenderQueues</name></member>
      <member refid="classOgre_1_1SceneManager_1aacbb49cc9b31adb40d3bbddc8f51d89a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createAABBQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1a8ffb7989a0db906222663ff2d34317ea" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createAnimation</name></member>
      <member refid="classOgre_1_1SceneManager_1a3e060f962b38c9e9f43f8618ff652ea3" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createAnimationState</name></member>
      <member refid="classOgre_1_1SceneManager_1af9654870f0601526d98af8642546b1a0" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>createAutoParamDataSource</name></member>
      <member refid="classOgre_1_1SceneManager_1ad0380187a8c572e303c93a64b3355062" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createBillboardChain</name></member>
      <member refid="classOgre_1_1SceneManager_1a61270f12b245fda43af0b3cedcc47675" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createBillboardChain</name></member>
      <member refid="classOgre_1_1SceneManager_1ae4d6f699a273cf16a8ce09757ebf8baf" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createBillboardSet</name></member>
      <member refid="classOgre_1_1SceneManager_1a16d4d4d154cab4d3a85b3b67f9061fb7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createBillboardSet</name></member>
      <member refid="classOgre_1_1SceneManager_1a62ca781b4c6d23dc3aab1f3a45d61843" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createCamera</name></member>
      <member refid="classOgre_1_1SceneManager_1a7bf9c5edb0ae3105c546bcad39252874" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a8a69b7bb117db898c36da180d21b5856" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a747f27e6b51d98b2dfc1adf1b9d2f17e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1abf306f7a1ff7278cb71eacb374468797" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a9d9c135f1e3fe85db6e1976f1df3fb35" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1af9f7e37d5381c774312665b64ff5fee4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a7aad430f2aa0333e19317a895fbc2918" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createInstancedEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1aaf98f349389bbdd1c3fb25c418e56887" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createInstancedGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a5192bd4a4b82ac04c8ea59d4549d5419" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createInstanceManager</name></member>
      <member refid="classOgre_1_1SceneManager_1a82b0c69188695880a693df4e6392ebba" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createIntersectionQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1ab127d52207729591dd51cb12a5b2ed2c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a417bdd216730a8d171c3184b0d49c32e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a680ab7ccb241680100bfeea73681cce6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createManualObject</name></member>
      <member refid="classOgre_1_1SceneManager_1af33c7c5188fb92701aad60b24e236e5c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createManualObject</name></member>
      <member refid="classOgre_1_1SceneManager_1aedbccf093ce9ee7c4db9d59d9344bc94" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a904a81ccbdaa6eba08bd7ee3521df415" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a1ccfcf067b098ce531f16998e1bbe275" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1a62589dc6a7f70e5efdbf5ebd7a282ea9" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1aa0d79919af93bf827cf8185930dd2a5f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1acc61e987518b30805120ac4009b5dd33" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createPlaneBoundedVolumeQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1a95a6c54fd3bf3e9a3c4d16cc7dc67d5c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createRayQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1ac4edb21cec1bb77f7a003c506f344652" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createRibbonTrail</name></member>
      <member refid="classOgre_1_1SceneManager_1ac6675774a4f13b588c1b75e9fcee440f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createRibbonTrail</name></member>
      <member refid="classOgre_1_1SceneManager_1ab31f9c018b801240c238c7a048439150" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a73c42645ea3b064ca6e0822a8f702cd4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a905eb9adbd3854d84a50c08fc4937e12" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSceneNodeImpl</name></member>
      <member refid="classOgre_1_1SceneManager_1af645abf4f922c75b0fd33fe2ddf784d5" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSceneNodeImpl</name></member>
      <member refid="classOgre_1_1SceneManager_1a8b94645301bb83f4738c67407bcd9ec3" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSkyboxPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a65f806d3666e63f14e996e3d79e508a8" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSkydomePlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a40730811207d2a7ef8f8fc0c3fda8b91" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createSphereQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1a552d1695774ca8f8da355ef0f11be86c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>createStaticGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a29de6edd7b7dc562ad54c167c1a8d5af" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>deriveShadowCasterPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a90a6c5e9740c233a2c32443eb4bf1345" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>deriveShadowReceiverPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a019a31618f2285f79be2b414488c04c3" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllAnimations</name></member>
      <member refid="classOgre_1_1SceneManager_1aa60a84672be1f532323cdb5dbfdc2c66" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllAnimationStates</name></member>
      <member refid="classOgre_1_1SceneManager_1a2c01b8c2d82759fb875089c93df491a4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllBillboardChains</name></member>
      <member refid="classOgre_1_1SceneManager_1a62742f3922523e75b72f6e8303fea251" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllBillboardSets</name></member>
      <member refid="classOgre_1_1SceneManager_1a9cb93862284e7443b94eaabdef21564a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllCameras</name></member>
      <member refid="classOgre_1_1SceneManager_1a1a77be68ccbfc90e2e1aed04340db4dc" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllEntities</name></member>
      <member refid="classOgre_1_1SceneManager_1abe13b71355bfe6d93303bdb73b458007" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllInstancedGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a2b116e020a220d8275508252f704ed6d" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllInstanceManagers</name></member>
      <member refid="classOgre_1_1SceneManager_1a723da9119c26f5022e3a2818611e9aa0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllLights</name></member>
      <member refid="classOgre_1_1SceneManager_1ab3e151b6d94feb6648b8c817ba485238" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllManualObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1af985062a80dbc20d8fe523be166ecca6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllMovableObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a8aca5477f30dd55321a101f25c6a5ee2" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllMovableObjectsByType</name></member>
      <member refid="classOgre_1_1SceneManager_1a98dbd81cd9867b1032e02e1780b6eb49" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllParticleSystems</name></member>
      <member refid="classOgre_1_1SceneManager_1a12e41109a26094ffe128beb5b6898f95" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllRibbonTrails</name></member>
      <member refid="classOgre_1_1SceneManager_1a64f54ea048af80532212c8f60bea95d6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAllStaticGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a7ac4e76d36c8f059d7389bf1233563b5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAnimation</name></member>
      <member refid="classOgre_1_1SceneManager_1a22a3f58bff113aaac870c18741f7cd76" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyAnimationState</name></member>
      <member refid="classOgre_1_1SceneManager_1a98bc20d44752f40fd588f0ba91e4a904" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyBillboardChain</name></member>
      <member refid="classOgre_1_1SceneManager_1a149fafd649d4b9ebb34fa7467314640f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyBillboardChain</name></member>
      <member refid="classOgre_1_1SceneManager_1a86252d84802cb54bba22bd8ed87d84f0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyBillboardSet</name></member>
      <member refid="classOgre_1_1SceneManager_1a56ecce16952d08b045e500d28981d307" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyBillboardSet</name></member>
      <member refid="classOgre_1_1SceneManager_1acac58e45f8b6b6826c81933f02a45046" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyCamera</name></member>
      <member refid="classOgre_1_1SceneManager_1a41b9358cdad6fd7113b2a0cad8112f67" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyCamera</name></member>
      <member refid="classOgre_1_1SceneManager_1aaec976bb28961a149c71a5eba62f40e4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a3e19d4a7d848a745a59e63fca36fa79c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a2a4d87f4fda0a5b495890705a02b3cad" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyInstancedEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a18bca397484fe3ba8ae396a959043e00" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyInstancedGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a54a8d0104ab73e3421e16dc316ea15fc" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyInstancedGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a89f3b77eab9eca1d434047a4177f162a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyInstanceManager</name></member>
      <member refid="classOgre_1_1SceneManager_1a53e13b78f8d3ef5dc15de63596e7313c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyInstanceManager</name></member>
      <member refid="classOgre_1_1SceneManager_1aef6d26cb64e7a1984ebff9b56c45c6e5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyLight</name></member>
      <member refid="classOgre_1_1SceneManager_1acce173aa89e849bda564f4e6e3be6402" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a75d15c3ac882f78f0001d9d007f403be" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyManualObject</name></member>
      <member refid="classOgre_1_1SceneManager_1ad42dfd20473e780251db4e939d7668d0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyManualObject</name></member>
      <member refid="classOgre_1_1SceneManager_1acac42f73eb41692a098bf31f1401d7e7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a32a135e382bac33ecd42f946713e2f38" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1abde401fcf3796e3e2beb8c7603648f07" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1abb127ba7b98f3892426d4f55abd2a953" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1a08f7adf5f342c6808481fa922c8c62a0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1af9c802d5f62e0c7b807dad407e47b97e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyRibbonTrail</name></member>
      <member refid="classOgre_1_1SceneManager_1a6e86cea62012449c98c7afa14c241d78" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyRibbonTrail</name></member>
      <member refid="classOgre_1_1SceneManager_1a813346e505716ae5d24f714cfc4a5069" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroySceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1aa613e5ffb08b95a90644a61ac10c9b5c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroySceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1aee58adae03ba713cc72c4ec59d8b1333" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyShadowTextures</name></member>
      <member refid="classOgre_1_1SceneManager_1a54d553be3f6098ce229e6db53ec15227" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyStaticGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1ae4f180b40f4bf55669f9842fe922a003" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>destroyStaticGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a901dc44fa7930877825f7be4b43006cd" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>ensureShadowTexturesCreated</name></member>
      <member refid="classOgre_1_1SceneManager_1a43d0ee887419ee93d24975b906eb2783" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>ENTITY_TYPE_MASK</name></member>
      <member refid="classOgre_1_1SceneManager_1a2903a625b8aa2027c3225c326b03b7b4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>EntityMaterialLodChangedEventList</name></member>
      <member refid="classOgre_1_1SceneManager_1ac318fd8481f0f7f0e2cbed44616a680d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>EntityMeshLodChangedEventList</name></member>
      <member refid="classOgre_1_1SceneManager_1a1257fd328d54908eeb45398b3191f92b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>estimateWorldGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1aeeea65a3bf511e82a9b59ba31b96e98f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>estimateWorldGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a1c55f5e97c66261de71c979db64f6355" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>extractAllMovableObjectsByType</name></member>
      <member refid="classOgre_1_1SceneManager_1a6d14c16852b08107db556a180e61d7a1" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>extractMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a874431ce04c34fa6dcbdb2ed1420b168" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>extractMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a9b47cb96d4c8daf13ad13f2cefdfb84f" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>findLightsAffectingFrustum</name></member>
      <member refid="classOgre_1_1SceneManager_1a79519a81dcd7a50402859133216f00f2" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>findShadowCastersForLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a71e96e9151e3d83f39917ecb1592ab8c" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>firePostFindVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1ace01035f6ad12c44cefe77ad6f922354" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>firePostRenderQueues</name></member>
      <member refid="classOgre_1_1SceneManager_1a83da77c2df87d5f4e42c06947d47bbc9" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>firePostUpdateSceneGraph</name></member>
      <member refid="classOgre_1_1SceneManager_1a63d643fd58fb678a1eebdd1545056b6f" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>firePreFindVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a443630f076a0547738c39e0f7b6624f6" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>firePreRenderQueues</name></member>
      <member refid="classOgre_1_1SceneManager_1afda1cb119dc3c90721e6612c8b597ceb" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>firePreUpdateSceneGraph</name></member>
      <member refid="classOgre_1_1SceneManager_1a48c65f5fdd8d9d631889585d82fe8ab9" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireRenderQueueEnded</name></member>
      <member refid="classOgre_1_1SceneManager_1a4e8e0def255fee437b420774354f1371" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireRenderQueueStarted</name></member>
      <member refid="classOgre_1_1SceneManager_1a42fbdf3cd2148ed224e9c22f9cfa0476" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireRenderSingleObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a4293bcc808bd4911307fd5ca60c52965" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireSceneManagerDestroyed</name></member>
      <member refid="classOgre_1_1SceneManager_1ad338a97ae6e0079466dcd3a94e0193bd" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireShadowTexturesPreCaster</name></member>
      <member refid="classOgre_1_1SceneManager_1a387b7d13cc8d2cb01f70066d6f10b359" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireShadowTexturesPreReceiver</name></member>
      <member refid="classOgre_1_1SceneManager_1ad5f565ed419ccb8ab372a0f708e32f68" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>fireShadowTexturesUpdated</name></member>
      <member refid="classOgre_1_1SceneManager_1ae0f8858848acb8c595f495db753facb9" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>FRUSTUM_TYPE_MASK</name></member>
      <member refid="classOgre_1_1SceneManager_1ac036d861c2df264375b88e9f3a407b1e" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>FX_TYPE_MASK</name></member>
      <member refid="classOgre_1_1SceneManager_1ad4b5b77723e26e8ceb995f84b7fcade5" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getAmbientLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a7ba18a3e34e9ee8c286b6b4dfff42011" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getAnimation</name></member>
      <member refid="classOgre_1_1SceneManager_1ab28450738168fe330709ad0d090df6b5" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getAnimationIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1af3612471fc74a2fff529225938145ac6" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getAnimations</name></member>
      <member refid="classOgre_1_1SceneManager_1ae4d6cc4ff860b1e8f73ec9d3a9a960a9" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getAnimationState</name></member>
      <member refid="classOgre_1_1SceneManager_1a39bf64e686d94b6856d3ff06d627b61c" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getAnimationStateIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1a0667cd1101c4d3e56302b8f82132986b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getBillboardChain</name></member>
      <member refid="classOgre_1_1SceneManager_1af244f7e07456f6ababa2fa97399627fd" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getBillboardSet</name></member>
      <member refid="classOgre_1_1SceneManager_1a4dbe2eeec924f88c30010e9fd4d9da0e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getCamera</name></member>
      <member refid="classOgre_1_1SceneManager_1a02d7d29cc4bc8ee4cbe40d16a984291c" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getCameraIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1a8aaf50983e9000284a8eed93a51353bc" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getCameraRelativeRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1a5057cd79d387a9c044e50e5f50702843" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getCameras</name></member>
      <member refid="classOgre_1_1SceneManager_1a6e2c9ea54992be4b4729ab6243ed3e3a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getCurrentViewport</name></member>
      <member refid="classOgre_1_1SceneManager_1aa5ed3c081ae69e90569fd0c2727a34df" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getDestinationRenderSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1aabe2da637fd725bf8326c662a019f4d3" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getDisplaySceneNodes</name></member>
      <member refid="classOgre_1_1SceneManager_1a0d7e8374bd4774284ec6adfbd286ddbc" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a3d7d7f344e528eea2e99481247de72c7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFindVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1abf5b90fccee3356293e5335265a2ea29" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFlipCullingOnNegativeScale</name></member>
      <member refid="classOgre_1_1SceneManager_1a306704e4889173ad708e1d0f5d7e3930" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFogColour</name></member>
      <member refid="classOgre_1_1SceneManager_1a251033c27ac5d12c4f9bb2eee43b4d6a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFogDensity</name></member>
      <member refid="classOgre_1_1SceneManager_1a685fdcd7904870ecff70e6cf7e962ca4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFogEnd</name></member>
      <member refid="classOgre_1_1SceneManager_1a361b6c81efb56c75fd70b5c6e357c3b3" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFogMode</name></member>
      <member refid="classOgre_1_1SceneManager_1ab1a6c6d9e62244cf7b179920241d1f60" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getFogStart</name></member>
      <member refid="classOgre_1_1SceneManager_1a2b2a069b6fd8b7e49f70d7384f96a7f4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getInstancedGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1aefa17f628da7ea07a48e485c4d5f2295" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getInstanceManager</name></member>
      <member refid="classOgre_1_1SceneManager_1af128cc414af001b325d40745b745b79c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getLight</name></member>
      <member refid="classOgre_1_1SceneManager_1abd89ebb9c348ed8230ad300ef7501948" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getLightClippingPlanes</name></member>
      <member refid="classOgre_1_1SceneManager_1a384b7ee3a28ba87866c68d689571aa8f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getLightScissorRect</name></member>
      <member refid="classOgre_1_1SceneManager_1a3c5eb0c8dd2cedf713d7309d74daf83a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getManualObject</name></member>
      <member refid="classOgre_1_1SceneManager_1af30f35e9d9630ae360fbf5a9de136452" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a0828a3d2858e75cc6dfe10ff793595a0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getMovableObjectCollection</name></member>
      <member refid="classOgre_1_1SceneManager_1ad4983c85839779400c8ac52cb3ef724c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getMovableObjectCollection</name></member>
      <member refid="classOgre_1_1SceneManager_1af19c32fbc0adc0fa28d8e6c26d9800cb" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getMovableObjectIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1a92cef591d74630c19c534709dce030f8" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getName</name></member>
      <member refid="classOgre_1_1SceneManager_1a0fdae2f94c44e3f1be79c8c27f965ec2" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getNormaliseNormalsOnScale</name></member>
      <member refid="classOgre_1_1SceneManager_1a81ffd5be029a92a8d6849d4a92584088" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getNumInstancesPerBatch</name></member>
      <member refid="classOgre_1_1SceneManager_1a2ea53a860f373185f5a46239f579a361" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getOption</name></member>
      <member refid="classOgre_1_1SceneManager_1a7c8ff6b5c19eb9eeef9d5a6c9fca9fe8" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getOptionKeys</name></member>
      <member refid="classOgre_1_1SceneManager_1ae291393bc0c5bd48a8c6e79742180c93" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getOptionValues</name></member>
      <member refid="classOgre_1_1SceneManager_1a499cc0669395a5a11aea7d19979765b7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1afe6dac1f080afffd346271af26c464d7" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getQueuedRenderableVisitor</name></member>
      <member refid="classOgre_1_1SceneManager_1a8accbffd3a95901ac09bc32784b2e27d" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1afe38a813501eb293c9695c2db68c59b5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getRibbonTrail</name></member>
      <member refid="classOgre_1_1SceneManager_1a1ef8edf722bd8436ad414967bc2e8c51" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getRootSceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a8c3389aea8f436037850ddc64f6d1d7d" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1aae7259371b79bafd3f164daaf34a919c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowCameraSetup</name></member>
      <member refid="classOgre_1_1SceneManager_1a63b60c5540665c878d5f15138c4cfa21" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getShadowCasterBoundsInfo</name></member>
      <member refid="classOgre_1_1SceneManager_1a99b0932e1331a4e07e0db0301172da20" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowCasterRenderBackFaces</name></member>
      <member refid="classOgre_1_1SceneManager_1ac3b3146c419a2d272b14c5dc50b024c3" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowColour</name></member>
      <member refid="classOgre_1_1SceneManager_1a73a0ca638976062f80ebd967a638be22" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowDirectionalLightExtrusionDistance</name></member>
      <member refid="classOgre_1_1SceneManager_1a74ce4995eac32da6d1c2d2cef58c7019" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowDirLightTextureOffset</name></member>
      <member refid="classOgre_1_1SceneManager_1a8f9420b7a640d29475bc09a83f4e2458" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowFarDistance</name></member>
      <member refid="classOgre_1_1SceneManager_1a2d50ad888092c98a14139ce03a904388" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowFarDistanceSquared</name></member>
      <member refid="classOgre_1_1SceneManager_1ace6c0cf42787f6c51e4df2e13d3482a0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowIndexBufferSize</name></member>
      <member refid="classOgre_1_1SceneManager_1a2b2a69e400687b335c414a6053de2b34" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowTechnique</name></member>
      <member refid="classOgre_1_1SceneManager_1abf504cf97c1723f6fab069335ecee9a0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowTexture</name></member>
      <member refid="classOgre_1_1SceneManager_1a1bb99c11f9213def3e23784ccff6435f" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getShadowTextureConfigIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1a7806a68edbfbbeac721dee76de6f869e" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getShadowTextureCount</name></member>
      <member refid="classOgre_1_1SceneManager_1a04405da47f025ac1e628ee25f1b85fc4" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getShadowTextureCountPerLightType</name></member>
      <member refid="classOgre_1_1SceneManager_1aa5062fe502bf8cd49b974a5ca8052468" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowTextureSelfShadow</name></member>
      <member refid="classOgre_1_1SceneManager_1a50faf3e81e28c16fefea6937d4b6a611" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShadowUseLightClipPlanes</name></member>
      <member refid="classOgre_1_1SceneManager_1aa22b0b7e88539bb34a5c9c309c87bd34" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShowBoundingBoxes</name></member>
      <member refid="classOgre_1_1SceneManager_1ad6d310a8836f8c08b4f4f189f855d510" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getShowDebugShadows</name></member>
      <member refid="classOgre_1_1SceneManager_1aca48eb6f90fcd5f169c94ad3d1a27ef6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSkyBoxGenParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1a3092d641b3b6697fa12517898463c49b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSkyBoxNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a6af078e9234b8d90812ca46a7dd7151b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSkyDomeGenParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1ab48d1e49e2b176863c72af383b86120e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSkyDomeNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a68bd19b47ed424ebda3a7987a6d1c289" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSkyPlaneGenParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1af4199356f06cd6fd64c1257806e5e94f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSkyPlaneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1aed183c1907c928f384cd087b40a3f685" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSpecialCaseRenderQueueMode</name></member>
      <member refid="classOgre_1_1SceneManager_1a3193bc1a8bc05df184234b59a7701a2f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getStaticGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1add6fe27d7a9500aafbe9325c21985801" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getSuggestedViewpoint</name></member>
      <member refid="classOgre_1_1SceneManager_1a46690a40b65fd0e7e89752e1e36be727" prot="public" virt="pure-virtual"><scope>Ogre::SceneManager</scope><name>getTypeName</name></member>
      <member refid="classOgre_1_1SceneManager_1abd074aaefc7c579a0c6d09593bb7d3e6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getVisibilityMask</name></member>
      <member refid="classOgre_1_1SceneManager_1aa724f4e6c46ceaa95a13d60a7d504db0" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>getVisibleObjectsBoundsInfo</name></member>
      <member refid="classOgre_1_1SceneManager_1af036aed42b3e7480915704f29865c788" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>getWorldGeometryRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1aa88f44e5200e790105cb18814bdee7e5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasAnimation</name></member>
      <member refid="classOgre_1_1SceneManager_1a08510a6f311d26de3a385b809bb51c32" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasAnimationState</name></member>
      <member refid="classOgre_1_1SceneManager_1a496f747b6482bc8170495815859c921e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasBillboardChain</name></member>
      <member refid="classOgre_1_1SceneManager_1a8227de25c67053821c2bfbdf9b27504b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasBillboardSet</name></member>
      <member refid="classOgre_1_1SceneManager_1ac4af585550a9ed44ead58855419d5f84" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasCamera</name></member>
      <member refid="classOgre_1_1SceneManager_1a1e6c904789a2393264e278c05e9c5395" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a6f3f49a48b346189f565a06463a82489" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasInstanceManager</name></member>
      <member refid="classOgre_1_1SceneManager_1a032173d58a1465af8550a394a9c5b870" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a2f6e3800eacb8a5bb39fd5c7e94e2c82" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasManualObject</name></member>
      <member refid="classOgre_1_1SceneManager_1aaf8016cc1956244c4dd6844b030e06b9" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a31da84037d0cca0008e9e894e8ddb569" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasOption</name></member>
      <member refid="classOgre_1_1SceneManager_1a3dc7da5d60915c3667a531d2f053e34a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasParticleSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1ad0d074b988d997b4b9fe461c26ffbab0" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasRibbonTrail</name></member>
      <member refid="classOgre_1_1SceneManager_1a6389657d1838dcc93adc8b7e473e4c0a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasSceneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1acbaddd36a321a7c00085f654df71991d" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>hasStaticGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>IlluminationRenderStage</name></member>
      <member refid="classOgre_1_1SceneManager_1a73505bfc8792209bfc3b16042d17635d" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>initRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1a0127361e6d7549373cf7cb991792d45b" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>initShadowVolumeMaterials</name></member>
      <member refid="classOgre_1_1SceneManager_1af13eb691a7bdd67e17a402dee98c4b5f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>injectMovableObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a2091430fab5446019fc276d6b531dfb4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>InstancedGeometryList</name></member>
      <member refid="classOgre_1_1SceneManager_1aeb7beb7e3723ebd4199c5a8f727a5829" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>InstanceManagerMap</name></member>
      <member refid="classOgre_1_1SceneManager_1ab5e6988d5a1835b6c80c74f594b8c2bc" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>InstanceManagerVec</name></member>
      <member refid="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827a8fd3e7fb8fab382a9d29e6e081ae556a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>IRS_NONE</name></member>
      <member refid="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827a0e1792a8ff0d3d19f121818e7028e846" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>IRS_RENDER_RECEIVER_PASS</name></member>
      <member refid="classOgre_1_1SceneManager_1a51db39cc4fa15b28086a1793d42fc827a8f99da7404ae8c16199dde8d34367b1a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>IRS_RENDER_TO_TEXTURE</name></member>
      <member refid="classOgre_1_1SceneManager_1a7d482746b0adb55a7d0c670489a83152" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isLateMaterialResolving</name></member>
      <member refid="classOgre_1_1SceneManager_1abdf79b63bce9f65571359c96a585eb9f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isRenderQueueToBeProcessed</name></member>
      <member refid="classOgre_1_1SceneManager_1a6c46ea94370e147deb8c49823db0ed7d" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isShadowTechniqueAdditive</name></member>
      <member refid="classOgre_1_1SceneManager_1a7145a399f90a25b120bd9802d24448a7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isShadowTechniqueIntegrated</name></member>
      <member refid="classOgre_1_1SceneManager_1a6dfdf56d941a145875d81c4c763f9391" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isShadowTechniqueInUse</name></member>
      <member refid="classOgre_1_1SceneManager_1a0d931a137e72d11bdaeb200fa0a8ffb8" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isShadowTechniqueModulative</name></member>
      <member refid="classOgre_1_1SceneManager_1abcd82e9adadad77f0935b5cdb7182ec6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isShadowTechniqueStencilBased</name></member>
      <member refid="classOgre_1_1SceneManager_1a194ea7ba828e1f713226f16eec8cd8b5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isShadowTechniqueTextureBased</name></member>
      <member refid="classOgre_1_1SceneManager_1a1209e1308df35bae42460f8aece7549b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isSkyBoxEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1a418e075ad2d68dec59105f743fccdae8" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isSkyDomeEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1a9d22e78d5f0059aeb0f822064af6ed5b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>isSkyPlaneEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1aeb00e5cde673e9bcf74ec69027cf8039" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>LIGHT_TYPE_MASK</name></member>
      <member refid="classOgre_1_1SceneManager_1ab9caf44e613e32f36aa60663ad2253a6" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>LightClippingInfoMap</name></member>
      <member refid="classOgre_1_1SceneManager_1a6748ee2b37ce2586eb7c93e48714bacf" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>LightInfoList</name></member>
      <member refid="classOgre_1_1SceneManager_1a07f99f34cb2a820ececdb7ad6c629c1f" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>ListenerList</name></member>
      <member refid="classOgre_1_1SceneManager_1a3a8bd4ec0e13d02cd1da6ae70612f852" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>LodListenerSet</name></member>
      <member refid="classOgre_1_1SceneManager_1a92939427e23b4c60e6d16ac721462863" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mActiveCompositorChain</name></member>
      <member refid="classOgre_1_1SceneManager_1a585632a1f5cff9ab48205a7503ff1e69" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mActiveQueuedRenderableVisitor</name></member>
      <member refid="classOgre_1_1SceneManager_1a1046dbbb22cc771860703cfca3a9d06a" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mAmbientLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a7c96613569926a2bbe5a359644157482" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mAnimationsList</name></member>
      <member refid="classOgre_1_1SceneManager_1a20a4a6f6531d749b1436be1184264c0b" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mAnimationStates</name></member>
      <member refid="classOgre_1_1SceneManager_1a16f971d1a34ce55b83c16634a56e2b6a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>manualRender</name></member>
      <member refid="classOgre_1_1SceneManager_1a8fd832d321c22ab2282c91a16a4528c2" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>manualRender</name></member>
      <member refid="classOgre_1_1SceneManager_1a63d007556fe8e97a917d952494c8e3a5" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mAutoParamDataSource</name></member>
      <member refid="classOgre_1_1SceneManager_1a2496f428b7e345aeee68319ebf3848ea" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mAutoTrackingSceneNodes</name></member>
      <member refid="classOgre_1_1SceneManager_1ada2783d02c2dcd52fb91e0409ab5ec20" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCachedLightInfos</name></member>
      <member refid="classOgre_1_1SceneManager_1a44e222e6fe97d76b98f031b72c9c2d7a" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCachedViewMatrix</name></member>
      <member refid="classOgre_1_1SceneManager_1a9a2f86d3b64b1a0a5f722fa4e18a0207" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCameraInProgress</name></member>
      <member refid="classOgre_1_1SceneManager_1a54d12f1b064fdf8bf735f5fcfc95134a" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCameraRelativePosition</name></member>
      <member refid="classOgre_1_1SceneManager_1adc88adbe55e6569c9b4d6b0e249a28df" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCameraRelativeRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1aa7fc776f4946fdcf92c696524a4c2d4d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCameras</name></member>
      <member refid="classOgre_1_1SceneManager_1aba61fc3252c41dca8fb9a161fee093e0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCamVisibleObjectsMap</name></member>
      <member refid="classOgre_1_1SceneManager_1aa14bcf591faa2d30fefc0fcb7c5857c4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCurrentShadowTexture</name></member>
      <member refid="classOgre_1_1SceneManager_1ad341e52c96894a27d6bcc83760386e85" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mCurrentViewport</name></member>
      <member refid="classOgre_1_1SceneManager_1a54cbafb5e6dcc0e9f324d3898cead7ef" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDebugShadows</name></member>
      <member refid="classOgre_1_1SceneManager_1aed9fbb65aff18fd3b1659f68c32bcef4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDefaultQueuedRenderableVisitor</name></member>
      <member refid="classOgre_1_1SceneManager_1aed1f03f6ccf8735715458aae3cd720ec" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDefaultShadowCameraSetup</name></member>
      <member refid="classOgre_1_1SceneManager_1a155f9c139734d33fc7d9f03c6364cc4c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDefaultShadowFarDist</name></member>
      <member refid="classOgre_1_1SceneManager_1afd8165b0623ae10088f400f8a9d5b592" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDefaultShadowFarDistSquared</name></member>
      <member refid="classOgre_1_1SceneManager_1a8264f0c4e49a76667f3977acb955c7b1" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDestRenderSystem</name></member>
      <member refid="classOgre_1_1SceneManager_1a7264db47da5f89e7932317606a24e70c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDirtyInstanceManagers</name></member>
      <member refid="classOgre_1_1SceneManager_1abf5c5ed64b21a09012de76acd349d9e0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDirtyInstanceMgrsTmp</name></member>
      <member refid="classOgre_1_1SceneManager_1a070effc83d84478c31dc811dc92703c7" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mDisplayNodes</name></member>
      <member refid="classOgre_1_1SceneManager_1a88e157d6df826056dd0d7601a557c68e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mEntityMaterialLodChangedEvents</name></member>
      <member refid="classOgre_1_1SceneManager_1adfed344adce485e2f2164dbb1f0cc2d3" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mEntityMeshLodChangedEvents</name></member>
      <member refid="classOgre_1_1SceneManager_1ad2a6d7cc9535ac69dc7e445b1cead58e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFindVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1ab90bf0fcf5aa2c3597a811863ed0d274" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFiniteExtrusionParams</name></member>
      <member refid="classOgre_1_1SceneManager_1afc663fea2a213f5c0800259604c84df5" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFlipCullingOnNegativeScale</name></member>
      <member refid="classOgre_1_1SceneManager_1a77a36143ecafeea94fc7a0656ffaf112" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFogColour</name></member>
      <member refid="classOgre_1_1SceneManager_1a08ed5443cb044a3f6fb749cb90454b49" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFogDensity</name></member>
      <member refid="classOgre_1_1SceneManager_1a3af93cd3e5f38b3554d3328ceb0df312" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFogEnd</name></member>
      <member refid="classOgre_1_1SceneManager_1a17ed14a33b5393704f343d2c90568588" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFogMode</name></member>
      <member refid="classOgre_1_1SceneManager_1ad697a57bccc4fc33010c2f8151330605" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFogStart</name></member>
      <member refid="classOgre_1_1SceneManager_1add5db2bd810b8c5565afa345de0e0dfb" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mFullScreenQuad</name></member>
      <member refid="classOgre_1_1SceneManager_1abd57c4b1d1517a98592666614ae4b3d0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mGpuParamsDirty</name></member>
      <member refid="classOgre_1_1SceneManager_1afcdad5f25f6c3956c11a824fba5d68ec" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mIlluminationStage</name></member>
      <member refid="classOgre_1_1SceneManager_1aa1886fd36b6128c7714ec1508f45821f" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mInfiniteExtrusionParams</name></member>
      <member refid="classOgre_1_1SceneManager_1a5aa17d2f39c5e8769f0e444db659fa91" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mInstancedGeometryList</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ccb0331d75034b02d2d201a55cd08f4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mInstanceManagerMap</name></member>
      <member refid="classOgre_1_1SceneManager_1aa3a4b9ce9a0f555e8e52de3a8bbdf5c0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLastFrameNumber</name></member>
      <member refid="classOgre_1_1SceneManager_1ac203d5f0d5569dafdd09a5347e7ad712" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLastLightHash</name></member>
      <member refid="classOgre_1_1SceneManager_1acd0a23362972c2b7ce22e72dd3bbaec0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLastLightHashGpuProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1ad5e54c4606851aa7cee4fec2336e44bc" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLastLightLimit</name></member>
      <member refid="classOgre_1_1SceneManager_1a63e5b71e4fe7e66e1e22ef900bc04912" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLastRenderQueueInvocationCustom</name></member>
      <member refid="classOgre_1_1SceneManager_1a5a6b5def3e221ce6366ab12d4e1e16e3" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLateMaterialResolving</name></member>
      <member refid="classOgre_1_1SceneManager_1a9c12c8a290ce0ea51efef380760f27c8" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLightClippingInfoMap</name></member>
      <member refid="classOgre_1_1SceneManager_1ac7fe720c6553bf245b058b9f5281b220" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLightClippingInfoMapFrameNumber</name></member>
      <member refid="classOgre_1_1SceneManager_1a64adaac04645e2f83bf04862a20c5d45" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLightsAffectingFrustum</name></member>
      <member refid="classOgre_1_1SceneManager_1acd54728be554ef19ce5cdf207de09959" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLightsDirtyCounter</name></member>
      <member refid="classOgre_1_1SceneManager_1a077722cc09750f78a8769b0ed5e5bf72" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mListeners</name></member>
      <member refid="classOgre_1_1SceneManager_1a27598e0999968a2d7506bcbe98c00175" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mLodListeners</name></member>
      <member refid="classOgre_1_1SceneManager_1ab4b065d7701d48c4cb96e01797149faa" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mMovableNameGenerator</name></member>
      <member refid="classOgre_1_1SceneManager_1a8a3af0a8a5116a4a02dd3d8420078658" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mMovableObjectCollectionMap</name></member>
      <member refid="classOgre_1_1SceneManager_1a47d455aaa9cdf8d440575740085c22c7" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mMovableObjectLodChangedEvents</name></member>
      <member refid="classOgre_1_1SceneManager_1a0ff0b1a5241287f4ce969e9755079fb2" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mName</name></member>
      <member refid="classOgre_1_1SceneManager_1ad86119ced614f90d301930b1b0f19588" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mNormaliseNormalsOnScale</name></member>
      <member refid="classOgre_1_1SceneManager_1a67ade0caa6fe5a91ad14e2d79c294bb8" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mNullShadowTexture</name></member>
      <member refid="classOgre_1_1SceneManager_1a0a488d6629c501a7d5d648f372d6e81b" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>MovableObjectCollectionMap</name></member>
      <member refid="classOgre_1_1SceneManager_1a4249682ae2a69255ed225383d930aec1" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>MovableObjectIterator</name></member>
      <member refid="classOgre_1_1SceneManager_1a057b9e1a36d7a99c82993dfe71d37857" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>MovableObjectLodChangedEventList</name></member>
      <member refid="classOgre_1_1SceneManager_1a9f66dd334bc7a328476408fdcbc72f6d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>MovableObjectMap</name></member>
      <member refid="classOgre_1_1SceneManager_1a3797a6b398dda83a98ff62d9883aac9c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mPassCullingMode</name></member>
      <member refid="classOgre_1_1SceneManager_1a9241ac2862827f8aae292bc86557ed6d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mRenderObjectListeners</name></member>
      <member refid="classOgre_1_1SceneManager_1a5411ad8b9ea980057db76161e58bb3d3" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1ad0c4537d20d352ad2818ec7cabcb7e7b" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mRenderQueueListeners</name></member>
      <member refid="classOgre_1_1SceneManager_1a000946f678ee7508dfbc31268c5d966e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mResetIdentityProj</name></member>
      <member refid="classOgre_1_1SceneManager_1a1c35d16e51f409760b8dd2766b63d647" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mResetIdentityView</name></member>
      <member refid="classOgre_1_1SceneManager_1aa63f58cfe1efa7a19a2ae2227d58cabc" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSceneNodes</name></member>
      <member refid="classOgre_1_1SceneManager_1a47dc6b93ef3b1462268e4878bd8118e6" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSceneRoot</name></member>
      <member refid="classOgre_1_1SceneManager_1a933194ab15d699b1be5142ae705a010e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowAdditiveLightClip</name></member>
      <member refid="classOgre_1_1SceneManager_1a604f8366d8b27064a4a20f48cc37dac4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCamLightMapping</name></member>
      <member refid="classOgre_1_1SceneManager_1a1c6f6e1290244f6d0dd1347d8ce3453b" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCasterAABBQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1ae6d775195f3f8831650e4baaebf89433" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCasterList</name></member>
      <member refid="classOgre_1_1SceneManager_1aadaa9d36a795c8dad209fb4740015a30" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCasterPlainBlackPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a35ebd62722964590cef05e5d0eb236f2" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCasterQueryListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a3159f28f48646517418ce319b9b7dec8" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCasterRenderBackFaces</name></member>
      <member refid="classOgre_1_1SceneManager_1af0e984eaa8115c9753bcd84b4bd3cc11" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowCasterSphereQuery</name></member>
      <member refid="classOgre_1_1SceneManager_1af888882852ac5512310c18017e7921e5" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowColour</name></member>
      <member refid="classOgre_1_1SceneManager_1a9276e06185787c851f1ff54a152f28ad" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowDebugPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a45946d6a943570d2d7ac0a803a75c77e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowDirLightExtrudeDist</name></member>
      <member refid="classOgre_1_1SceneManager_1a63697c1137a52b5e02035b66b6de9874" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowIndexBuffer</name></member>
      <member refid="classOgre_1_1SceneManager_1a7475f0391505adff66471a7d8b0a4da8" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowIndexBufferSize</name></member>
      <member refid="classOgre_1_1SceneManager_1a63c239863d9a55286a5cb7a024793659" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowMaterialInitDone</name></member>
      <member refid="classOgre_1_1SceneManager_1aa14524c82d79c3e76942b0fd6dac3ac3" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowModulativePass</name></member>
      <member refid="classOgre_1_1SceneManager_1a593f82c978aa7ab17043dead7a24d29f" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowReceiverPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a97eb70f23035e4cf0f75aadd11850b57" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowStencilPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a7adaeed1d654ab66a2c7fff4c03a431e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTechnique</name></member>
      <member refid="classOgre_1_1SceneManager_1a5a89503b16636ebf9a99605b707b2d9d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCameras</name></member>
      <member refid="classOgre_1_1SceneManager_1aa893151c589403e0c043d8edf6d67448" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureConfigDirty</name></member>
      <member refid="classOgre_1_1SceneManager_1a76f9b63473b07dd34092f46f79f88e54" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureConfigList</name></member>
      <member refid="classOgre_1_1SceneManager_1aca3a6092095443e4a5a7fb8169bcf83e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCountPerType</name></member>
      <member refid="classOgre_1_1SceneManager_1afd83887f99a371529f043d86b9047506" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCurrentCasterLightList</name></member>
      <member refid="classOgre_1_1SceneManager_1ac6295bd94f9cc7c1c6bc05d52f049851" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomCasterFPParams</name></member>
      <member refid="classOgre_1_1SceneManager_1a07b84060116c1da6e704a267f9acb05d" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomCasterFragmentProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1a0ea1617bdda02c23a72330a647ea09a0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomCasterPass</name></member>
      <member refid="classOgre_1_1SceneManager_1a12145dec119385784c27245b380ddc5a" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomCasterVertexProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1adcadb2b43a58490f9975ac44b553eedd" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomCasterVPParams</name></member>
      <member refid="classOgre_1_1SceneManager_1a67563d09f914c80b7c007f08433b9e23" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomReceiverFPParams</name></member>
      <member refid="classOgre_1_1SceneManager_1ab6c7dec2b7a7d8122ae3784e56e59918" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomReceiverFragmentProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1a8ea12599e955972ac959ef94c52e35af" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomReceiverPass</name></member>
      <member refid="classOgre_1_1SceneManager_1acc8a7c17bedf51c442ed02ed23ef30e3" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomReceiverVertexProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1ae12d0d35465b9395c984263db68ab752" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureCustomReceiverVPParams</name></member>
      <member refid="classOgre_1_1SceneManager_1a8fc134ed20d116daefa494b06554b7c8" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureFadeEnd</name></member>
      <member refid="classOgre_1_1SceneManager_1a2f270a0f22844b6690c835c80ab51145" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureFadeStart</name></member>
      <member refid="classOgre_1_1SceneManager_1a1b0567633eab6498dfb6c2b89724959f" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureIndexLightList</name></member>
      <member refid="classOgre_1_1SceneManager_1a0fd0fee334159816771d34a2a03e1abe" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureOffset</name></member>
      <member refid="classOgre_1_1SceneManager_1aeee75145f20f44d4bcdeba9d1884a13b" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextures</name></member>
      <member refid="classOgre_1_1SceneManager_1a2d366a01e2b7fea9e7eae781a25268a6" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowTextureSelfShadow</name></member>
      <member refid="classOgre_1_1SceneManager_1ae71bff7c7babb2f8a92346427d8c5fa1" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShadowUseInfiniteFarPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1aecf3af703dea330078f41ab6ed016c7e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mShowBoundingBoxes</name></member>
      <member refid="classOgre_1_1SceneManager_1a870b9f0b19b51dd4de3450a7b8f1dada" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyBoxEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1afc3531fffee2ca7a25951a0a0a59af50" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyBoxGenParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1a9a97c216a74023a495dd4a913163c0ec" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyBoxNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a1632eb9454092102844767bce15d1f22" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyBoxObj</name></member>
      <member refid="classOgre_1_1SceneManager_1a9a0a6799f6c031e3ba5e19e52e224be1" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyBoxOrientation</name></member>
      <member refid="classOgre_1_1SceneManager_1ac1c486c6f054ee0ad11a546787dd3c92" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyBoxRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1a6be93df7298573396205fcad20e51d80" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyDomeEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1ad119673b6459a4417ccd6b9132f6949e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyDomeEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a68bc63ccd0178ee6812cd792ac25ff1e" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyDomeGenParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1a21476fa21be2e1fa6e822fa173ee4031" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyDomeNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a332c8e9c42e45503ceb067b3ebb7f469" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyDomeOrientation</name></member>
      <member refid="classOgre_1_1SceneManager_1ac5ec31ff245698c0ca5d5cb86e14b40c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyDomeRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1acc6d350acb01f02cbf50090451610e38" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a743ba63a3432f88ffae6d01c7887b754" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyPlaneEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1a1b356cfd900fc11d9aab12384db846f2" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyPlaneEntity</name></member>
      <member refid="classOgre_1_1SceneManager_1a6c4e525a3069ba18e984aafd7bb4166f" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyPlaneGenParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1aa22625c805a1f0f666323afb95eae01c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyPlaneNode</name></member>
      <member refid="classOgre_1_1SceneManager_1a856c7625cb2589f10b57ea25c25d4ff6" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSkyPlaneRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1a4d8e465d0733b5a86dc1935efcdc3af4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSpecialCaseQueueList</name></member>
      <member refid="classOgre_1_1SceneManager_1ac23b56bba91b3582f8af00dbf8050dd5" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSpecialCaseQueueMode</name></member>
      <member refid="classOgre_1_1SceneManager_1a0973d08b56629d0116237af5b948f771" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mStaticGeometryList</name></member>
      <member refid="classOgre_1_1SceneManager_1a2f08653c064e776174c4881148f6e1ec" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSuppressRenderStateChanges</name></member>
      <member refid="classOgre_1_1SceneManager_1a0220be54b3b9c8be805be65e60f136d0" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mSuppressShadows</name></member>
      <member refid="classOgre_1_1SceneManager_1a784d6dc8b5c3336f34fd78cea0d718d4" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mTempXform</name></member>
      <member refid="classOgre_1_1SceneManager_1a72f4d87312aee00bd2236e4ae1331b35" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mTestLightInfos</name></member>
      <member refid="classOgre_1_1SceneManager_1af330714bd5a60cf8fcdcb8998ae88fc3" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mVisibilityMask</name></member>
      <member refid="classOgre_1_1SceneManager_1aeb54113eccb7f6f55e70f9319932373a" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>mWorldGeometryRenderQueue</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a8357fe4fb4849772b94baa4bf47c7ded" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator delete</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a1c727e879a260c37b00ce5505fe8e144" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator delete</name></member>
      <member refid="classOgre_1_1AllocatedObject_1acb46d4b0a597156d9ba5abc39d127792" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator delete</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a93e6a86dde5483c053ca0f2a85bbfd6c" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator delete[]</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a595ea4c05da8aa987d3800e65d23355d" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator delete[]</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a421b197ca3a38da17e2eb1531a645fa2" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator new</name></member>
      <member refid="classOgre_1_1AllocatedObject_1ac4bdf968b7b9af8a5239a27da73d5711" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator new</name></member>
      <member refid="classOgre_1_1AllocatedObject_1ab78a921e54419be677839cdf15d1f0b8" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator new</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a4be37baef81876985aa1071ad5acc6dd" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator new[]</name></member>
      <member refid="classOgre_1_1AllocatedObject_1afa2943846ba6a2b5824a12857139cf5e" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>operator new[]</name></member>
      <member refid="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbf" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>PrefabType</name></member>
      <member refid="classOgre_1_1SceneManager_1a0878fb11733d9a265adc56805f6acccc" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>prepareRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1a95cd8ff86a7178c2e37b2fcb485f64fa" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>prepareShadowTextures</name></member>
      <member refid="classOgre_1_1SceneManager_1a5ceb87944e7ba077e4c6ed8db8acf4cc" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>prepareWorldGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a5a237a294eb4ebebee35da1825f71f06" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>prepareWorldGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbfa25b0181d24b783ab75da2520305d292a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>PT_CUBE</name></member>
      <member refid="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbfaf0fb654fb98508a564c17d3d5b2feee3" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>PT_PLANE</name></member>
      <member refid="classOgre_1_1SceneManager_1ab4c2ff4f6c76f7fe0a8eae76f2a84cbfa0f94148c2cfe190f3ea04374af220eba" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>PT_SPHERE</name></member>
      <member refid="classOgre_1_1SceneManager_1a4437b11b78eae8f5db205aa89c0235ee" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>removeListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a25cc1bb36997b722fc60efc7903f3760" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>removeLodListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a2a482e0a9f78109a5a467ddd6c16082b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>removeRenderObjectListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a190471ba7a61111d576a1e8ca9862706" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>removeRenderQueueListener</name></member>
      <member refid="classOgre_1_1SceneManager_1a5683d75af7c73bfdd9db2b9185b99a53" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>removeSpecialCaseRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1a7b0f910145e18b403ffda692dc56de0a" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderAdditiveStencilShadowedQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a900c414251c050209e24781067052ad3" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderAdditiveTextureShadowedQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a79019a1aaa0d930b1adfe4adb491654f" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderBasicQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a9347a2cc68ffb1f0f30b2c3648a9f1ab" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderModulativeStencilShadowedQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a6821367bfafa83a3c5d0ed8f0dea17f9" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderModulativeTextureShadowedQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1aa02b899ad0bb5286c04b659990d2da83" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>RenderObjectListenerList</name></member>
      <member refid="classOgre_1_1SceneManager_1ae9e2a6c19e5d5e11951dc0cd5c158fe8" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a6f9d5f49a24bebbb878dbc91fa54b5e5" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>RenderQueueListenerList</name></member>
      <member refid="classOgre_1_1SceneManager_1aac6e885d46b59352faf85df49e0c9973" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>renderShadowVolumeObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a6b262351699ce4a35f93faa05612fb35" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderShadowVolumesToStencil</name></member>
      <member refid="classOgre_1_1SceneManager_1a505ac650e6f3d1f025a3a4ca87bacf0a" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderSingleObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a066a00620486e3bda9a256103c08cd55" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderTextureShadowCasterQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a2fdad5a80651ae791c322546316bdac7" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderTextureShadowReceiverQueueGroupObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1ae588d960549fd37f66881da0c100265b" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderTransparentShadowCasterObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a5d330306c0f22caf946d1ddbf0cc2474" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderVisibleObjectsCustomSequence</name></member>
      <member refid="classOgre_1_1SceneManager_1a0185f535c0b92eda29fa741f533d1424" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>renderVisibleObjectsDefaultSequence</name></member>
      <member refid="classOgre_1_1SceneManager_1ac79994f9a877fc1cd988b581cc1368f6" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>resetLightClip</name></member>
      <member refid="classOgre_1_1SceneManager_1ae79444a2f5305caeab80b01f8d1275a3" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>resetScissor</name></member>
      <member refid="classOgre_1_1SceneManager_1a5f472047cc46e765ac5548553aa461db" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>resetViewProjMode</name></member>
      <member refid="classOgre_1_1SceneManager_1a09e76a674bc69c610fb49acd3da76cf1" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SceneManager</name></member>
      <member refid="classOgre_1_1SceneManager_1a25811fa0c23672b27dccfffd48bec43a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SceneMgrQueuedRenderableVisitor</name></member>
      <member refid="classOgre_1_1SceneManager_1abf8b0fc2e37f7c04d915498662442608" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SceneNodeList</name></member>
      <member refid="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6acc6b7e38cc21cf87a29e17177dc1a0b3" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SCRQM_EXCLUDE</name></member>
      <member refid="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6a4f5291417680ce7d1715b7aef50869a7" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SCRQM_INCLUDE</name></member>
      <member refid="classOgre_1_1SceneManager_1a7c26cdbb5703cf10a99add1f6a930ca2" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>setAmbientLight</name></member>
      <member refid="classOgre_1_1SceneManager_1a52de83e40cb386682bf3d148affd192b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setCameraRelativeRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1a46c5cbc33b0f498ed01670289e87584c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setDisplaySceneNodes</name></member>
      <member refid="classOgre_1_1SceneManager_1a04c8414da02aec3e3f98acd013917ed2" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setFindVisibleObjects</name></member>
      <member refid="classOgre_1_1SceneManager_1a2a4d997503b651187f2e129cd5eeb7ad" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setFlipCullingOnNegativeScale</name></member>
      <member refid="classOgre_1_1SceneManager_1ab804195c05873da617dcd16198a63d1c" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>setFog</name></member>
      <member refid="classOgre_1_1SceneManager_1a86c1371039d40e139a37b2b174538978" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setLateMaterialResolving</name></member>
      <member refid="classOgre_1_1SceneManager_1a4fa4a94b8687098a6751be1ed36e20f7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setNormaliseNormalsOnScale</name></member>
      <member refid="classOgre_1_1SceneManager_1a34f3ddda75dcf75d5c5176446b3316a8" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setOption</name></member>
      <member refid="classOgre_1_1SceneManager_1af55b7d8cf3daf68db0266139faf73492" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>setQueuedRenderableVisitor</name></member>
      <member refid="classOgre_1_1SceneManager_1adbe1da236689cdd20690d5da950dce33" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowCameraSetup</name></member>
      <member refid="classOgre_1_1SceneManager_1aaf865048d62de79942fea2758c33ee3e" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowCasterRenderBackFaces</name></member>
      <member refid="classOgre_1_1SceneManager_1ad8ab6139696f9ef50d8abea0528e85b4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowColour</name></member>
      <member refid="classOgre_1_1SceneManager_1a9d220fa31bf0d95ad65558936c71a194" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowDirectionalLightExtrusionDistance</name></member>
      <member refid="classOgre_1_1SceneManager_1a893663f55c2b4a29467cff25b9b1b3f4" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowDirLightTextureOffset</name></member>
      <member refid="classOgre_1_1SceneManager_1a0e593d05e2f892b8fc3bfca917a75fef" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowFarDistance</name></member>
      <member refid="classOgre_1_1SceneManager_1a3364ae687de3cbf3bd5e87ffd52877e5" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowIndexBufferSize</name></member>
      <member refid="classOgre_1_1SceneManager_1a0f8f32d176059a385527cf9970ddc892" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTechnique</name></member>
      <member refid="classOgre_1_1SceneManager_1a9f0cde141313583e65561abdfae6a0ec" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureCasterMaterial</name></member>
      <member refid="classOgre_1_1SceneManager_1a78416eefd93ca3902bc15b9ec231be45" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureConfig</name></member>
      <member refid="classOgre_1_1SceneManager_1a0ff40f3cef8dd775ee782bbae15d436b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureConfig</name></member>
      <member refid="classOgre_1_1SceneManager_1a7b960b480425cecbe39573215fb5e48c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureCount</name></member>
      <member refid="classOgre_1_1SceneManager_1a70f8eddf9b8617783fb7d0995b985a9a" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureCountPerLightType</name></member>
      <member refid="classOgre_1_1SceneManager_1a237a09e65919b808473c543fb886723f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureFadeEnd</name></member>
      <member refid="classOgre_1_1SceneManager_1a72fa019aa4efbc6943842efcf5f38078" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureFadeStart</name></member>
      <member refid="classOgre_1_1SceneManager_1ad5788555e877b310410a425d0ccb14c6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureFSAA</name></member>
      <member refid="classOgre_1_1SceneManager_1a87fac14153b877effba7196f116cbdc6" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTexturePixelFormat</name></member>
      <member refid="classOgre_1_1SceneManager_1ae0d524bf189e08fdab005ca2b5560190" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureReceiverMaterial</name></member>
      <member refid="classOgre_1_1SceneManager_1a8de7e38165fe9b0aa4baddf95ef006e7" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureSelfShadow</name></member>
      <member refid="classOgre_1_1SceneManager_1a24f357817a11370d54126248c1c9a389" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureSettings</name></member>
      <member refid="classOgre_1_1SceneManager_1ac594a29110119bed71f1c0c61265394b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowTextureSize</name></member>
      <member refid="classOgre_1_1SceneManager_1aa40a406b22c8d5dd282523f8dcd09e34" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowUseInfiniteFarPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a83a8347369ffc819ea8c85e4d416fb9c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowUseLightClipPlanes</name></member>
      <member refid="classOgre_1_1SceneManager_1a77a1e643384ab5a2d191642a052914c8" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShadowVolumeStencilState</name></member>
      <member refid="classOgre_1_1SceneManager_1ae2b74088a5229f3bbb09da8589968d9b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setShowDebugShadows</name></member>
      <member refid="classOgre_1_1SceneManager_1af419fca38294bef65224162b3ad4af36" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSkyBox</name></member>
      <member refid="classOgre_1_1SceneManager_1ad8ba1fc585a224a834ffe2624db23e57" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSkyBoxEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1add758e3fa5df1291df9ff98b2594d35b" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSkyDome</name></member>
      <member refid="classOgre_1_1SceneManager_1a50a692ae852b41cf6e7e8ac647d2660f" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSkyDomeEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1a7f9395e50574b0d0c343036cf816c2bf" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSkyPlane</name></member>
      <member refid="classOgre_1_1SceneManager_1a213f0aaaf1341fe090e66968c8907f44" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSkyPlaneEnabled</name></member>
      <member refid="classOgre_1_1SceneManager_1a10753c0e57be813e135395e3a882777a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setSpecialCaseRenderQueueMode</name></member>
      <member refid="classOgre_1_1SceneManager_1ab5db505df81bfdd4f5bc062aa8ee7f82" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>setViewMatrix</name></member>
      <member refid="classOgre_1_1SceneManager_1a4dfb70c49bd65354acf13491890abe5e" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>setViewport</name></member>
      <member refid="classOgre_1_1SceneManager_1aef478368ad95d09c9df5ed114ba47c36" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setVisibilityMask</name></member>
      <member refid="classOgre_1_1SceneManager_1accb0fdfbd1f61aa4d3d6e1f4625e1f9c" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setWorldGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a000a7ece2364c8da5e9f4b5d6aac6730" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setWorldGeometry</name></member>
      <member refid="classOgre_1_1SceneManager_1a3c0437a615af536aaf69ba267f2f15d2" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>setWorldGeometryRenderQueue</name></member>
      <member refid="classOgre_1_1SceneManager_1a8e1df30516b152b7b5f4b37f67a39402" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>ShadowCamLightMapping</name></member>
      <member refid="classOgre_1_1SceneManager_1a2b399deb8670b6473b4193c1b54f601c" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>ShadowCasterList</name></member>
      <member refid="classOgre_1_1SceneManager_1aaa39b3654b95b76499723c771df564b2" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>ShadowTextureCameraList</name></member>
      <member refid="classOgre_1_1SceneManager_1a487859007d68fe9f261aea1645252563" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>showBoundingBoxes</name></member>
      <member refid="classOgre_1_1SceneManager_1ac28fad9c8bde6dd8fa30a747b12fd727" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SpecialCaseRenderQueueList</name></member>
      <member refid="classOgre_1_1SceneManager_1a6aa3039230bf91b09b8587dba0c482c6" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>SpecialCaseRenderQueueMode</name></member>
      <member refid="classOgre_1_1SceneManager_1a369ad7a1b8e0455052ea0bca0383942e" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>STATICGEOMETRY_TYPE_MASK</name></member>
      <member refid="classOgre_1_1SceneManager_1abb3204cddb559c0cd958a01c477083b8" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>StaticGeometryList</name></member>
      <member refid="classOgre_1_1SceneManager_1aa4359c3133d4b3769c326fdb6b15d139" prot="protected" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>updateDirtyInstanceManagers</name></member>
      <member refid="classOgre_1_1SceneManager_1a2936f0d00bf8b857bce11c738732faa2" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>updateGpuProgramParameters</name></member>
      <member refid="classOgre_1_1SceneManager_1ab5c96c7dc84fa2292c7e5062ad123c0c" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>updateRenderQueueGroupSplitOptions</name></member>
      <member refid="classOgre_1_1SceneManager_1a7a2a90e25975a2f734657cda4f8544f0" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>updateRenderQueueSplitOptions</name></member>
      <member refid="classOgre_1_1SceneManager_1a27125188a29fa136d80a27134bf8a279" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>useLights</name></member>
      <member refid="classOgre_1_1SceneManager_1a571042948114d1c3db52cc8c8be05186" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>useLightsGpuProgram</name></member>
      <member refid="classOgre_1_1SceneManager_1a01d4bf3c6e81fddcfc96ec3f2714c8ac" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>USER_TYPE_MASK_LIMIT</name></member>
      <member refid="classOgre_1_1SceneManager_1af3d64f04f160dbf7057ecafdf1b15133" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>useRenderableViewProjMode</name></member>
      <member refid="classOgre_1_1SceneManager_1a651906559ecf9995cd318a8855b9c228" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>validatePassForRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1a822454b676e71d630ca2bcd19b0950d1" prot="protected" virt="virtual"><scope>Ogre::SceneManager</scope><name>validateRenderableForRendering</name></member>
      <member refid="classOgre_1_1SceneManager_1ada8f4ecc06b8ffe99834d8e1db66c123" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>WORLD_GEOMETRY_TYPE_MASK</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a499773d35ca98b2df7c2699fc8c1bea2" prot="public" virt="non-virtual"><scope>Ogre::SceneManager</scope><name>~AllocatedObject</name></member>
      <member refid="classOgre_1_1SceneManager_1a6c8b9108b44339a321bc69b25a0c0a1a" prot="public" virt="virtual"><scope>Ogre::SceneManager</scope><name>~SceneManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

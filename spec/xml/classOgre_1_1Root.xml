<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classOgre_1_1Root" kind="class" prot="public">
    <compoundname>Ogre::Root</compoundname>
    <basecompoundref refid="classOgre_1_1Singleton" prot="public" virt="non-virtual">Ogre::Singleton&lt; Root &gt;</basecompoundref>
    <basecompoundref refid="classOgre_1_1AllocatedObject" prot="public" virt="non-virtual">Ogre::AllocatedObject&lt; GeneralAllocPolicy &gt;</basecompoundref>
    <includes refid="OgreRoot_8h" local="no">OgreRoot.h</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342" prot="protected" static="no">
        <name>FrameEventTimeType</name>
        <enumvalue id="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342ae392b758b6c82d9b7f43ef2c385f7564" prot="protected">
          <name>FETT_ANY</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a66ae048b1f52c537764494e797183d57" prot="protected">
          <name>FETT_STARTED</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a634c639c6480850d63f88fee6dd78913" prot="protected">
          <name>FETT_QUEUED</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a7138134f06499aff19becd379e6f29ed" prot="protected">
          <name>FETT_ENDED</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a608264d63d0b5b84a05883d1b9b22eb5" prot="protected">
          <name>FETT_COUNT</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates the type of event to be considered by <ref refid="classOgre_1_1Root_1a589c6e44ae36cec130d0dcb8ca551f08" kindref="member">calculateEventTime()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="182" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1Root_1a71fc72b82de9741751d52b64dc3faaad" prot="protected" static="no">
        <type><ref refid="structOgre_1_1deque" kindref="compound">deque</ref>&lt; <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> * &gt;::type</type>
        <definition>typedef deque&lt;SceneManager*&gt;::type Ogre::Root::SceneManagerStack</definition>
        <argsstring></argsstring>
        <name>SceneManagerStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="85" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1Root_1a55670df9d65002a8712ac0be55f6b259" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, MovableObjectFactory*&gt;::type Ogre::Root::MovableObjectFactoryMap</definition>
        <argsstring></argsstring>
        <name>MovableObjectFactoryMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="128" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1Root_1a47157fb47b40fc61942b1fc17fd7fafd" prot="protected" static="no">
        <type><ref refid="structOgre_1_1map" kindref="compound">map</ref>&lt; <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref>, <ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref> * &gt;::type</type>
        <definition>typedef map&lt;String, RenderQueueInvocationSequence*&gt;::type Ogre::Root::RenderQueueInvocationSequenceMap</definition>
        <argsstring></argsstring>
        <name>RenderQueueInvocationSequenceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="139" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1Root_1ab1fb026ba6b14078cacd620e7f2a8c3a" prot="protected" static="no">
        <type><ref refid="structOgre_1_1deque" kindref="compound">deque</ref>&lt; unsigned long &gt;::type</type>
        <definition>typedef deque&lt;unsigned long&gt;::type Ogre::Root::EventTimesQueue</definition>
        <argsstring></argsstring>
        <name>EventTimesQueue</name>
        <briefdescription>
<para>Contains the times of recently fired events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="191" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classOgre_1_1Root_1a4f51fe7c71b67eb166e0c34891611f65" prot="public" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1DynLib" kindref="compound">DynLib</ref> * &gt;::type</type>
        <definition>typedef vector&lt;DynLib*&gt;::type Ogre::Root::PluginLibList</definition>
        <argsstring></argsstring>
        <name>PluginLibList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="120" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1Root_1a5483dc1f87b9861cae629b5aba6a6071" prot="public" static="no">
        <type><ref refid="structOgre_1_1vector" kindref="compound">vector</ref>&lt; <ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> * &gt;::type</type>
        <definition>typedef vector&lt;Plugin*&gt;::type Ogre::Root::PluginInstanceList</definition>
        <argsstring></argsstring>
        <name>PluginInstanceList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="121" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classOgre_1_1Root_1a724ee7dcbdb7b8052420df2fecd07c0d" prot="public" static="no">
        <type><ref refid="classOgre_1_1ConstMapIterator" kindref="compound">ConstMapIterator</ref>&lt; <ref refid="classOgre_1_1Root_1a55670df9d65002a8712ac0be55f6b259" kindref="member">MovableObjectFactoryMap</ref> &gt;</type>
        <definition>typedef ConstMapIterator&lt;MovableObjectFactoryMap&gt; Ogre::Root::MovableObjectFactoryIterator</definition>
        <argsstring></argsstring>
        <name>MovableObjectFactoryIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1007" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1007" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classOgre_1_1Root_1a06b786d8e0847dfe9cc15e1dea308fcd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class RenderSystem</definition>
        <argsstring></argsstring>
        <name>RenderSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="71" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classOgre_1_1Root_1a401807b14c629aa22756dfef915b44c7" prot="protected" static="no" mutable="no">
        <type><ref refid="group__General_1ga8ec3f24590c290929ec15b4af5757351" kindref="member">RenderSystemList</ref></type>
        <definition>RenderSystemList Ogre::Root::mRenderers</definition>
        <argsstring></argsstring>
        <name>mRenderers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="73" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ac4a929b204a97d7b27490fe1850adb46" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
        <definition>RenderSystem* Ogre::Root::mActiveRenderer</definition>
        <argsstring></argsstring>
        <name>mActiveRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="74" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a4d4df87090b486e05d93df1cbc09a0d5" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::Root::mVersion</definition>
        <argsstring></argsstring>
        <name>mVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="75" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ae667f8de9a9f01e010ff39aec8a9048e" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::Root::mConfigFileName</definition>
        <argsstring></argsstring>
        <name>mConfigFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="76" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aaab43bb79759734e6bff3047e0c7f698" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::Root::mQueuedEnd</definition>
        <argsstring></argsstring>
        <name>mQueuedEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="77" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ad06af760b1c4f0172240149699057a0d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::Root::mFirstTimePostWindowInit</definition>
        <argsstring></argsstring>
        <name>mFirstTimePostWindowInit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="79" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a8341af8ef082c826af5c783b1e546351" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1LogManager" kindref="compound">LogManager</ref> *</type>
        <definition>LogManager* Ogre::Root::mLogManager</definition>
        <argsstring></argsstring>
        <name>mLogManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="82" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aca560aa062fd1e99ddbd9b3b05e928ff" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ControllerManager" kindref="compound">ControllerManager</ref> *</type>
        <definition>ControllerManager* Ogre::Root::mControllerManager</definition>
        <argsstring></argsstring>
        <name>mControllerManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="83" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a1a7f24c00c7b3df355d050a5854a1938" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SceneManagerEnumerator" kindref="compound">SceneManagerEnumerator</ref> *</type>
        <definition>SceneManagerEnumerator* Ogre::Root::mSceneManagerEnum</definition>
        <argsstring></argsstring>
        <name>mSceneManagerEnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="84" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a87ccdca2a9e6d8fe111cd18169983986" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Root_1a71fc72b82de9741751d52b64dc3faaad" kindref="member">SceneManagerStack</ref></type>
        <definition>SceneManagerStack Ogre::Root::mSceneManagerStack</definition>
        <argsstring></argsstring>
        <name>mSceneManagerStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="86" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ae52533981f8d4db39286fdea5e8a3405" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1DynLibManager" kindref="compound">DynLibManager</ref> *</type>
        <definition>DynLibManager* Ogre::Root::mDynLibManager</definition>
        <argsstring></argsstring>
        <name>mDynLibManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="87" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a39be2ce244e0157fa2be4ff71e77cc06" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ArchiveManager" kindref="compound">ArchiveManager</ref> *</type>
        <definition>ArchiveManager* Ogre::Root::mArchiveManager</definition>
        <argsstring></argsstring>
        <name>mArchiveManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="88" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ace4669983441a497dc4b715385542715" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MaterialManager" kindref="compound">MaterialManager</ref> *</type>
        <definition>MaterialManager* Ogre::Root::mMaterialManager</definition>
        <argsstring></argsstring>
        <name>mMaterialManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="89" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ac33d490d608098e459b667b14c7c830d" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MeshManager" kindref="compound">MeshManager</ref> *</type>
        <definition>MeshManager* Ogre::Root::mMeshManager</definition>
        <argsstring></argsstring>
        <name>mMeshManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="90" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a9c16c659560840de45862a7899f3efee" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ParticleSystemManager" kindref="compound">ParticleSystemManager</ref> *</type>
        <definition>ParticleSystemManager* Ogre::Root::mParticleManager</definition>
        <argsstring></argsstring>
        <name>mParticleManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="91" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a3ff49e0d841093e25be173ade78bbf7b" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1SkeletonManager" kindref="compound">SkeletonManager</ref> *</type>
        <definition>SkeletonManager* Ogre::Root::mSkeletonManager</definition>
        <argsstring></argsstring>
        <name>mSkeletonManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="92" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ad3f2106ce6c45d03776ee919078d2acc" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1OverlayElementFactory" kindref="compound">OverlayElementFactory</ref> *</type>
        <definition>OverlayElementFactory* Ogre::Root::mPanelFactory</definition>
        <argsstring></argsstring>
        <name>mPanelFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="93" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1addebb508d0904d9f6237fdcbddb54215" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1OverlayElementFactory" kindref="compound">OverlayElementFactory</ref> *</type>
        <definition>OverlayElementFactory* Ogre::Root::mBorderPanelFactory</definition>
        <argsstring></argsstring>
        <name>mBorderPanelFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="94" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ae063ca132e7f404a8393b66a4b115401" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1OverlayElementFactory" kindref="compound">OverlayElementFactory</ref> *</type>
        <definition>OverlayElementFactory* Ogre::Root::mTextAreaFactory</definition>
        <argsstring></argsstring>
        <name>mTextAreaFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="95" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a52a04311ae0f5779d830c84c956576cf" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1OverlayManager" kindref="compound">OverlayManager</ref> *</type>
        <definition>OverlayManager* Ogre::Root::mOverlayManager</definition>
        <argsstring></argsstring>
        <name>mOverlayManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="96" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a15d27dc1773514f058f8db32b47c24ac" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1FontManager" kindref="compound">FontManager</ref> *</type>
        <definition>FontManager* Ogre::Root::mFontManager</definition>
        <argsstring></argsstring>
        <name>mFontManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="97" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a4cc4ec802be128faacb7d78ce5bfd370" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ArchiveFactory" kindref="compound">ArchiveFactory</ref> *</type>
        <definition>ArchiveFactory* Ogre::Root::mZipArchiveFactory</definition>
        <argsstring></argsstring>
        <name>mZipArchiveFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="98" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a1cccf888960743f00f7b56c9f0cd3d4a" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ArchiveFactory" kindref="compound">ArchiveFactory</ref> *</type>
        <definition>ArchiveFactory* Ogre::Root::mEmbeddedZipArchiveFactory</definition>
        <argsstring></argsstring>
        <name>mEmbeddedZipArchiveFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="99" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a443782dd5784e3465095642c61147689" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ArchiveFactory" kindref="compound">ArchiveFactory</ref> *</type>
        <definition>ArchiveFactory* Ogre::Root::mFileSystemArchiveFactory</definition>
        <argsstring></argsstring>
        <name>mFileSystemArchiveFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="100" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a0ac225dbbfb1d3f16483e89218887c42" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ResourceGroupManager" kindref="compound">ResourceGroupManager</ref> *</type>
        <definition>ResourceGroupManager* Ogre::Root::mResourceGroupManager</definition>
        <argsstring></argsstring>
        <name>mResourceGroupManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="101" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a2c2cfee01223cf83b295a98ee36145f2" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ResourceBackgroundQueue" kindref="compound">ResourceBackgroundQueue</ref> *</type>
        <definition>ResourceBackgroundQueue* Ogre::Root::mResourceBackgroundQueue</definition>
        <argsstring></argsstring>
        <name>mResourceBackgroundQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="102" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a39cea6378ad03076211928a2cf22e304" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ShadowTextureManager" kindref="compound">ShadowTextureManager</ref> *</type>
        <definition>ShadowTextureManager* Ogre::Root::mShadowTextureManager</definition>
        <argsstring></argsstring>
        <name>mShadowTextureManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="103" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a7340f1cbad449a8fee38543d960e9c2e" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1RenderSystemCapabilitiesManager" kindref="compound">RenderSystemCapabilitiesManager</ref> *</type>
        <definition>RenderSystemCapabilitiesManager* Ogre::Root::mRenderSystemCapabilitiesManager</definition>
        <argsstring></argsstring>
        <name>mRenderSystemCapabilitiesManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="104" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a3d770fbd120b23453b8a718d1a5edf8b" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ScriptCompilerManager" kindref="compound">ScriptCompilerManager</ref> *</type>
        <definition>ScriptCompilerManager* Ogre::Root::mCompilerManager</definition>
        <argsstring></argsstring>
        <name>mCompilerManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="105" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a00766217e5b7cbce206517ddf323ae0d" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1LodStrategyManager" kindref="compound">LodStrategyManager</ref> *</type>
        <definition>LodStrategyManager* Ogre::Root::mLodStrategyManager</definition>
        <argsstring></argsstring>
        <name>mLodStrategyManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="106" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aeb4e1f65f6a10e279660a79124b79066" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Timer" kindref="compound">Timer</ref> *</type>
        <definition>Timer* Ogre::Root::mTimer</definition>
        <argsstring></argsstring>
        <name>mTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="108" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a709848bdc0d717b00e17137422a2223c" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1RenderWindow" kindref="compound">RenderWindow</ref> *</type>
        <definition>RenderWindow* Ogre::Root::mAutoWindow</definition>
        <argsstring></argsstring>
        <name>mAutoWindow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="109" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ae890212d6b5b58ebdd8c60b5ec2f798a" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Profiler" kindref="compound">Profiler</ref> *</type>
        <definition>Profiler* Ogre::Root::mProfiler</definition>
        <argsstring></argsstring>
        <name>mProfiler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="110" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a63a833e5c6c3552ecc9feba72f80567e" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1HighLevelGpuProgramManager" kindref="compound">HighLevelGpuProgramManager</ref> *</type>
        <definition>HighLevelGpuProgramManager* Ogre::Root::mHighLevelGpuProgramManager</definition>
        <argsstring></argsstring>
        <name>mHighLevelGpuProgramManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="111" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a52c7427e8a66c0462485c8e2f679b329" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1ExternalTextureSourceManager" kindref="compound">ExternalTextureSourceManager</ref> *</type>
        <definition>ExternalTextureSourceManager* Ogre::Root::mExternalTextureSourceManager</definition>
        <argsstring></argsstring>
        <name>mExternalTextureSourceManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="112" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a7e0f9cf69e91d888be189ae48ff862bd" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1CompositorManager" kindref="compound">CompositorManager</ref> *</type>
        <definition>CompositorManager* Ogre::Root::mCompositorManager</definition>
        <argsstring></argsstring>
        <name>mCompositorManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="113" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ab820ed46c603efb21feef351d227d857" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Ogre::Root::mNextFrame</definition>
        <argsstring></argsstring>
        <name>mNextFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="114" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ac8539d70ee251556a15b47ffddf4da47" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::Root::mFrameSmoothingTime</definition>
        <argsstring></argsstring>
        <name>mFrameSmoothingTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="115" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1af41c03d6a03412ecfcdfac3461e343b3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::Root::mRemoveQueueStructuresOnClear</definition>
        <argsstring></argsstring>
        <name>mRemoveQueueStructuresOnClear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="116" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a4cf302eb736882c858fea3b1ad44d5e4" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::Root::mDefaultMinPixelSize</definition>
        <argsstring></argsstring>
        <name>mDefaultMinPixelSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="117" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a7adceb013794ab1139e0611bb85a4f89" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Root_1a4f51fe7c71b67eb166e0c34891611f65" kindref="member">PluginLibList</ref></type>
        <definition>PluginLibList Ogre::Root::mPluginLibs</definition>
        <argsstring></argsstring>
        <name>mPluginLibs</name>
        <briefdescription>
<para>List of plugin DLLs loaded. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="124" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ab35dafba14a43e3fa34c586bb7742742" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Root_1a5483dc1f87b9861cae629b5aba6a6071" kindref="member">PluginInstanceList</ref></type>
        <definition>PluginInstanceList Ogre::Root::mPlugins</definition>
        <argsstring></argsstring>
        <name>mPlugins</name>
        <briefdescription>
<para>List of <ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> instances registered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="126" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aa6113aa862fd0e7cb9bbe3e9a961971a" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Root_1a55670df9d65002a8712ac0be55f6b259" kindref="member">MovableObjectFactoryMap</ref></type>
        <definition>MovableObjectFactoryMap Ogre::Root::mMovableObjectFactoryMap</definition>
        <argsstring></argsstring>
        <name>mMovableObjectFactoryMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="129" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a605b3bfce0863ec488c3bb6c317ea1d4" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::Root::mNextMovableObjectTypeFlag</definition>
        <argsstring></argsstring>
        <name>mNextMovableObjectTypeFlag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="130" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aa106f6583741c6b9a046a17228a5a5b7" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::mEntityFactory</definition>
        <argsstring></argsstring>
        <name>mEntityFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="132" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a213edd5d35c2447e1151fae69914f9d6" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::mLightFactory</definition>
        <argsstring></argsstring>
        <name>mLightFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="133" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1abfac646f213dd7979133d226f86412a9" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::mBillboardSetFactory</definition>
        <argsstring></argsstring>
        <name>mBillboardSetFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="134" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aadd8acdd959f49fb6a810420029eeea6" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::mManualObjectFactory</definition>
        <argsstring></argsstring>
        <name>mManualObjectFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="135" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ae9209b24ac7527d700763c09a6363c3c" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::mBillboardChainFactory</definition>
        <argsstring></argsstring>
        <name>mBillboardChainFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="136" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ab5407b6438073851223bdae66324278e" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::mRibbonTrailFactory</definition>
        <argsstring></argsstring>
        <name>mRibbonTrailFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="137" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ab1ce8a35c1865013315a7f8fd79e15e5" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Root_1a47157fb47b40fc61942b1fc17fd7fafd" kindref="member">RenderQueueInvocationSequenceMap</ref></type>
        <definition>RenderQueueInvocationSequenceMap Ogre::Root::mRQSequenceMap</definition>
        <argsstring></argsstring>
        <name>mRQSequenceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="140" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1ab140f852c36efd9148aa24a78d49f572" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::Root::mIsInitialised</definition>
        <argsstring></argsstring>
        <name>mIsInitialised</name>
        <briefdescription>
<para>Are we initialised yet? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="143" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a6334087718cb89a5d77910ec5418d4f5" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1WorkQueue" kindref="compound">WorkQueue</ref> *</type>
        <definition>WorkQueue* Ogre::Root::mWorkQueue</definition>
        <argsstring></argsstring>
        <name>mWorkQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="145" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1afaaa161c9e522097f1a01a90484be1a3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::Root::mIsBlendIndicesGpuRedundant</definition>
        <argsstring></argsstring>
        <name>mIsBlendIndicesGpuRedundant</name>
        <briefdescription>
<para>Tells whether blend indices information needs to be passed to the GPU. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="148" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1aabcc1509bd438c6ffcd10534d259a45a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ogre::Root::mIsBlendWeightsGpuRedundant</definition>
        <argsstring></argsstring>
        <name>mIsBlendWeightsGpuRedundant</name>
        <briefdescription>
<para>Tells whether blend weights information needs to be passed to the GPU. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="150" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a6337b89d271443a0964765f53f1becd4" prot="protected" static="no" mutable="no">
        <type><ref refid="structOgre_1_1set" kindref="compound">set</ref>&lt; <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> * &gt;::type</type>
        <definition>set&lt;FrameListener*&gt;::type Ogre::Root::mFrameListeners</definition>
        <argsstring></argsstring>
        <name>mFrameListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set of registered frame listeners </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="176" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1a2aacd5f1c3dcd7ca6c45b6e0d013516a" prot="protected" static="no" mutable="no">
        <type><ref refid="structOgre_1_1set" kindref="compound">set</ref>&lt; <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> * &gt;::type</type>
        <definition>set&lt;FrameListener*&gt;::type Ogre::Root::mRemovedFrameListeners</definition>
        <argsstring></argsstring>
        <name>mRemovedFrameListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set of frame listeners marked for removal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="179" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOgre_1_1Root_1afdcf19edc9d8b35905b436cbb23a8d30" prot="protected" static="no" mutable="no">
        <type><ref refid="classOgre_1_1Root_1ab1fb026ba6b14078cacd620e7f2a8c3a" kindref="member">EventTimesQueue</ref></type>
        <definition>EventTimesQueue Ogre::Root::mEventTimes[FETT_COUNT]</definition>
        <argsstring>[FETT_COUNT]</argsstring>
        <name>mEventTimes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="192" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOgre_1_1Root_1adaaebab61f306315895f1d513bf43378" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::loadPlugins</definition>
        <argsstring>(const String &amp;pluginsfile=&quot;plugins.cfg&quot;)</argsstring>
        <name>loadPlugins</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>pluginsfile</declname>
          <defval>&quot;plugins.cfg&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method reads a plugins configuration file and instantiates all plugins. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pluginsfile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that contains plugins information. Defaults to &quot;plugins.cfg&quot;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="158"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a18bb6fd6e4bc7d840708711acb583192" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::initialisePlugins</definition>
        <argsstring>()</argsstring>
        <name>initialisePlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise all loaded plugins - allows plugins to perform actions once the renderer is initialised. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="162"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a10298d35134c643023d96d191e67ecc4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::shutdownPlugins</definition>
        <argsstring>()</argsstring>
        <name>shutdownPlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shuts down all loaded plugins - allows things to be tidied up whilst all plugins are still loaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="166"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1abac5dadb6113c551560136edc3567611" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::unloadPlugins</definition>
        <argsstring>()</argsstring>
        <name>unloadPlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unloads all loaded plugins. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a47555efb676ce85beb51df0d7b0f6eae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::oneTimePostWindowInit</definition>
        <argsstring>(void)</argsstring>
        <name>oneTimePostWindowInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="173"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a589c6e44ae36cec130d0dcb8ca551f08" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::Root::calculateEventTime</definition>
        <argsstring>(unsigned long now, FrameEventTimeType type)</argsstring>
        <name>calculateEventTime</name>
        <param>
          <type>unsigned long</type>
          <declname>now</declname>
        </param>
        <param>
          <type><ref refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342" kindref="member">FrameEventTimeType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method for calculating the average time between recently fired events. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>now</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time in ms. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of event to be considered. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="198"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af72102f9e62bac4e907480222d524a15" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::populateFrameEvent</definition>
        <argsstring>(FrameEventTimeType type, FrameEvent &amp;evtToUpdate)</argsstring>
        <name>populateFrameEvent</name>
        <param>
          <type><ref refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342" kindref="member">FrameEventTimeType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structOgre_1_1FrameEvent" kindref="compound">FrameEvent</ref> &amp;</type>
          <declname>evtToUpdate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update a set of event times (note, progressive, only call once for each type per frame) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="201"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOgre_1_1Root_1a293d1580c95101d72f2155e3fe2237bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ogre::Root::Root</definition>
        <argsstring>(const String &amp;pluginFileName=&quot;plugins.cfg&quot;, const String &amp;configFileName=&quot;ogre.cfg&quot;, const String &amp;logFileName=&quot;Ogre.log&quot;)</argsstring>
        <name>Root</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>pluginFileName</declname>
          <defval>&quot;plugins.cfg&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>configFileName</declname>
          <defval>&quot;ogre.cfg&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>logFileName</declname>
          <defval>&quot;Ogre.log&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pluginFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that contains plugins information. Defaults to &quot;plugins.cfg&quot;, may be left blank to ignore. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>configFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that contains the configuration to be loaded. Defaults to &quot;ogre.cfg&quot;, may be left blank to load nothing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The logfile to create, defaults to Ogre.log, may be left blank if you&apos;ve already set up <ref refid="classOgre_1_1LogManager" kindref="compound">LogManager</ref> &amp; <ref refid="classOgre_1_1Log" kindref="compound">Log</ref> yourself </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="215"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ae093f91224577ccb051ac3d8e84c6db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ogre::Root::~Root</definition>
        <argsstring>()</argsstring>
        <name>~Root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="216"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1adc6946eb808dd76774d2c95ae1e0c6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::saveConfig</definition>
        <argsstring>(void)</argsstring>
        <name>saveConfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves the details of the current configuration <simplesect kind="remark"><para>Stores details of the current configuration so it may be restored later on. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="223"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a816c44429449ce436837f53cd4cb8e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::restoreConfig</definition>
        <argsstring>(void)</argsstring>
        <name>restoreConfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks for saved video/sound/etc settings <simplesect kind="remark"><para>This method checks to see if there is a valid saved configuration from a previous run. If there is, the state of the system will be restored to that configuration.</para></simplesect>
<simplesect kind="return"><para>If a valid configuration was found, <bold>true</bold> is returned. </para></simplesect>
<simplesect kind="par"><title></title><para>If there is no saved configuration, or if the system failed with the last config settings, <bold>false</bold> is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="237"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a3fc8aeaf22da1dccc72ad9fc74b5ef14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::showConfigDialog</definition>
        <argsstring>(void)</argsstring>
        <name>showConfigDialog</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Displays a dialog asking the user to choose system settings. <simplesect kind="remark"><para>This method displays the default dialog allowing the user to choose the rendering system, video mode etc. If there is are any settings saved already, they will be restored automatically before displaying the dialogue. When the user accepts a group of settings, this will automatically call <ref refid="classOgre_1_1Root_1af768914a0dd431ee442bf83157daf570" kindref="member">Root::setRenderSystem</ref>, <ref refid="classOgre_1_1RenderSystem_1a606200a27a8adebfa62b3e388a49cf39" kindref="member">RenderSystem::setConfigOption</ref> and <ref refid="classOgre_1_1Root_1adc6946eb808dd76774d2c95ae1e0c6d9" kindref="member">Root::saveConfig</ref> with the user&apos;s choices. This is the easiest way to get the system configured. </para></simplesect>
<simplesect kind="return"><para>If the user clicked &apos;Ok&apos;, <bold>true</bold> is returned. </para></simplesect>
<simplesect kind="par"><title></title><para>If they clicked &apos;Cancel&apos; (in which case the app should strongly consider terminating), <bold>false</bold> is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="255"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ae3d8c9161ddf19b4130813d9b5d51905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::addRenderSystem</definition>
        <argsstring>(RenderSystem *newRend)</argsstring>
        <name>addRenderSystem</name>
        <param>
          <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
          <declname>newRend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a new rendering subsystem to the list of available renderers. <simplesect kind="remark"><para>Intended for use by advanced users and plugin writers only! Calling this method with a pointer to a valid <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> (subclass) adds a rendering API implementation to the list of available ones. Typical examples would be an OpenGL implementation and a Direct3D implementation. </para></simplesect>
<simplesect kind="note"><para><linebreak/>
This should usually be called from the dllStartPlugin() function of an extension plug-in. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="268"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a44c5c5f2f90057d57d270c9200cd1588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__General_1ga8ec3f24590c290929ec15b4af5757351" kindref="member">RenderSystemList</ref> &amp;</type>
        <definition>const RenderSystemList&amp; Ogre::Root::getAvailableRenderers</definition>
        <argsstring>(void)</argsstring>
        <name>getAvailableRenderers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a list of the available render systems. <simplesect kind="remark"><para>Retrieves a pointer to the list of available renderers as a list of <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> subclasses. Can be used to build a custom settings dialog. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="276"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1adaeb26515fba041094510f71fb6757c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
        <definition>RenderSystem* Ogre::Root::getRenderSystemByName</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>getRenderSystemByName</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a pointer to the render system by the given name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the render system intend to retrieve. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the render system, <bold>NULL</bold> if no found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="284"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af768914a0dd431ee442bf83157daf570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setRenderSystem</definition>
        <argsstring>(RenderSystem *system)</argsstring>
        <name>setRenderSystem</name>
        <param>
          <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
          <declname>system</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the rendering subsystem to be used. <simplesect kind="remark"><para>This method indicates to OGRE which rendering system is to be used (e.g. Direct3D, OpenGL etc). This is called automatically by the default config dialog, and when settings are restored from a previous configuraion. If used manually it could be used to set the renderer from a custom settings dialog. Once this has been done, the renderer can be initialised using <ref refid="classOgre_1_1Root_1ab940f0e3b8bff37feb0987c8b3e128b5" kindref="member">Root::initialise</ref>. </para></simplesect>
<simplesect kind="par"><title></title><para>This method is also called by render systems if they are initialised directly. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>system</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the render system to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="303"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ab8ca3d5abebba7a14650db5f618286d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> *</type>
        <definition>RenderSystem* Ogre::Root::getRenderSystem</definition>
        <argsstring>(void)</argsstring>
        <name>getRenderSystem</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a pointer to the currently selected render system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="307"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ab940f0e3b8bff37feb0987c8b3e128b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderWindow" kindref="compound">RenderWindow</ref> *</type>
        <definition>RenderWindow* Ogre::Root::initialise</definition>
        <argsstring>(bool autoCreateWindow, const String &amp;windowTitle=&quot;OGRE Render Window&quot;, const String &amp;customCapabilitiesConfig=StringUtil::BLANK)</argsstring>
        <name>initialise</name>
        <param>
          <type>bool</type>
          <declname>autoCreateWindow</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>windowTitle</declname>
          <defval>&quot;OGRE Render Window&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>customCapabilitiesConfig</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialises the renderer. <simplesect kind="remark"><para>This method can only be called after a renderer has been selected with <ref refid="classOgre_1_1Root_1af768914a0dd431ee442bf83157daf570" kindref="member">Root::setRenderSystem</ref>, and it will initialise the selected rendering system ready for use. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autoCreateWindow</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, a rendering window will automatically be created (saving a call to <ref refid="classOgre_1_1Root_1a537b7d1d0937f799cfe4936f6b672620" kindref="member">Root::createRenderWindow</ref>). The window will be created based on the options currently set on the render system. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the automatically created window, if requested, otherwise <bold>NULL</bold>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="325"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a792a705f087b59b4760d068aebb689cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::isInitialised</definition>
        <argsstring>(void) const </argsstring>
        <name>isInitialised</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the system is initialised or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="328" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a0c36540d9764ec4e41940423dd0ae88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::useCustomRenderSystemCapabilities</definition>
        <argsstring>(RenderSystemCapabilities *capabilities)</argsstring>
        <name>useCustomRenderSystemCapabilities</name>
        <param>
          <type><ref refid="classOgre_1_1RenderSystemCapabilities" kindref="compound">RenderSystemCapabilities</ref> *</type>
          <declname>capabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requests active <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> to use custom <ref refid="classOgre_1_1RenderSystemCapabilities" kindref="compound">RenderSystemCapabilities</ref> <simplesect kind="remark"><para>This is useful for testing how the <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> would behave on a machine with less advanced GPUs. This method MUST be called before creating the first <ref refid="classOgre_1_1RenderWindow" kindref="compound">RenderWindow</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="335"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ad9abb5bd238fbcaa7ec0474ea1de1220" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::getRemoveRenderQueueStructuresOnClear</definition>
        <argsstring>() const </argsstring>
        <name>getRemoveRenderQueueStructuresOnClear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether the entire render queue structure should be emptied on clearing, or whether just the objects themselves should be cleared. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="340" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1acdac409627b2920ecb99f4d1cd4af191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setRemoveRenderQueueStructuresOnClear</definition>
        <argsstring>(bool r)</argsstring>
        <name>setRemoveRenderQueueStructuresOnClear</name>
        <param>
          <type>bool</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether the entire render queue structure should be emptied on clearing, or whether just the objects themselves should be cleared. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="345" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a541c72ca9f592e7a754e751e2b55e934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::addSceneManagerFactory</definition>
        <argsstring>(SceneManagerFactory *fact)</argsstring>
        <name>addSceneManagerFactory</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManagerFactory" kindref="compound">SceneManagerFactory</ref> *</type>
          <declname>fact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new <ref refid="classOgre_1_1SceneManagerFactory" kindref="compound">SceneManagerFactory</ref>, a factory object for creating instances of specific SceneManagers. <simplesect kind="remark"><para>Plugins should call this to register as new <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> providers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="352"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1afdf0d57e4f6e80bb519336c56ec23a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::removeSceneManagerFactory</definition>
        <argsstring>(SceneManagerFactory *fact)</argsstring>
        <name>removeSceneManagerFactory</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManagerFactory" kindref="compound">SceneManagerFactory</ref> *</type>
          <declname>fact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister a <ref refid="classOgre_1_1SceneManagerFactory" kindref="compound">SceneManagerFactory</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="356"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a1dc4e50e8ecac2323bdea8f6ad999307" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structOgre_1_1SceneManagerMetaData" kindref="compound">SceneManagerMetaData</ref> *</type>
        <definition>const SceneManagerMetaData* Ogre::Root::getSceneManagerMetaData</definition>
        <argsstring>(const String &amp;typeName) const </argsstring>
        <name>getSceneManagerMetaData</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get more information about a given type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. <simplesect kind="remark"><para>The metadata returned tells you a few things about a given type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>, which can be created using a factory that has been registered already. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>The type name of the <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> you want to enquire on. If you don&apos;t know the typeName already, you can iterate over the metadata for all types using getMetaDataIterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="367"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a4e8400b2d0c34d7c6076a4e38044a1e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManagerEnumerator_1aba1ede3f8195a234c286f372ef181ce0" kindref="member">SceneManagerEnumerator::MetaDataIterator</ref></type>
        <definition>SceneManagerEnumerator::MetaDataIterator Ogre::Root::getSceneManagerMetaDataIterator</definition>
        <argsstring>(void) const </argsstring>
        <name>getSceneManagerMetaDataIterator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over all types of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> available for construction, providing some information about each one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="372"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a39df87f396245ac5c1c293c9e49451c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
        <definition>SceneManager* Ogre::Root::createSceneManager</definition>
        <argsstring>(const String &amp;typeName, const String &amp;instanceName=StringUtil::BLANK)</argsstring>
        <name>createSceneManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>instanceName</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> instance of a given type. <simplesect kind="remark"><para>You can use this method to create a <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> instance of a given specific type. You may know this type already, or you may have discovered it by looking at the results from getMetaDataIterator. </para></simplesect>
<simplesect kind="note"><para>This method throws an exception if the named type is not found. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>String identifying a unique <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instanceName</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional name to given the new instance that is created. If you leave this blank, an auto name will be assigned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="386"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aaec9595063dba21c06b94aa541a183e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
        <definition>SceneManager* Ogre::Root::createSceneManager</definition>
        <argsstring>(SceneTypeMask typeMask, const String &amp;instanceName=StringUtil::BLANK)</argsstring>
        <name>createSceneManager</name>
        <param>
          <type><ref refid="group__Scene_1gaa4b6dbd7bf722582a21fcc25d25f73ed" kindref="member">SceneTypeMask</ref></type>
          <declname>typeMask</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>instanceName</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> instance based on scene type support. <simplesect kind="remark"><para>Creates an instance of a <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> which supports the scene types identified in the parameter. If more than one type of <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> has been registered as handling that combination of scene types, in instance of the last one registered is returned. </para></simplesect>
<simplesect kind="note"><para>This method always succeeds, if a specific scene manager is not found, the default implementation is always returned. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeMask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask containing one or more SceneType flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instanceName</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional name to given the new instance that is created. If you leave this blank, an auto name will be assigned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="401"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a7ee696cf420c9fa73429b9aed250f6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::destroySceneManager</definition>
        <argsstring>(SceneManager *sm)</argsstring>
        <name>destroySceneManager</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an instance of a <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="404"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a6ce7950bbf4dcd91977d9b6f2c09dc1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
        <definition>SceneManager* Ogre::Root::getSceneManager</definition>
        <argsstring>(const String &amp;instanceName) const </argsstring>
        <name>getSceneManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an existing <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> instance that has already been created, identified by the instance name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instanceName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the instance to retrieve. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="410"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ae4e0a5b714f99772dd203400e0ef9ad9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::hasSceneManager</definition>
        <argsstring>(const String &amp;instanceName) const </argsstring>
        <name>hasSceneManager</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines if a given <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> already exists <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instanceName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the instance to retrieve. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="415"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ad961ad4d34de07ba101ea92e33007a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManagerEnumerator_1ad27d358bd89b7b44a8b360ce36df3aaa" kindref="member">SceneManagerEnumerator::SceneManagerIterator</ref></type>
        <definition>SceneManagerEnumerator::SceneManagerIterator Ogre::Root::getSceneManagerIterator</definition>
        <argsstring>(void)</argsstring>
        <name>getSceneManagerIterator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator over all the existing <ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> instances. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="417"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a55641d6a52ee618286bba6e9892e8d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1TextureManager" kindref="compound">TextureManager</ref> *</type>
        <definition>TextureManager* Ogre::Root::getTextureManager</definition>
        <argsstring>(void)</argsstring>
        <name>getTextureManager</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a reference to the current <ref refid="classOgre_1_1TextureManager" kindref="compound">TextureManager</ref>. <simplesect kind="remark"><para>This performs the same function as <ref refid="classOgre_1_1TextureManager_1ac6fb858ee86f3b7b75de32e3e04ee5c8" kindref="member">TextureManager::getSingleton</ref>, but is provided for convenience particularly to scripting engines. </para></simplesect>
<simplesect kind="par"><title></title><para>Note that a <ref refid="classOgre_1_1TextureManager" kindref="compound">TextureManager</ref> will NOT be available until the <ref refid="namespaceOgre" kindref="compound">Ogre</ref> system has been initialised by selecting a <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref>, calling <ref refid="classOgre_1_1Root_1ab940f0e3b8bff37feb0987c8b3e128b5" kindref="member">Root::initialise</ref> and a window having been created (this may have been done by initialise if required). This is because the exact runtime subclass which will be implementing the calls will differ depending on the rendering engine selected, and these typically require a window upon which to base texture format decisions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="434"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a3372db66af0d91da9184af90c1a68528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1MeshManager" kindref="compound">MeshManager</ref> *</type>
        <definition>MeshManager* Ogre::Root::getMeshManager</definition>
        <argsstring>(void)</argsstring>
        <name>getMeshManager</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a reference to the current <ref refid="classOgre_1_1MeshManager" kindref="compound">MeshManager</ref>. <simplesect kind="remark"><para>This performs the same function as <ref refid="classOgre_1_1MeshManager_1a2efefa307b7987c5fcff7e8c47f79758" kindref="member">MeshManager::getSingleton</ref> and is provided for convenience to scripting engines. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="441"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a6ed5ddc573f7cc53933c75c8aa1ebbc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref></type>
        <definition>String Ogre::Root::getErrorDescription</definition>
        <argsstring>(long errorNumber)</argsstring>
        <name>getErrorDescription</name>
        <param>
          <type>long</type>
          <declname>errorNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility function for getting a better description of an error code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="446"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aed3244a81b1c1cec76c675f8e62d7f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::addFrameListener</definition>
        <argsstring>(FrameListener *newListener)</argsstring>
        <name>addFrameListener</name>
        <param>
          <type><ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> *</type>
          <declname>newListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> which will be called back every frame. <simplesect kind="remark"><para>A <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> is a class which implements methods which will be called every frame. </para></simplesect>
<simplesect kind="par"><title></title><para>See the <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> class for more details on the specifics It is imperitive that the instance passed to this method is not destroyed before either the rendering loop ends, or the class is removed from the listening list using removeFrameListener. </para></simplesect>
<simplesect kind="note"><para><linebreak/>
This method can only be called after <ref refid="classOgre_1_1Root_1ab940f0e3b8bff37feb0987c8b3e128b5" kindref="member">Root::initialise</ref> has been called. </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref>, <ref refid="classOgre_1_1Root_1aba900bb388dd68af993df311076a9205" kindref="member">Root::removeFrameListener</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="464"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aba900bb388dd68af993df311076a9205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::removeFrameListener</definition>
        <argsstring>(FrameListener *oldListener)</argsstring>
        <name>removeFrameListener</name>
        <param>
          <type><ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> *</type>
          <declname>oldListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> from the list of listening classes. <simplesect kind="see"><para><ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref>, <ref refid="classOgre_1_1Root_1aed3244a81b1c1cec76c675f8e62d7f5e" kindref="member">Root::addFrameListener</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="470"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a3c48cb0d809b950335f4e24552c0a39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::queueEndRendering</definition>
        <argsstring>(void)</argsstring>
        <name>queueEndRendering</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queues the end of rendering. <simplesect kind="remark"><para>This method will do nothing unless <ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">startRendering()</ref> has been called, in which case before the next frame is rendered the rendering loop will bail out. </para></simplesect>
<simplesect kind="see"><para><ref refid="classOgre_1_1Root" kindref="compound">Root</ref>, <ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="480"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::startRendering</definition>
        <argsstring>(void)</argsstring>
        <name>startRendering</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts / restarts the automatic rendering cycle. <simplesect kind="remark"><para>This method begins the automatic rendering of the scene. It will <bold>NOT</bold> return until the rendering cycle is halted. </para></simplesect>
<simplesect kind="par"><title></title><para>During rendering, any <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> classes registered using addFrameListener will be called back for each frame that is to be rendered, These classes can tell OGRE to halt the rendering if required, which will cause this method to return. </para></simplesect>
<simplesect kind="note"><para><linebreak/>
Users of the OGRE library do not have to use this automatic rendering loop. It is there as a convenience and is most useful for high frame rate applications e.g. games. For applications that don&apos;t need to constantly refresh the rendering targets (e.g. an editor utility), it is better to manually refresh each render target only when required by calling <ref refid="classOgre_1_1RenderTarget_1a5f78714e152067e10b381f9d262bcacb" kindref="member">RenderTarget::update</ref>, or if you want to run your own render loop you can update all targets on demand using <ref refid="classOgre_1_1Root_1aeaad25268c0ad8007ce8961a32242c77" kindref="member">Root::renderOneFrame</ref>. </para><simplesectsep/><para>This frees up the CPU to do other things in between refreshes, since in this case frame rate is less important. </para><simplesectsep/><para>This method can only be called after <ref refid="classOgre_1_1Root_1ab940f0e3b8bff37feb0987c8b3e128b5" kindref="member">Root::initialise</ref> has been called. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="509"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aeaad25268c0ad8007ce8961a32242c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::renderOneFrame</definition>
        <argsstring>(void)</argsstring>
        <name>renderOneFrame</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render one frame. <simplesect kind="remark"><para>Updates all the render targets automatically and then returns, raising frame events before and after. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="516"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a7820badfeef2fb9994ea9de17facb218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::renderOneFrame</definition>
        <argsstring>(Real timeSinceLastFrame)</argsstring>
        <name>renderOneFrame</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>timeSinceLastFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render one frame, with custom frame time information. <simplesect kind="remark"><para>Updates all the render targets automatically and then returns, raising frame events before and after - all per-frame times are based on the time value you pass in. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="524"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1adc677530cc7ef50fbd0e37d75c02e16b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shuts down the system manually. <simplesect kind="remark"><para>This is normally done by <ref refid="namespaceOgre" kindref="compound">Ogre</ref> automatically so don&apos;t think you have to call this yourself. However this is here for convenience, especially for dealing with unexpected errors or for systems which need to shut down <ref refid="namespaceOgre" kindref="compound">Ogre</ref> on demand. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="533"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a1f736040c539391cf730eb3f7da05d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::addResourceLocation</definition>
        <argsstring>(const String &amp;name, const String &amp;locType, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, bool recursive=false)</argsstring>
        <name>addResourceLocation</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>locType</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a location to the list of searchable locations for a <ref refid="classOgre_1_1Resource" kindref="compound">Resource</ref> type. <simplesect kind="remark"><para><ref refid="classOgre_1_1Resource" kindref="compound">Resource</ref> files (textures, models etc) need to be loaded from specific locations. By calling this method, you add another search location to the list. Locations added first are preferred over locations added later. </para></simplesect>
<simplesect kind="par"><title></title><para>Locations can be folders, compressed archives, even perhaps remote locations. Facilities for loading from different locations are provided by plugins which provide implementations of the <ref refid="classOgre_1_1Archive" kindref="compound">Archive</ref> class. All the application user has to do is specify a &apos;loctype&apos; string in order to indicate the type of location, which should map onto one of the provided plugins. <ref refid="namespaceOgre" kindref="compound">Ogre</ref> comes configured with the &apos;FileSystem&apos; (folders) and &apos;Zip&apos; (archive compressed with the pkzip / WinZip etc utilities) types. </para></simplesect>
<simplesect kind="par"><title></title><para>You can also supply the name of a resource group which should have this location applied to it. The <ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref> group is the default, and one resource group which will always exist. You should consider defining resource groups for your more specific resources (e.g. per level) so that you can control loading / unloading better. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the location, e.g. &apos;./data&apos; or &apos;/compressed/gamedata.zip&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locType</parametername>
</parameternamelist>
<parameterdescription>
<para>A string identifying the location type, e.g. &apos;FileSystem&apos; (for folders), &apos;Zip&apos; etc. Must map to a registered plugin which deals with this type (FileSystem and Zip should always be available) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of name of the resource group which this location should apply to; defaults to the General group which applies to all non-specific resources. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recursive</parametername>
</parameternamelist>
<parameterdescription>
<para>If the resource location has a concept of recursive directory traversal, enabling this option will mean you can load resources in subdirectories using only their unqualified name. The default is to disable this so that resources in subdirectories with the same name are still unique. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classOgre_1_1Archive" kindref="compound">Archive</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="583"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a3a4c957e96e6c95f7f061166e363c378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::removeResourceLocation</definition>
        <argsstring>(const String &amp;name, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME)</argsstring>
        <name>removeResourceLocation</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a resource location from the list. <simplesect kind="see"><para><ref refid="classOgre_1_1Root_1a1f736040c539391cf730eb3f7da05d1d" kindref="member">addResourceLocation</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource location as specified in addResourceLocation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resource group to which this location was assigned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="592"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a88447ffc0d999675d0b0ad0bedfae8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Resources_1ga8a2a961b4205aacff9c01e81e08d7781" kindref="member">DataStreamPtr</ref></type>
        <definition>DataStreamPtr Ogre::Root::createFileStream</definition>
        <argsstring>(const String &amp;filename, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, bool overwrite=false, const String &amp;locationPattern=StringUtil::BLANK)</argsstring>
        <name>createFileStream</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>locationPattern</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper method to assist you in creating writeable file streams. <simplesect kind="remark"><para>This is a high-level utility method which you can use to find a place to save a file more easily. If the filename you specify is either an absolute or relative filename (ie it includes path separators), then the file will be created in the normal filesystem using that specification. If it doesn&apos;t, then the method will look for a writeable resource location via <ref refid="classOgre_1_1ResourceGroupManager_1a0425193c06cee0c82e78accf67eabac7" kindref="member">ResourceGroupManager::createResource</ref> using the other params provided. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to create. If it includes path separators, the filesystem will be accessed direct. If no path separators are present the resource system is used, falling back on the raw filesystem after. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the group in which to create the file, if the resource system is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, an existing file will be overwritten, if false an error will occur if the file already exists </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locationPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>If the resource group contains multiple locations, then usually the file will be created in the first writable location. If you want to be more specific, you can include a location pattern here and only locations which match that pattern (as determined by <ref refid="classOgre_1_1StringUtil_1a3005f863e31d14ad8e6502eb4d854709" kindref="member">StringUtil::match</ref>) will be considered candidates for creation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="616"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a0e0a84e6766fe2090937cd6bc89ace1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Resources_1ga8a2a961b4205aacff9c01e81e08d7781" kindref="member">DataStreamPtr</ref></type>
        <definition>DataStreamPtr Ogre::Root::openFileStream</definition>
        <argsstring>(const String &amp;filename, const String &amp;groupName=ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, const String &amp;locationPattern=StringUtil::BLANK)</argsstring>
        <name>openFileStream</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>groupName</declname>
          <defval><ref refid="classOgre_1_1ResourceGroupManager_1a813da407fd91dc1afee86103d3a4f5cc" kindref="member">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</ref></defval>
        </param>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>locationPattern</declname>
          <defval><ref refid="classOgre_1_1StringUtil_1ad2ead745c8c6f4f7056270e22f29e4da" kindref="member">StringUtil::BLANK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper method to assist you in accessing readable file streams. <simplesect kind="remark"><para>This is a high-level utility method which you can use to find a place to open a file more easily. It checks the resource system first, and if that fails falls back on accessing the file system directly. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the group in which to create the file, if the resource system is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locationPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>If the resource group contains multiple locations, then usually the file will be created in the first writable location. If you want to be more specific, you can include a location pattern here and only locations which match that pattern (as determined by <ref refid="classOgre_1_1StringUtil_1a3005f863e31d14ad8e6502eb4d854709" kindref="member">StringUtil::match</ref>) will be considered candidates for creation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="633"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a58fb421c717de3fcb51b1cf93da813ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::convertColourValue</definition>
        <argsstring>(const ColourValue &amp;colour, uint32 *pDest)</argsstring>
        <name>convertColourValue</name>
        <param>
          <type>const <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <param>
          <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref> *</type>
          <declname>pDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a packed data version of the passed in <ref refid="classOgre_1_1ColourValue" kindref="compound">ColourValue</ref> suitable for use with the current <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref>. <simplesect kind="remark"><para>Since different render systems have different colour data formats (eg RGBA for GL, ARGB for D3D) this method allows you to use 1 method for all. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pDest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to location to put the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="643"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a7f5006f1ef629981b96252860beef846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderWindow" kindref="compound">RenderWindow</ref> *</type>
        <definition>RenderWindow* Ogre::Root::getAutoCreatedWindow</definition>
        <argsstring>(void)</argsstring>
        <name>getAutoCreatedWindow</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to the window that was created automatically <simplesect kind="remark"><para>When <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> is initialised an optional window is created. This method retreives a pointer to that window. </para></simplesect>
<simplesect kind="note"><para>returns a null pointer when <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> has not been initialised with the option of creating a window. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="653"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a537b7d1d0937f799cfe4936f6b672620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderWindow" kindref="compound">RenderWindow</ref> *</type>
        <definition>RenderWindow* Ogre::Root::createRenderWindow</definition>
        <argsstring>(const String &amp;name, unsigned int width, unsigned int height, bool fullScreen, const NameValuePairList *miscParams=0)</argsstring>
        <name>createRenderWindow</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fullScreen</declname>
        </param>
        <param>
          <type>const <ref refid="group__General_1gadccb207c184efc0a6fb2a00ab6320d19" kindref="member">NameValuePairList</ref> *</type>
          <declname>miscParams</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="RenderSystem::_createRenderWindow"><para>Creates a new rendering window. <simplesect kind="remark"><para>This method creates a new rendering window as specified by the paramteters. The rendering system could be responible for only a single window (e.g. in the case of a game), or could be in charge of multiple ones (in the case of a level editor). The option to create the window as a child of another is therefore given. This method will create an appropriate subclass of <ref refid="classOgre_1_1RenderWindow" kindref="compound">RenderWindow</ref> depending on the API and platform implementation. </para></simplesect>
<simplesect kind="par"><title></title><para>After creation, this window can be retrieved using <ref refid="classOgre_1_1RenderSystem_1a313d7af5018e65802d96aa7124700db7" kindref="member">getRenderTarget()</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the window. Used in other methods later like setRenderTarget and getRenderTarget. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the new window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the new window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullScreen</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify true to make the window full screen without borders, title bar or menu bar. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>miscParams</parametername>
</parameternamelist>
<parameterdescription>
<para>A NameValuePairList describing the other parameters for the new rendering window. Options are case sensitive. Unrecognised parameters will be ignored silently. These values might be platform dependent, but these are present for all platforms unless indicated otherwise: <table rows="25" cols="6"><row>
<entry thead="no"><para><bold>Key</bold> </para></entry><entry thead="no"><para><bold>Type/Values</bold> </para></entry><entry thead="no"><para><bold>Default</bold> </para></entry><entry thead="no"><para><bold>Description</bold> </para></entry><entry thead="no"><para><bold>Notes</bold>  </para></entry></row>
<row>
<entry thead="no"><para>title </para></entry><entry thead="no"><para><ref refid="classOgre_1_1Any" kindref="compound">Any</ref> string </para></entry><entry thead="no"><para><ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> name </para></entry><entry thead="no"><para>The title of the window that will appear in the title bar </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>colourDepth </para></entry><entry thead="no"><para>16, 32 </para></entry><entry thead="no"><para>Desktop depth </para></entry><entry thead="no"><para>Colour depth of the resulting rendering window; only applies if fullScreen </para></entry><entry thead="no"><para>Win32 Specific  </para></entry></row>
<row>
<entry thead="no"><para>left </para></entry><entry thead="no"><para>Positive integers </para></entry><entry thead="no"><para>Centred </para></entry><entry thead="no"><para>Screen x coordinate from left </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>top </para></entry><entry thead="no"><para>Positive integers </para></entry><entry thead="no"><para>Centred </para></entry><entry thead="no"><para>Screen y coordinate from left </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>depthBuffer </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>true </para></entry><entry thead="no"><para>Use depth buffer </para></entry><entry thead="no"><para>DirectX9 specific  </para></entry></row>
<row>
<entry thead="no"><para>externalWindowHandle </para></entry><entry thead="no"><para>Win32: HWND as integer<linebreak/>
 GLX: poslong:posint:poslong (display*:screen:windowHandle) or poslong:posint:poslong:poslong (display*:screen:windowHandle:XVisualInfo*)<linebreak/>
 OS X: WindowRef for Carbon or NSWindow for Cocoa address as an integer iOS: UIWindow address as an integer  </para></entry><entry thead="no"><para>0 (none) </para></entry><entry thead="no"><para>External window handle, for embedding the OGRE render in an existing window </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>externalGLControl </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>Let the external window control OpenGL i.e. don&apos;t select a pixel format for the window, do not change v-sync and do not swap buffer. When set to true, the calling application is responsible of OpenGL initialization and buffer swapping. It should also create an OpenGL context for its own rendering, <ref refid="namespaceOgre" kindref="compound">Ogre</ref> will create one for its use. Then the calling application must also enable <ref refid="namespaceOgre" kindref="compound">Ogre</ref> OpenGL context before calling any <ref refid="namespaceOgre" kindref="compound">Ogre</ref> function and restore its OpenGL context after these calls. </para></entry><entry thead="no"><para>OpenGL specific  </para></entry></row>
<row>
<entry thead="no"><para>externalGLContext </para></entry><entry thead="no"><para>Context as Unsigned Long </para></entry><entry thead="no"><para>0 (create own context) </para></entry><entry thead="no"><para>Use an externally created GL context </para></entry><entry thead="no"><para>OpenGL Specific  </para></entry></row>
<row>
<entry thead="no"><para>parentWindowHandle </para></entry><entry thead="no"><para>Win32: HWND as integer<linebreak/>
 GLX: poslong:posint:poslong (display*:screen:windowHandle) or poslong:posint:poslong:poslong (display*:screen:windowHandle:XVisualInfo*) </para></entry><entry thead="no"><para>0 (none) </para></entry><entry thead="no"><para>Parent window handle, for embedding the OGRE in a child of an external window </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>macAPI </para></entry><entry thead="no"><para>String: &quot;cocoa&quot; or &quot;carbon&quot; </para></entry><entry thead="no"><para>&quot;carbon&quot; </para></entry><entry thead="no"><para>Specifies the type of rendering window on the Mac Platform. </para></entry><entry thead="no"><para>Mac OS X Specific </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>macAPICocoaUseNSView </para></entry><entry thead="no"><para>bool &quot;true&quot; or &quot;false&quot; </para></entry><entry thead="no"><para>&quot;false&quot; </para></entry><entry thead="no"><para>On the Mac platform the most diffused method to embed OGRE in a custom application is to use Interface Builder and add to the interface an instance of <ref refid="interfaceOgreView" kindref="compound">OgreView</ref>. The pointer to this instance is then used as &quot;externalWindowHandle&quot;. However, there are cases where you are NOT using Interface Builder and you get the Cocoa NSView* of an existing interface. For example, this is happens when you want to render into a Java/AWT interface. In short, by setting this flag to &quot;true&quot; the <ref refid="classOgre_1_1Root_1a537b7d1d0937f799cfe4936f6b672620" kindref="member">Ogre::Root::createRenderWindow</ref> interprets the &quot;externalWindowHandle&quot; as a NSView* instead of an OgreView*. See OgreOSXCocoaView.h/mm.  </para></entry><entry thead="no"><para>Mac OS X Specific </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>contentScalingFactor </para></entry><entry thead="no"><para>Positive Float greater than 1.0 </para></entry><entry thead="no"><para>The default content scaling factor of the screen </para></entry><entry thead="no"><para>Specifies the CAEAGLLayer content scaling factor. Only supported on iOS 4 or greater. This can be useful to limit the resolution of the OpenGL ES backing store. For example, the iPhone 4&apos;s native resolution is 960 x 640. Windows are always 320 x 480, if you would like to limit the display to 720 x 480, specify 1.5 as the scaling factor.  </para></entry><entry thead="no"><para>iOS Specific </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>externalViewHandle </para></entry><entry thead="no"><para>UIView pointer as an integer </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>External view handle, for rendering OGRE render in an existing view </para></entry><entry thead="no"><para>iOS Specific </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>externalViewControllerHandle </para></entry><entry thead="no"><para>UIViewController pointer as an integer </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>External view controller handle, for embedding OGRE in an existing view controller </para></entry><entry thead="no"><para>iOS Specific </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>FSAA </para></entry><entry thead="no"><para>Positive integer (usually 0, 2, 4, 8, 16) </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Full screen antialiasing factor </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>FSAAHint </para></entry><entry thead="no"><para>Depends on <ref refid="classOgre_1_1RenderSystem" kindref="compound">RenderSystem</ref> and hardware. Currently supports:<linebreak/>
 &quot;Quality&quot;: on systems that have an option to prefer higher AA quality over speed, use it </para></entry><entry thead="no"><para>Blank </para></entry><entry thead="no"><para>Full screen antialiasing hint </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>displayFrequency </para></entry><entry thead="no"><para>Refresh rate in Hertz (e.g. 60, 75, 100) </para></entry><entry thead="no"><para>Desktop vsync rate </para></entry><entry thead="no"><para>Display frequency rate, for fullscreen mode </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>vsync </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>Synchronize buffer swaps to monitor vsync, eliminating tearing at the expense of a fixed frame rate </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>vsyncInterval </para></entry><entry thead="no"><para>1, 2, 3, 4 </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>If vsync is enabled, the minimum number of vertical blanks that should occur between renders. For example if vsync is enabled, the refresh rate is 60 and this is set to 2, then the frame rate will be locked at 30. </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>border </para></entry><entry thead="no"><para>none, fixed, resize </para></entry><entry thead="no"><para>resize </para></entry><entry thead="no"><para>The type of window border (in windowed mode) </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>outerDimensions </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>Whether the width/height is expressed as the size of the outer window, rather than the content area </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>useNVPerfHUD </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>Enable the use of nVidia NVPerfHUD </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>gamma </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>Enable hardware conversion from linear colour space to gamma colour space on rendering to the window. </para></entry><entry thead="no"><para><nonbreakablespace/>  </para></entry></row>
<row>
<entry thead="no"><para>enableDoubleClick </para></entry><entry thead="no"><para>true, false </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>Enable the window to keep track and transmit double click messages. </para></entry><entry thead="no"><para>Win32 Specific  </para></entry></row>
</table>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="658"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aeda5e7e1148739e9fbbb2113bb47a6e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::createRenderWindows</definition>
        <argsstring>(const RenderWindowDescriptionList &amp;renderWindowDescriptions, RenderWindowList &amp;createdWindows)</argsstring>
        <name>createRenderWindows</name>
        <param>
          <type>const <ref refid="group__General_1ga7a03bf97326d0d0385b91a74e2c51c5e" kindref="member">RenderWindowDescriptionList</ref> &amp;</type>
          <declname>renderWindowDescriptions</declname>
        </param>
        <param>
          <type><ref refid="group__General_1ga1d8e92efee48ea10e75189c8efa6ec51" kindref="member">RenderWindowList</ref> &amp;</type>
          <declname>createdWindows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="RenderSystem::_createRenderWindows"><para>Creates multiple rendering windows. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderWindowDescriptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of structures containing the descriptions of each render window. The structure&apos;s members are the same as the parameters of _createRenderWindow: name width height fullScreen miscParams See _createRenderWindow for details about each member. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>createdWindows</parametername>
</parameternamelist>
<parameterdescription>
<para>This array will hold the created render windows. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success. </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="663"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aa162fb6b49c21c8f17c7a2a05a6c537e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> *</type>
        <definition>RenderTarget* Ogre::Root::detachRenderTarget</definition>
        <argsstring>(RenderTarget *pWin)</argsstring>
        <name>detachRenderTarget</name>
        <param>
          <type><ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> *</type>
          <declname>pWin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detaches a <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> from the active render system and returns a pointer to it. <simplesect kind="note"><para>If the render target cannot be found, NULL is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="670"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1afe02a03ca34a3836c36f0b6753b617f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> *</type>
        <definition>RenderTarget* Ogre::Root::detachRenderTarget</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>detachRenderTarget</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detaches a named <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> from the active render system and returns a pointer to it. <simplesect kind="note"><para>If the render target cannot be found, NULL is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="677"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a9c063121d67ba39f658295b3ccefb37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::destroyRenderTarget</definition>
        <argsstring>(RenderTarget *target)</argsstring>
        <name>destroyRenderTarget</name>
        <param>
          <type><ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys the given <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="681"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1acb88716975857a8e39f879bfd87180b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::destroyRenderTarget</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyRenderTarget</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys the given named <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="685"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a7bc9f24bec1e8b69a80d246e68bd8bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> *</type>
        <definition>RenderTarget* Ogre::Root::getRenderTarget</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>getRenderTarget</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a pointer to a named render target. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="689"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af0744e85bddb05885a91809bcdf8f864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::loadPlugin</definition>
        <argsstring>(const String &amp;pluginName)</argsstring>
        <name>loadPlugin</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>pluginName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manually load a <ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> contained in a DLL / DSO. <simplesect kind="remark"><para>Plugins embedded in DLLs can be loaded at startup using the plugin configuration file specified when you create <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> (default: plugins.cfg). This method allows you to load plugin DLLs directly in code. The DLL in question is expected to implement a dllStartPlugin method which instantiates a <ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> subclass and calls <ref refid="classOgre_1_1Root_1a5ea47cd9c094644e1abac7607e1922fd" kindref="member">Root::installPlugin</ref>. It should also implement dllStopPlugin (see <ref refid="classOgre_1_1Root_1a9e2492db70157da036a814c84e516500" kindref="member">Root::unloadPlugin</ref>) </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pluginName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the plugin library to load </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="701"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a9e2492db70157da036a814c84e516500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::unloadPlugin</definition>
        <argsstring>(const String &amp;pluginName)</argsstring>
        <name>unloadPlugin</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>pluginName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manually unloads a <ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> contained in a DLL / DSO. <simplesect kind="remark"><para><ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> DLLs are unloaded at shutdown automatically. This method allows you to unload plugins in code, but make sure their dependencies are decoupled first. This method will call the dllStopPlugin method defined in the DLL, which in turn should call <ref refid="classOgre_1_1Root_1a23417d6cbe7aeeafcc6a1a146a5e7b95" kindref="member">Root::uninstallPlugin</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pluginName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the plugin library to unload </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="712"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a5ea47cd9c094644e1abac7607e1922fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::installPlugin</definition>
        <argsstring>(Plugin *plugin)</argsstring>
        <name>installPlugin</name>
        <param>
          <type><ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Install a new plugin. <simplesect kind="remark"><para>This installs a new extension to OGRE. The plugin itself may be loaded from a DLL / DSO, or it might be statically linked into your own application. Either way, something has to call this method to get it registered and functioning. You should only call this method directly if your plugin is not in a DLL that could otherwise be loaded with loadPlugin, since the DLL function dllStartPlugin should call this method when the DLL is loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="724"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a23417d6cbe7aeeafcc6a1a146a5e7b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::uninstallPlugin</definition>
        <argsstring>(Plugin *plugin)</argsstring>
        <name>uninstallPlugin</name>
        <param>
          <type><ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uninstall an existing plugin. <simplesect kind="remark"><para>This uninstalls an extension to OGRE. Plugins are automatically uninstalled at shutdown but this lets you remove them early. If the plugin was loaded from a DLL / DSO you should call unloadPlugin which should result in this method getting called anyway (if the DLL is well behaved). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="734"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a6fc4402d867b3d553cf302701fdff331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classOgre_1_1Root_1a5483dc1f87b9861cae629b5aba6a6071" kindref="member">PluginInstanceList</ref> &amp;</type>
        <definition>const PluginInstanceList&amp; Ogre::Root::getInstalledPlugins</definition>
        <argsstring>() const </argsstring>
        <name>getInstalledPlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a read-only list of the currently installed plugins. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="737" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a507ed05fd59e0697797b8c9c9038448f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1Timer" kindref="compound">Timer</ref> *</type>
        <definition>Timer* Ogre::Root::getTimer</definition>
        <argsstring>(void)</argsstring>
        <name>getTimer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a pointer to the central timer used for all OGRE timings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="740"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a194d3177b24dae7d73255268773a54b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_fireFrameStarted</definition>
        <argsstring>(FrameEvent &amp;evt)</argsstring>
        <name>_fireFrameStarted</name>
        <param>
          <type><ref refid="structOgre_1_1FrameEvent" kindref="compound">FrameEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for raising frame started events. <simplesect kind="remark"><para>This method is only for internal use when you use OGRE&apos;s inbuilt rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). However, if you run your own rendering loop then you should call this method to ensure that <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> objects are notified of frame events; processes like texture animation and particle systems rely on this. </para></simplesect>
<simplesect kind="par"><title></title><para>Calling this method also increments the frame number, which is important for keeping some elements of the engine up to date. </para></simplesect>
<simplesect kind="note"><para>This method takes an event object as a parameter, so you can specify the times yourself. If you are happy for OGRE to automatically calculate the frame time for you, then call the other version of this method with no parameters. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object which includes all the timing information which you have calculated for yourself </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if one or more frame listeners elected that the rendering loop should be terminated, true otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="761"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a23fd83ef996349d5151cd93ca4908d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_fireFrameRenderingQueued</definition>
        <argsstring>(FrameEvent &amp;evt)</argsstring>
        <name>_fireFrameRenderingQueued</name>
        <param>
          <type><ref refid="structOgre_1_1FrameEvent" kindref="compound">FrameEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for raising frame rendering queued events. <simplesect kind="remark"><para>This method is only for internal use when you use OGRE&apos;s inbuilt rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). However, if you run your own rendering loop then you should call this method too, to ensure that all state is updated correctly. You should call it after the windows have been updated but before the buffers are swapped, or if you are not separating the update and buffer swap, then after the update just before _fireFrameEnded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="771"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a01d3244dcf290c2db36aea6b0c63616a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_fireFrameEnded</definition>
        <argsstring>(FrameEvent &amp;evt)</argsstring>
        <name>_fireFrameEnded</name>
        <param>
          <type><ref refid="structOgre_1_1FrameEvent" kindref="compound">FrameEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for raising frame ended events. <simplesect kind="remark"><para>This method is only for internal use when you use OGRE&apos;s inbuilt rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). However, if you run your own rendering loop then you should call this method to ensure that <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> objects are notified of frame events; processes like texture animation and particle systems rely on this. </para></simplesect>
<simplesect kind="note"><para>This method takes an event object as a parameter, so you can specify the times yourself. If you are happy for OGRE to automatically calculate the frame time for you, then call the other version of this method with no parameters. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object which includes all the timing information which you have calculated for yourself </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if one or more frame listeners elected that the rendering loop should be terminated, true otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="789"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af747fc0427276e6c6936dd6a5ca01e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_fireFrameStarted</definition>
        <argsstring>()</argsstring>
        <name>_fireFrameStarted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for raising frame started events. <simplesect kind="remark"><para>This method is only for internal use when you use OGRE&apos;s inbuilt rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). However, if you run your own rendering loop then you should call this method to ensure that <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> objects are notified of frame events; processes like texture animation and particle systems rely on this. </para></simplesect>
<simplesect kind="par"><title></title><para>Calling this method also increments the frame number, which is important for keeping some elements of the engine up to date. </para></simplesect>
<simplesect kind="note"><para>This method calculates the frame timing information for you based on the elapsed time. If you want to specify elapsed times yourself you should call the other version of this method which takes event details as a parameter. </para></simplesect>
<simplesect kind="return"><para>False if one or more frame listeners elected that the rendering loop should be terminated, true otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="807"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a15166e7cc1e879b71948665737e79ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_fireFrameRenderingQueued</definition>
        <argsstring>()</argsstring>
        <name>_fireFrameRenderingQueued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for raising frame rendering queued events. <simplesect kind="remark"><para>This method is only for internal use when you use OGRE&apos;s inbuilt rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). However, if you run your own rendering loop then you you may want to call this method too, although nothing in OGRE relies on this particular event. Really if you&apos;re running your own rendering loop at this level of detail then you can get the same effect as doing your updates in a frameRenderingQueued callback by just calling <ref refid="classOgre_1_1RenderTarget_1a5f78714e152067e10b381f9d262bcacb" kindref="member">RenderWindow::update</ref> with the &apos;swapBuffers&apos; option set to false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="818"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a57ec49d0fd19402ea8a4336f53ab62b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_fireFrameEnded</definition>
        <argsstring>()</argsstring>
        <name>_fireFrameEnded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for raising frame ended events. <simplesect kind="remark"><para>This method is only for internal use when you use OGRE&apos;s inbuilt rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). However, if you run your own rendering loop then you should call this method to ensure that <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> objects are notified of frame events; processes like texture animation and particle systems rely on this. </para></simplesect>
<simplesect kind="note"><para>This method calculates the frame timing information for you based on the elapsed time. If you want to specify elapsed times yourself you should call the other version of this method which takes event details as a parameter. </para></simplesect>
<simplesect kind="return"><para>False if one or more frame listeners elected that the rendering loop should be terminated, true otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="833"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1acb112ab3ff6088c5ebd743e30b2af8bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Ogre::Root::getNextFrameNumber</definition>
        <argsstring>(void) const </argsstring>
        <name>getNextFrameNumber</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of the next frame to be rendered. <simplesect kind="remark"><para>Note that this is &apos;next frame&apos; rather than &apos;current frame&apos; because it indicates the frame number that current changes made to the scene will take effect. It is incremented after all rendering commands for the current frame have been queued, thus reflecting that if you start performing changes then, you will actually see them in the next frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="843" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="843" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a55ee6b25390b1fe7406fd7ef327472a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
        <definition>SceneManager* Ogre::Root::_getCurrentSceneManager</definition>
        <argsstring>(void) const </argsstring>
        <name>_getCurrentSceneManager</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the scene manager currently being used to render a frame. <simplesect kind="remark"><para>This is only intended for internal use; it is only valid during the rendering of a frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="850"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a14ab7036973eb56ee4e1ad10304d9b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::_pushCurrentSceneManager</definition>
        <argsstring>(SceneManager *sm)</argsstring>
        <name>_pushCurrentSceneManager</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes the scene manager currently being used to render. <simplesect kind="remark"><para>This is only intended for internal use. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="855"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a16b5488539651d697d0a4dd5cdbdd4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::_popCurrentSceneManager</definition>
        <argsstring>(SceneManager *sm)</argsstring>
        <name>_popCurrentSceneManager</name>
        <param>
          <type><ref refid="classOgre_1_1SceneManager" kindref="compound">SceneManager</ref> *</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pops the scene manager currently being used to render. <simplesect kind="remark"><para>This is only intended for internal use. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="860"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a24559fa6a4f1772c7518fcb0911278f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_updateAllRenderTargets</definition>
        <argsstring>(void)</argsstring>
        <name>_updateAllRenderTargets</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method used for updating all <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> objects (windows, renderable textures etc) which are set to auto-update. <simplesect kind="remark"><para>You don&apos;t need to use this method if you&apos;re using <ref refid="namespaceOgre" kindref="compound">Ogre</ref>&apos;s own internal rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). If you&apos;re running your own loop you may wish to call it to update all the render targets which are set to auto update (<ref refid="classOgre_1_1RenderTarget_1a016ca5b051b36014c566459b20fe6ef6" kindref="member">RenderTarget::setAutoUpdated</ref>). You can also update individual <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> instances using their own update() method. </para></simplesect>
<simplesect kind="return"><para>false if a <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> indicated it wishes to exit the render loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="872"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aba26bc9123d8725d971e458e48c2694f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::_updateAllRenderTargets</definition>
        <argsstring>(FrameEvent &amp;evt)</argsstring>
        <name>_updateAllRenderTargets</name>
        <param>
          <type><ref refid="structOgre_1_1FrameEvent" kindref="compound">FrameEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal method used for updating all <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> objects (windows, renderable textures etc) which are set to auto-update, with a custom time passed to the frameRenderingQueued events. <simplesect kind="remark"><para>You don&apos;t need to use this method if you&apos;re using <ref refid="namespaceOgre" kindref="compound">Ogre</ref>&apos;s own internal rendering loop (<ref refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" kindref="member">Root::startRendering</ref>). If you&apos;re running your own loop you may wish to call it to update all the render targets which are set to auto update (<ref refid="classOgre_1_1RenderTarget_1a016ca5b051b36014c566459b20fe6ef6" kindref="member">RenderTarget::setAutoUpdated</ref>). You can also update individual <ref refid="classOgre_1_1RenderTarget" kindref="compound">RenderTarget</ref> instances using their own update() method. </para></simplesect>
<simplesect kind="return"><para>false if a <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> indicated it wishes to exit the render loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="885"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a73bbafca83dfb0f6971162efc3710977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref> *</type>
        <definition>RenderQueueInvocationSequence* Ogre::Root::createRenderQueueInvocationSequence</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>createRenderQueueInvocationSequence</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref>, useful for linking to <ref refid="classOgre_1_1Viewport" kindref="compound">Viewport</ref> instances to perform custom rendering. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to give the new sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="892"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ac2ba507a55bfd6c69552e3d74e1ce7aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref> *</type>
        <definition>RenderQueueInvocationSequence* Ogre::Root::getRenderQueueInvocationSequence</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>getRenderQueueInvocationSequence</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a <ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to identify the sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="898"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a4ab34dbd132ad5cae81d7753af244f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::destroyRenderQueueInvocationSequence</definition>
        <argsstring>(const String &amp;name)</argsstring>
        <name>destroyRenderQueueInvocationSequence</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a <ref refid="classOgre_1_1RenderQueueInvocationSequence" kindref="compound">RenderQueueInvocationSequence</ref>. <simplesect kind="remark"><para>You must ensure that no Viewports are using this sequence. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to identify the sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="906"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1acfa8a88f7186f9a665f733e7021c8c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::destroyAllRenderQueueInvocationSequences</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllRenderQueueInvocationSequences</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy all RenderQueueInvocationSequences. <simplesect kind="remark"><para>You must ensure that no Viewports are using custom sequences. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to identify the sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="913"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a2afff4a877a26bff8b47d32f9dcc15a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::clearEventTimes</definition>
        <argsstring>(void)</argsstring>
        <name>clearEventTimes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the history of all event times. <simplesect kind="remark"><para>OGRE stores a history of the last few event times in order to smooth out any inaccuracies and temporary fluctuations. However, if you pause or don&apos;t render for a little while this can cause a lurch, so if you&apos;re resuming rendering after a break, call this method to reset the stored times </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="956"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a1f045bf046a75d65e6ddc71f4ebe0b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setFrameSmoothingPeriod</definition>
        <argsstring>(Real period)</argsstring>
        <name>setFrameSmoothingPeriod</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the period over which OGRE smooths out fluctuations in frame times. <simplesect kind="remark"><para>OGRE by default gives you the raw frame time, but can optionally smooths it out over several frames, in order to reduce the noticeable effect of occasional hiccups in framerate. These smoothed values are passed back as parameters to <ref refid="classOgre_1_1FrameListener" kindref="compound">FrameListener</ref> calls. </para></simplesect>
<simplesect kind="par"><title></title><para>This method allow you to tweak the smoothing period, and is expressed in seconds. Setting it to 0 will result in completely unsmoothed frame times (the default). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="970" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a652690a3524c8164b850f3655d94c6dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::Root::getFrameSmoothingPeriod</definition>
        <argsstring>(void) const </argsstring>
        <name>getFrameSmoothingPeriod</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the period over which OGRE smooths out fluctuations in frame times. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="972" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a261189545f730e6243418d93cebfb75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::addMovableObjectFactory</definition>
        <argsstring>(MovableObjectFactory *fact, bool overrideExisting=false)</argsstring>
        <name>addMovableObjectFactory</name>
        <param>
          <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
          <declname>fact</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>overrideExisting</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new <ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> which will create new <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> instances of a particular type, as identified by the getType() method. <simplesect kind="remark"><para><ref refid="classOgre_1_1Plugin" kindref="compound">Plugin</ref> creators can create subclasses of <ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> which construct custom subclasses of <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> for insertion in the scene. This is the primary way that plugins can make custom objects available. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fact</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the factory instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overrideExisting</parametername>
</parameternamelist>
<parameterdescription>
<para>Set this to true to override any existing factories which are registered for the same type. You should only change this if you are very sure you know what you&apos;re doing. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="987"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a5dcfb7ee8fb1473fdc973752bc9452b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::removeMovableObjectFactory</definition>
        <argsstring>(MovableObjectFactory *fact)</argsstring>
        <name>removeMovableObjectFactory</name>
        <param>
          <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
          <declname>fact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a previously registered <ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref>. <simplesect kind="remark"><para>All instances of objects created by this factory will be destroyed before removing the factory (by calling back the factories &apos;destroyInstance&apos; method). The plugin writer is responsible for actually destroying the factory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="995"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af84bb44e9b7f13a2a50ecf17a4091cc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::hasMovableObjectFactory</definition>
        <argsstring>(const String &amp;typeName) const </argsstring>
        <name>hasMovableObjectFactory</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Checks whether a factory is registered for a given <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="997"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ab89302520cbbe6d78d25e325081ea906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> *</type>
        <definition>MovableObjectFactory* Ogre::Root::getMovableObjectFactory</definition>
        <argsstring>(const String &amp;typeName)</argsstring>
        <name>getMovableObjectFactory</name>
        <param>
          <type>const <ref refid="namespaceOgre_1af73bbdc8bed8a3e6fcd56bb8fa188c45" kindref="member">String</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> for the given type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="999"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a3840c316ccddef1ccadf51325ad72ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceOgre_1adf2a0cf2e77143b5ee1d38a75e289545" kindref="member">uint32</ref></type>
        <definition>uint32 Ogre::Root::_allocateNextMovableObjectTypeFlag</definition>
        <argsstring>(void)</argsstring>
        <name>_allocateNextMovableObjectTypeFlag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate the next <ref refid="classOgre_1_1MovableObject" kindref="compound">MovableObject</ref> type flag. <simplesect kind="remark"><para>This is done automatically if <ref refid="classOgre_1_1MovableObjectFactory_1a80346bc406655855ec5e0eef198900f2" kindref="member">MovableObjectFactory::requestTypeFlags</ref> returns true; don&apos;t call this manually unless you&apos;re sure you need to. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1005"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af1e6afe76f1080762975203e6778c3dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1Root_1a724ee7dcbdb7b8052420df2fecd07c0d" kindref="member">MovableObjectFactoryIterator</ref></type>
        <definition>MovableObjectFactoryIterator Ogre::Root::getMovableObjectFactoryIterator</definition>
        <argsstring>(void) const </argsstring>
        <name>getMovableObjectFactoryIterator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an iterator over all the <ref refid="classOgre_1_1MovableObjectFactory" kindref="compound">MovableObjectFactory</ref> instances currently registered. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1011"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aee8523d20d3d69a6cf39ed0499663a52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Ogre::Root::getDisplayMonitorCount</definition>
        <argsstring>() const </argsstring>
        <name>getDisplayMonitorCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of display monitors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1016"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ac488cfcbb657af17483e9ce551965d37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classOgre_1_1WorkQueue" kindref="compound">WorkQueue</ref> *</type>
        <definition>WorkQueue* Ogre::Root::getWorkQueue</definition>
        <argsstring>() const </argsstring>
        <name>getWorkQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="classOgre_1_1WorkQueue" kindref="compound">WorkQueue</ref> for processing background tasks. You are free to add new requests and handlers to this queue to process your custom background tasks using the shared thread pool. However, you must remember to assign yourself a new channel through which to process your tasks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1024" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1024" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1afdca040bfe42cac1b33402f37023b121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setWorkQueue</definition>
        <argsstring>(WorkQueue *queue)</argsstring>
        <name>setWorkQueue</name>
        <param>
          <type><ref refid="classOgre_1_1WorkQueue" kindref="compound">WorkQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the current work queue with an alternative. You can use this method to replace the internal implementation of <ref refid="classOgre_1_1WorkQueue" kindref="compound">WorkQueue</ref> with your own, e.g. to externalise the processing of background events. Doing so will delete the existing queue and replace it with this one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classOgre_1_1WorkQueue" kindref="compound">WorkQueue</ref> instance. <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> will delete this work queue at shutdown, so do not destroy it yourself. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1034"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a9c610fa759978755ffd9da222fe68b3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setBlendIndicesGpuRedundant</definition>
        <argsstring>(bool redundant)</argsstring>
        <name>setBlendIndicesGpuRedundant</name>
        <param>
          <type>bool</type>
          <declname>redundant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether blend indices information needs to be passed to the GPU. When entities use software animation they remove blend information such as indices and weights from the vertex buffers sent to the graphic card. This function can be used to limit which information is removed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redundant</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to remove blend indices information. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1042" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1042" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aadeea91308b59cab2b608abb9c17bfdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::isBlendIndicesGpuRedundant</definition>
        <argsstring>() const </argsstring>
        <name>isBlendIndicesGpuRedundant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether blend indices information needs to be passed to the GPU see <ref refid="classOgre_1_1Root_1a9c610fa759978755ffd9da222fe68b3e" kindref="member">setBlendIndicesGpuRedundant()</ref> for more information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1046" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1046" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ab7360b80fdc4eeb6bc63ff594c04bd04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setBlendWeightsGpuRedundant</definition>
        <argsstring>(bool redundant)</argsstring>
        <name>setBlendWeightsGpuRedundant</name>
        <param>
          <type>bool</type>
          <declname>redundant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether blend weights information needs to be passed to the GPU. When entities use software animation they remove blend information such as indices and weights from the vertex buffers sent to the graphic card. This function can be used to limit which information is removed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redundant</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to remove blend weights information. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1054" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1054" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1af3f07ed823a3853643ab938f641db174" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ogre::Root::isBlendWeightsGpuRedundant</definition>
        <argsstring>() const </argsstring>
        <name>isBlendWeightsGpuRedundant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether blend weights information needs to be passed to the GPU see <ref refid="classOgre_1_1Root_1ab7360b80fdc4eeb6bc63ff594c04bd04" kindref="member">setBlendWeightsGpuRedundant()</ref> for more information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1058" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1058" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1aa44a0398484e6efc3d13c590f02b0783" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ogre::Root::setDefaultMinPixelSize</definition>
        <argsstring>(Real pixelSize)</argsstring>
        <name>setDefaultMinPixelSize</name>
        <param>
          <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
          <declname>pixelSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default minimum pixel size for object to be rendered by <simplesect kind="note"><para>To use this feature see <ref refid="classOgre_1_1Camera_1a62d47145eb99e07af3de0915645be07c" kindref="member">Camera::setUseMinPixelSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1064" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1064" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1ab6d87c0af70d247b8809cf61e9482840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceOgre_1aa3a7b6dfb905e6572d62f0dfa3d4274d" kindref="member">Real</ref></type>
        <definition>Real Ogre::Root::getDefaultMinPixelSize</definition>
        <argsstring>()</argsstring>
        <name>getDefaultMinPixelSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default minimum pixel size for object to be rendered by </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="1068" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="1068" bodyend="1068"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classOgre_1_1Root_1a6c8959a647a86d6732a8a32f57b6a6ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1Root" kindref="compound">Root</ref> &amp;</type>
        <definition>static Root&amp; Ogre::Root::getSingleton</definition>
        <argsstring>(void)</argsstring>
        <name>getSingleton</name>
        <reimplements refid="classOgre_1_1Singleton_1a7757bd7ac3702c144502e53ad6491888">getSingleton</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Override standard <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref> retrieval. <simplesect kind="remark"><para>Why do we do this? Well, it&apos;s because the <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref> implementation is in a .h file, which means it gets compiled into anybody who includes it. This is needed for the <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref> template to work, but we actually only want it compiled into the implementation of the class based on the <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref>, not all of them. If we don&apos;t change this, we get link errors when trying to use the Singleton-based class from an outside dll. </para></simplesect>
<simplesect kind="par"><title></title><para>This method just delegates to the template version anyway, but the implementation stays in this single compilation unit, preventing link errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="930"/>
      </memberdef>
      <memberdef kind="function" id="classOgre_1_1Root_1a0813c15b258db16ef212dba53b72c3e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOgre_1_1Root" kindref="compound">Root</ref> *</type>
        <definition>static Root* Ogre::Root::getSingletonPtr</definition>
        <argsstring>(void)</argsstring>
        <name>getSingletonPtr</name>
        <reimplements refid="classOgre_1_1Singleton_1a7ab51c46521b89723d6186a52a7e0d7b">getSingletonPtr</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Override standard <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref> retrieval. <simplesect kind="remark"><para>Why do we do this? Well, it&apos;s because the <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref> implementation is in a .h file, which means it gets compiled into anybody who includes it. This is needed for the <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref> template to work, but we actually only want it compiled into the implementation of the class based on the <ref refid="classOgre_1_1Singleton" kindref="compound">Singleton</ref>, not all of them. If we don&apos;t change this, we get link errors when trying to use the Singleton-based class from an outside dll. </para></simplesect>
<simplesect kind="par"><title></title><para>This method just delegates to the template version anyway, but the implementation stays in this single compilation unit, preventing link errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="946"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The root class of the <ref refid="namespaceOgre" kindref="compound">Ogre</ref> system. <simplesect kind="remark"><para>The <ref refid="classOgre_1_1Root" kindref="compound">Ogre::Root</ref> class represents a starting point for the client application. From here, the application can gain access to the fundamentals of the system, namely the rendering systems available, management of saved configurations, logging, and access to other classes in the system. Acts as a hub from which all other objects may be reached. An instance of <ref refid="classOgre_1_1Root" kindref="compound">Root</ref> must be created before any other <ref refid="namespaceOgre" kindref="compound">Ogre</ref> operations are called. Once an instance has been created, the same instance is accessible throughout the life of that object by using <ref refid="classOgre_1_1Root_1a6c8959a647a86d6732a8a32f57b6a6ee" kindref="member">Root::getSingleton</ref> (as a reference) or <ref refid="classOgre_1_1Root_1a0813c15b258db16ef212dba53b72c3e4" kindref="member">Root::getSingletonPtr</ref> (as a pointer). </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="30879">
        <label>Ogre::Root</label>
        <link refid="classOgre_1_1Root"/>
        <childnode refid="30880" relation="public-inheritance">
        </childnode>
        <childnode refid="30881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30881">
        <label>RootAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="30880">
        <label>Ogre::Singleton&lt; Root &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="30897">
        <label>Ogre::set&lt; String &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31157">
        <label>Ogre::vector&lt; TexturePtr &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31043">
        <label>Ogre::map&lt; String, Bone * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31028">
        <label>Ogre::UserObjectBindings::Attributes</label>
        <link refid="classOgre_1_1UserObjectBindings_1_1Attributes"/>
        <childnode refid="31025" relation="public-inheritance">
        </childnode>
        <childnode refid="30919" relation="usage">
          <edgelabel>mUserObjectsMap</edgelabel>
        </childnode>
        <childnode refid="31026" relation="usage">
          <edgelabel>mKeylessAny</edgelabel>
        </childnode>
      </node>
      <node id="30965">
        <label>Ogre::MeshManager</label>
        <link refid="classOgre_1_1MeshManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="30966" relation="public-inheritance">
        </childnode>
        <childnode refid="30925" relation="public-inheritance">
        </childnode>
        <childnode refid="30967" relation="usage">
          <edgelabel>mMeshBuildParams</edgelabel>
        </childnode>
        <childnode refid="30968" relation="usage">
          <edgelabel>mListener</edgelabel>
        </childnode>
      </node>
      <node id="31159">
        <label>Ogre::vector&lt; EntityMeshLodChangedEvent &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30985">
        <label>Ogre::ColourValue</label>
        <link refid="classOgre_1_1ColourValue"/>
        <childnode refid="30985" relation="usage">
          <edgelabel>White</edgelabel>
          <edgelabel>Blue</edgelabel>
          <edgelabel>ZERO</edgelabel>
          <edgelabel>Black</edgelabel>
          <edgelabel>Red</edgelabel>
          <edgelabel>Green</edgelabel>
        </childnode>
      </node>
      <node id="30945">
        <label>Ogre::OverlayManager</label>
        <link refid="classOgre_1_1OverlayManager"/>
        <childnode refid="30946" relation="public-inheritance">
        </childnode>
        <childnode refid="30906" relation="public-inheritance">
        </childnode>
        <childnode refid="30947" relation="public-inheritance">
        </childnode>
        <childnode refid="30948" relation="usage">
          <edgelabel>mFactories</edgelabel>
        </childnode>
        <childnode refid="30949" relation="usage">
          <edgelabel>mTemplates</edgelabel>
          <edgelabel>mInstances</edgelabel>
        </childnode>
        <childnode refid="30950" relation="usage">
          <edgelabel>mOverlayMap</edgelabel>
        </childnode>
        <childnode refid="30897" relation="usage">
          <edgelabel>mLoadedScripts</edgelabel>
        </childnode>
        <childnode refid="30911" relation="usage">
          <edgelabel>mScriptPatterns</edgelabel>
        </childnode>
      </node>
      <node id="31002">
        <label>Ogre::set&lt; VertexBufferBinding * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31290">
        <label>Ogre::FontManager</label>
        <link refid="classOgre_1_1FontManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="31291" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31122">
        <label>Ogre::vector&lt; GpuSharedParametersUsage &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31100">
        <label>Ogre::CompositorInstance::TargetOperation</label>
        <link refid="classOgre_1_1CompositorInstance_1_1TargetOperation"/>
        <childnode refid="31101" relation="usage">
          <edgelabel>renderQueues</edgelabel>
        </childnode>
        <childnode refid="31102" relation="usage">
          <edgelabel>renderSystemOperations</edgelabel>
        </childnode>
        <childnode refid="30986" relation="usage">
          <edgelabel>target</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>materialScheme</edgelabel>
        </childnode>
      </node>
      <node id="31081">
        <label>Ogre::CompositorChain</label>
        <link refid="classOgre_1_1CompositorChain"/>
        <childnode refid="31082" relation="public-inheritance">
        </childnode>
        <childnode refid="31083" relation="public-inheritance">
        </childnode>
        <childnode refid="31084" relation="public-inheritance">
        </childnode>
        <childnode refid="31085" relation="usage">
          <edgelabel>mInstances</edgelabel>
        </childnode>
        <childnode refid="31086" relation="usage">
          <edgelabel>mOriginalScene</edgelabel>
        </childnode>
        <childnode refid="31097" relation="usage">
          <edgelabel>mRenderSystemOperations</edgelabel>
        </childnode>
        <childnode refid="31007" relation="usage">
          <edgelabel>mViewport</edgelabel>
        </childnode>
        <childnode refid="31098" relation="usage">
          <edgelabel>mOurListener</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mOldMaterialScheme</edgelabel>
          <edgelabel>mOriginalSceneScheme</edgelabel>
        </childnode>
        <childnode refid="31103" relation="usage">
          <edgelabel>mCompiledState</edgelabel>
        </childnode>
        <childnode refid="31100" relation="usage">
          <edgelabel>mOutputOperation</edgelabel>
        </childnode>
      </node>
      <node id="31153">
        <label>Ogre::PlaneBoundedVolume</label>
        <link refid="classOgre_1_1PlaneBoundedVolume"/>
        <childnode refid="30994" relation="usage">
          <edgelabel>planes</edgelabel>
        </childnode>
      </node>
      <node id="31276">
        <label>Ogre::ResourceGroupManager</label>
        <link refid="classOgre_1_1ResourceGroupManager"/>
        <childnode refid="31277" relation="public-inheritance">
        </childnode>
        <childnode refid="30907" relation="public-inheritance">
        </childnode>
        <childnode refid="31278" relation="usage">
          <edgelabel>mLoadingListener</edgelabel>
        </childnode>
        <childnode refid="31279" relation="usage">
          <edgelabel>mResourceManagerMap</edgelabel>
        </childnode>
        <childnode refid="31280" relation="usage">
          <edgelabel>mCurrentGroup</edgelabel>
        </childnode>
        <childnode refid="31285" relation="usage">
          <edgelabel>mScriptLoaderOrderMap</edgelabel>
        </childnode>
        <childnode refid="31286" relation="usage">
          <edgelabel>mResourceGroupListenerList</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>DEFAULT_RESOURCE_GROUP_NAME</edgelabel>
          <edgelabel>mWorldGroupName</edgelabel>
          <edgelabel>AUTODETECT_RESOURCE_GROUP_NAME</edgelabel>
          <edgelabel>INTERNAL_RESOURCE_GROUP_NAME</edgelabel>
        </childnode>
        <childnode refid="31287" relation="usage">
          <edgelabel>mResourceGroupMap</edgelabel>
        </childnode>
      </node>
      <node id="31015">
        <label>Ogre::MovableObject</label>
        <link refid="classOgre_1_1MovableObject"/>
        <childnode refid="31016" relation="public-inheritance">
        </childnode>
        <childnode refid="31017" relation="public-inheritance">
        </childnode>
        <childnode refid="30943" relation="public-inheritance">
        </childnode>
        <childnode refid="31018" relation="usage">
          <edgelabel>mWorldBoundingSphere</edgelabel>
        </childnode>
        <childnode refid="31019" relation="usage">
          <edgelabel>mParentNode</edgelabel>
        </childnode>
        <childnode refid="30942" relation="usage">
          <edgelabel>mCreator</edgelabel>
        </childnode>
        <childnode refid="31057" relation="usage">
          <edgelabel>mListener</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mWorldAABB</edgelabel>
          <edgelabel>mWorldDarkCapBounds</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mManager</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
        <childnode refid="31145" relation="usage">
          <edgelabel>mLightList</edgelabel>
        </childnode>
        <childnode refid="31024" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
      </node>
      <node id="30933">
        <label>std::map&lt; String, ListenerList &gt;</label>
        <childnode refid="30888" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="31291">
        <label>Ogre::Singleton&lt; FontManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31290" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31241">
        <label>Ogre::Singleton&lt; Profiler &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31240" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31117">
        <label>Ogre::map&lt; String, GpuConstantDefinition &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30887">
        <label>RenderSysAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31273">
        <label>Ogre::ScriptTranslatorManager</label>
        <link refid="classOgre_1_1ScriptTranslatorManager"/>
        <childnode refid="31274" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31323">
        <label>Ogre::Singleton&lt; SkeletonManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31322" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31075">
        <label>Ogre::map&lt; const Camera *, const Light * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31191">
        <label>Ogre::SceneQueryResult</label>
        <link refid="structOgre_1_1SceneQueryResult"/>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="31192" relation="usage">
          <edgelabel>worldFragments</edgelabel>
        </childnode>
        <childnode refid="31193" relation="usage">
          <edgelabel>movables</edgelabel>
        </childnode>
      </node>
      <node id="30882">
        <label>Ogre::Root</label>
        <link refid="classOgre_1_1Root"/>
        <childnode refid="30883" relation="public-inheritance">
        </childnode>
        <childnode refid="30884" relation="public-inheritance">
        </childnode>
        <childnode refid="30885" relation="usage">
          <edgelabel>mRenderSystemCapabilitiesManager</edgelabel>
        </childnode>
        <childnode refid="30904" relation="usage">
          <edgelabel>mMaterialManager</edgelabel>
        </childnode>
        <childnode refid="30934" relation="usage">
          <edgelabel>mMovableObjectFactoryMap</edgelabel>
        </childnode>
        <childnode refid="30935" relation="usage">
          <edgelabel>mParticleManager</edgelabel>
        </childnode>
        <childnode refid="30942" relation="usage">
          <edgelabel>mLightFactory</edgelabel>
          <edgelabel>mEntityFactory</edgelabel>
          <edgelabel>mBillboardChainFactory</edgelabel>
          <edgelabel>mManualObjectFactory</edgelabel>
          <edgelabel>mBillboardSetFactory</edgelabel>
          <edgelabel>mRibbonTrailFactory</edgelabel>
        </childnode>
        <childnode refid="30945" relation="usage">
          <edgelabel>mOverlayManager</edgelabel>
        </childnode>
        <childnode refid="30951" relation="usage">
          <edgelabel>mWorkQueue</edgelabel>
        </childnode>
        <childnode refid="30954" relation="usage">
          <edgelabel>mPlugins</edgelabel>
        </childnode>
        <childnode refid="30955" relation="usage">
          <edgelabel>mHighLevelGpuProgramManager</edgelabel>
        </childnode>
        <childnode refid="30960" relation="usage">
          <edgelabel>mResourceBackgroundQueue</edgelabel>
        </childnode>
        <childnode refid="30965" relation="usage">
          <edgelabel>mMeshManager</edgelabel>
        </childnode>
        <childnode refid="30969" relation="usage">
          <edgelabel>mSceneManagerEnum</edgelabel>
        </childnode>
        <childnode refid="31222" relation="usage">
          <edgelabel>mPanelFactory</edgelabel>
          <edgelabel>mTextAreaFactory</edgelabel>
          <edgelabel>mBorderPanelFactory</edgelabel>
        </childnode>
        <childnode refid="31223" relation="usage">
          <edgelabel>mEventTimes</edgelabel>
        </childnode>
        <childnode refid="31224" relation="usage">
          <edgelabel>mExternalTextureSourceManager</edgelabel>
        </childnode>
        <childnode refid="31232" relation="usage">
          <edgelabel>mZipArchiveFactory</edgelabel>
          <edgelabel>mEmbeddedZipArchiveFactory</edgelabel>
          <edgelabel>mFileSystemArchiveFactory</edgelabel>
        </childnode>
        <childnode refid="31235" relation="usage">
          <edgelabel>mAutoWindow</edgelabel>
        </childnode>
        <childnode refid="31236" relation="usage">
          <edgelabel>mDynLibManager</edgelabel>
        </childnode>
        <childnode refid="31240" relation="usage">
          <edgelabel>mProfiler</edgelabel>
        </childnode>
        <childnode refid="30989" relation="usage">
          <edgelabel>mTimer</edgelabel>
        </childnode>
        <childnode refid="31269" relation="usage">
          <edgelabel>mCompilerManager</edgelabel>
        </childnode>
        <childnode refid="31276" relation="usage">
          <edgelabel>mResourceGroupManager</edgelabel>
        </childnode>
        <childnode refid="31288" relation="usage">
          <edgelabel>mRenderers</edgelabel>
        </childnode>
        <childnode refid="31289" relation="usage">
          <edgelabel>mRQSequenceMap</edgelabel>
        </childnode>
        <childnode refid="31290" relation="usage">
          <edgelabel>mFontManager</edgelabel>
        </childnode>
        <childnode refid="31292" relation="usage">
          <edgelabel>mLogManager</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mConfigFileName</edgelabel>
          <edgelabel>mVersion</edgelabel>
        </childnode>
        <childnode refid="31303" relation="usage">
          <edgelabel>mFrameListeners</edgelabel>
          <edgelabel>mRemovedFrameListeners</edgelabel>
        </childnode>
        <childnode refid="31304" relation="usage">
          <edgelabel>mLodStrategyManager</edgelabel>
        </childnode>
        <childnode refid="31307" relation="usage">
          <edgelabel>mShadowTextureManager</edgelabel>
        </childnode>
        <childnode refid="31309" relation="usage">
          <edgelabel>mArchiveManager</edgelabel>
        </childnode>
        <childnode refid="31312" relation="usage">
          <edgelabel>mPluginLibs</edgelabel>
        </childnode>
        <childnode refid="31313" relation="usage">
          <edgelabel>mSceneManagerStack</edgelabel>
        </childnode>
        <childnode refid="31314" relation="usage">
          <edgelabel>mControllerManager</edgelabel>
        </childnode>
        <childnode refid="31322" relation="usage">
          <edgelabel>mSkeletonManager</edgelabel>
        </childnode>
        <childnode refid="31324" relation="usage">
          <edgelabel>mCompositorManager</edgelabel>
        </childnode>
        <childnode refid="30978" relation="usage">
          <edgelabel>mActiveRenderer</edgelabel>
        </childnode>
      </node>
      <node id="31257">
        <label>Ogre::OverlayElementCommands::CmdWidth</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdWidth"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31023">
        <label>Ogre::Matrix4</label>
        <link refid="classOgre_1_1Matrix4"/>
        <childnode refid="31023" relation="usage">
          <edgelabel>ZEROAFFINE</edgelabel>
          <edgelabel>CLIPSPACE2DTOIMAGESPACE</edgelabel>
          <edgelabel>IDENTITY</edgelabel>
          <edgelabel>ZERO</edgelabel>
        </childnode>
      </node>
      <node id="30894">
        <label>Ogre::map&lt; String, SetStringMethod &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31262">
        <label>std::basic_string&lt; code_point &gt;</label>
      </node>
      <node id="30920">
        <label>K</label>
      </node>
      <node id="30999">
        <label>BufferAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="30975">
        <label>Ogre::SceneManagerFactory</label>
        <link refid="classOgre_1_1SceneManagerFactory"/>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="30976" relation="usage">
          <edgelabel>mMetaData</edgelabel>
        </childnode>
      </node>
      <node id="30921">
        <label>T</label>
      </node>
      <node id="31190">
        <label>Ogre::SceneQueryListener</label>
        <link refid="classOgre_1_1SceneQueryListener"/>
      </node>
      <node id="31248">
        <label>Ogre::map&lt; String, ProfileInstance * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31133">
        <label>Ogre::GpuProgram::CmdMorph</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdMorph"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31061">
        <label>Ogre::SceneNode</label>
        <link refid="classOgre_1_1SceneNode"/>
        <childnode refid="31019" relation="public-inheritance">
        </childnode>
        <childnode refid="31061" relation="usage">
          <edgelabel>mAutoTrackTarget</edgelabel>
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mAutoTrackOffset</edgelabel>
          <edgelabel>mYawFixedAxis</edgelabel>
          <edgelabel>mAutoTrackLocalDirection</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mWorldAABB</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mCreator</edgelabel>
        </childnode>
        <childnode refid="31062" relation="usage">
          <edgelabel>mWireBoundingBox</edgelabel>
        </childnode>
      </node>
      <node id="31018">
        <label>Ogre::Sphere</label>
        <link refid="classOgre_1_1Sphere"/>
        <childnode refid="30981" relation="usage">
          <edgelabel>mCenter</edgelabel>
        </childnode>
      </node>
      <node id="31077">
        <label>Ogre::Texture</label>
        <link refid="classOgre_1_1Texture"/>
        <childnode refid="30917" relation="public-inheritance">
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mFSAAHint</edgelabel>
        </childnode>
      </node>
      <node id="31324">
        <label>Ogre::CompositorManager</label>
        <link refid="classOgre_1_1CompositorManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="31325" relation="public-inheritance">
        </childnode>
        <childnode refid="31326" relation="usage">
          <edgelabel>mCustomCompositionPasses</edgelabel>
        </childnode>
        <childnode refid="31070" relation="usage">
          <edgelabel>mRectangle</edgelabel>
        </childnode>
        <childnode refid="31327" relation="usage">
          <edgelabel>mTexturesByDef</edgelabel>
        </childnode>
        <childnode refid="31085" relation="usage">
          <edgelabel>mInstances</edgelabel>
        </childnode>
        <childnode refid="31328" relation="usage">
          <edgelabel>mChains</edgelabel>
        </childnode>
        <childnode refid="31329" relation="usage">
          <edgelabel>mCompositorLogics</edgelabel>
        </childnode>
        <childnode refid="31330" relation="usage">
          <edgelabel>mChainTexturesByDef</edgelabel>
        </childnode>
      </node>
      <node id="31024">
        <label>Ogre::UserObjectBindings</label>
        <link refid="classOgre_1_1UserObjectBindings"/>
        <childnode refid="31025" relation="public-inheritance">
        </childnode>
        <childnode refid="31026" relation="usage">
          <edgelabel>msEmptyAny</edgelabel>
        </childnode>
        <childnode refid="31028" relation="usage">
          <edgelabel>mAttributes</edgelabel>
        </childnode>
      </node>
      <node id="30930">
        <label>Ogre::LodStrategy</label>
        <link refid="classOgre_1_1LodStrategy"/>
        <childnode refid="30931" relation="public-inheritance">
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
      </node>
      <node id="31041">
        <label>Ogre::vector&lt; Bone * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31098">
        <label>Ogre::CompositorChain::RQListener</label>
        <link refid="classOgre_1_1CompositorChain_1_1RQListener"/>
        <childnode refid="31099" relation="public-inheritance">
        </childnode>
        <childnode refid="31007" relation="usage">
          <edgelabel>mViewport</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mSceneManager</edgelabel>
        </childnode>
        <childnode refid="31100" relation="usage">
          <edgelabel>mOperation</edgelabel>
        </childnode>
        <childnode refid="30978" relation="usage">
          <edgelabel>mRenderSystem</edgelabel>
        </childnode>
      </node>
      <node id="31283">
        <label>Ogre::map&lt; String, Archive * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31029">
        <label>Ogre::Node::DebugRenderable</label>
        <link refid="classOgre_1_1Node_1_1DebugRenderable"/>
        <childnode refid="31030" relation="public-inheritance">
        </childnode>
        <childnode refid="31020" relation="public-inheritance">
        </childnode>
        <childnode refid="31019" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31033" relation="usage">
          <edgelabel>mMeshPtr</edgelabel>
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mMat</edgelabel>
        </childnode>
      </node>
      <node id="31160">
        <label>Ogre::vector&lt; ShadowTextureConfig &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31240">
        <label>Ogre::Profiler</label>
        <link refid="classOgre_1_1Profiler"/>
        <childnode refid="31241" relation="public-inheritance">
        </childnode>
        <childnode refid="31242" relation="public-inheritance">
        </childnode>
        <childnode refid="31243" relation="usage">
          <edgelabel>mProfileBars</edgelabel>
        </childnode>
        <childnode refid="31244" relation="usage">
          <edgelabel>mOverlay</edgelabel>
        </childnode>
        <childnode refid="30989" relation="usage">
          <edgelabel>mTimer</edgelabel>
        </childnode>
        <childnode refid="30897" relation="usage">
          <edgelabel>mDisabledProfiles</edgelabel>
        </childnode>
        <childnode refid="31246" relation="usage">
          <edgelabel>mRoot</edgelabel>
          <edgelabel>mLast</edgelabel>
          <edgelabel>mCurrent</edgelabel>
        </childnode>
        <childnode refid="31250" relation="usage">
          <edgelabel>mProfileGui</edgelabel>
        </childnode>
      </node>
      <node id="31092">
        <label>Ogre::vector&lt; CompositionTechnique * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31200">
        <label>Ogre::SceneManager::ShadowCasterSceneQueryListener</label>
        <link refid="classOgre_1_1SceneManager_1_1ShadowCasterSceneQueryListener"/>
        <childnode refid="31190" relation="public-inheritance">
        </childnode>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mSceneMgr</edgelabel>
        </childnode>
        <childnode refid="31147" relation="usage">
          <edgelabel>mLight</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mCamera</edgelabel>
        </childnode>
        <childnode refid="31201" relation="usage">
          <edgelabel>mLightClipVolumeList</edgelabel>
          <edgelabel>mCasterList</edgelabel>
        </childnode>
      </node>
      <node id="31203">
        <label>Ogre::map&lt; unsigned short, bool &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31175">
        <label>Ogre::vector&lt; ManualObjectSection * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31121">
        <label>Ogre::vector&lt; AutoConstantEntry &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30926">
        <label>Ogre::AtomicScalar&lt; LoadingState &gt;</label>
        <link refid="classOgre_1_1AtomicScalar"/>
      </node>
      <node id="31088">
        <label>Ogre::CompositionTechnique</label>
        <link refid="classOgre_1_1CompositionTechnique"/>
        <childnode refid="31084" relation="public-inheritance">
        </childnode>
        <childnode refid="31089" relation="usage">
          <edgelabel>mOutputTarget</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mSchemeName</edgelabel>
          <edgelabel>mCompositorLogicName</edgelabel>
        </childnode>
        <childnode refid="31091" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31094" relation="usage">
          <edgelabel>mTextureDefinitions</edgelabel>
        </childnode>
        <childnode refid="31095" relation="usage">
          <edgelabel>mTargetPasses</edgelabel>
        </childnode>
      </node>
      <node id="31124">
        <label>Ogre::vector&lt; float &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30905">
        <label>Ogre::ResourceManager</label>
        <link refid="classOgre_1_1ResourceManager"/>
        <childnode refid="30906" relation="public-inheritance">
        </childnode>
        <childnode refid="30907" relation="public-inheritance">
        </childnode>
        <childnode refid="30908" relation="usage">
          <edgelabel>mResourcesByHandle</edgelabel>
        </childnode>
        <childnode refid="30909" relation="usage">
          <edgelabel>mMemoryUsage</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mResourceType</edgelabel>
        </childnode>
        <childnode refid="30910" relation="usage">
          <edgelabel>mResourcePoolMap</edgelabel>
        </childnode>
        <childnode refid="30911" relation="usage">
          <edgelabel>mScriptPatterns</edgelabel>
        </childnode>
      </node>
      <node id="31227">
        <label>Ogre::ExternalTextureSource</label>
        <link refid="classOgre_1_1ExternalTextureSource"/>
        <childnode refid="30918" relation="public-inheritance">
        </childnode>
        <childnode refid="31228" relation="usage">
          <edgelabel>msCmdPlayMode</edgelabel>
        </childnode>
        <childnode refid="31229" relation="usage">
          <edgelabel>msCmdFramesPerSecond</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mInputFileName</edgelabel>
          <edgelabel>mPluginName</edgelabel>
          <edgelabel>mDictionaryName</edgelabel>
        </childnode>
        <childnode refid="31230" relation="usage">
          <edgelabel>msCmdTecPassState</edgelabel>
        </childnode>
        <childnode refid="31231" relation="usage">
          <edgelabel>msCmdInputFile</edgelabel>
        </childnode>
      </node>
      <node id="31132">
        <label>Ogre::GpuProgram::CmdPose</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdPose"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31166">
        <label>Ogre::RenderQueue</label>
        <link refid="classOgre_1_1RenderQueue"/>
        <childnode refid="31010" relation="public-inheritance">
        </childnode>
        <childnode refid="31167" relation="usage">
          <edgelabel>mGroups</edgelabel>
        </childnode>
        <childnode refid="31169" relation="usage">
          <edgelabel>mRenderableListener</edgelabel>
        </childnode>
      </node>
      <node id="31214">
        <label>Ogre::SceneManager::SkyBoxGenParameters</label>
        <link refid="structOgre_1_1SceneManager_1_1SkyBoxGenParameters"/>
      </node>
      <node id="31186">
        <label>Ogre::SphereSceneQuery</label>
        <link refid="classOgre_1_1SphereSceneQuery"/>
        <childnode refid="31187" relation="public-inheritance">
        </childnode>
        <childnode refid="31018" relation="usage">
          <edgelabel>mSphere</edgelabel>
        </childnode>
      </node>
      <node id="31104">
        <label>Ogre::SceneManager::SceneMgrQueuedRenderableVisitor</label>
        <link refid="classOgre_1_1SceneManager_1_1SceneMgrQueuedRenderableVisitor"/>
        <childnode refid="31105" relation="public-inheritance">
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>targetSceneMgr</edgelabel>
        </childnode>
        <childnode refid="31106" relation="usage">
          <edgelabel>mUsedPass</edgelabel>
        </childnode>
        <childnode refid="31145" relation="usage">
          <edgelabel>manualLightList</edgelabel>
        </childnode>
      </node>
      <node id="30936">
        <label>Ogre::Singleton&lt; ParticleSystemManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30935" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="30923">
        <label>Ogre::map&lt; String, ParamCommand * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31222">
        <label>Ogre::OverlayElementFactory</label>
        <link refid="classOgre_1_1OverlayElementFactory"/>
        <childnode refid="30947" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31252">
        <label>Ogre::OverlayElementCommands::CmdHeight</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdHeight"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31057">
        <label>Ogre::MovableObject::Listener</label>
        <link refid="classOgre_1_1MovableObject_1_1Listener"/>
      </node>
      <node id="31040">
        <label>Ogre::vector&lt; LinkedSkeletonAnimationSource &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31147">
        <label>Ogre::Light</label>
        <link refid="classOgre_1_1Light"/>
        <childnode refid="31015" relation="public-inheritance">
        </childnode>
        <childnode refid="31148" relation="usage">
          <edgelabel>mFrustumClipVolumes</edgelabel>
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mPosition</edgelabel>
          <edgelabel>mDerivedDirection</edgelabel>
          <edgelabel>mDerivedCamRelativePosition</edgelabel>
          <edgelabel>mDerivedPosition</edgelabel>
          <edgelabel>mDirection</edgelabel>
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mDiffuse</edgelabel>
          <edgelabel>mSpecular</edgelabel>
        </childnode>
        <childnode refid="31149" relation="usage">
          <edgelabel>mCustomShadowCameraSetup</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31152" relation="usage">
          <edgelabel>mCustomParameters</edgelabel>
        </childnode>
        <childnode refid="31153" relation="usage">
          <edgelabel>mNearClipVolume</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mCameraToBeRelativeTo</edgelabel>
        </childnode>
        <childnode refid="31154" relation="usage">
          <edgelabel>mSpotInner</edgelabel>
          <edgelabel>mSpotOuter</edgelabel>
        </childnode>
      </node>
      <node id="31264">
        <label>std::basic_string&lt; wchar_t &gt;</label>
      </node>
      <node id="31036">
        <label>Ogre::AnimationContainer</label>
        <link refid="classOgre_1_1AnimationContainer"/>
      </node>
      <node id="31201">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="30921" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31226">
        <label>Ogre::map&lt; String, ExternalTextureSource * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30956">
        <label>Ogre::Singleton&lt; HighLevelGpuProgramManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30955" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31220">
        <label>Ogre::list&lt; Listener * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31238">
        <label>DynLibAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31139">
        <label>TechniqueAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31127">
        <label>Ogre::SharedPtr&lt; GpuProgram &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31128" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31185">
        <label>Ogre::map&lt; String, InstanceManager * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31013">
        <label>Ogre::Camera</label>
        <link refid="classOgre_1_1Camera"/>
        <childnode refid="31014" relation="public-inheritance">
        </childnode>
        <childnode refid="31061" relation="usage">
          <edgelabel>mAutoTrackTarget</edgelabel>
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mAutoTrackOffset</edgelabel>
          <edgelabel>mYawFixedAxis</edgelabel>
          <edgelabel>mPosition</edgelabel>
          <edgelabel>mDerivedPosition</edgelabel>
          <edgelabel>mRealPosition</edgelabel>
        </childnode>
        <childnode refid="31014" relation="usage">
          <edgelabel>mCullFrustum</edgelabel>
        </childnode>
        <childnode refid="30994" relation="usage">
          <edgelabel>mWindowClipPlanes</edgelabel>
        </childnode>
        <childnode refid="31007" relation="usage">
          <edgelabel>mLastViewport</edgelabel>
        </childnode>
        <childnode refid="31012" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mSceneMgr</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mLodCamera</edgelabel>
        </childnode>
        <childnode refid="31056" relation="usage">
          <edgelabel>mDerivedOrientation</edgelabel>
          <edgelabel>mOrientation</edgelabel>
          <edgelabel>mRealOrientation</edgelabel>
        </childnode>
      </node>
      <node id="31027">
        <label>Ogre::Any::placeholder</label>
        <link refid="classOgre_1_1Any_1_1placeholder"/>
      </node>
      <node id="30968">
        <label>Ogre::MeshSerializerListener</label>
        <link refid="classOgre_1_1MeshSerializerListener"/>
      </node>
      <node id="31242">
        <label>ProfilerAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31254">
        <label>Ogre::OverlayElementCommands::CmdHorizontalAlign</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdHorizontalAlign"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31207">
        <label>Ogre::vector&lt; SubEntity * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31285">
        <label>Ogre::multimap&lt; Real, ScriptLoader * &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="31074">
        <label>Ogre::map&lt; Light *, LightClippingInfo &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30961">
        <label>Ogre::Singleton&lt; ResourceBackgroundQueue &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30960" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31310">
        <label>Ogre::Singleton&lt; ArchiveManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31309" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31001">
        <label>Ogre::set&lt; HardwareIndexBuffer * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31114">
        <label>GpuParamsAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31209">
        <label>Ogre::HardwareBufferLicensee</label>
        <link refid="classOgre_1_1HardwareBufferLicensee"/>
      </node>
      <node id="31154">
        <label>Ogre::Radian</label>
        <link refid="classOgre_1_1Radian"/>
      </node>
      <node id="31294">
        <label>LogAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31189">
        <label>Ogre::set&lt; WorldFragmentType &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31008">
        <label>ViewportAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31145">
        <label>Ogre::HashedVector&lt; Light * &gt;</label>
        <link refid="classOgre_1_1HashedVector"/>
        <childnode refid="31146" relation="usage">
          <edgelabel>mList</edgelabel>
        </childnode>
      </node>
      <node id="30988">
        <label>Ogre::vector&lt; RenderTargetListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30980">
        <label>Ogre::map&lt; uint16, DepthBufferVec &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31058">
        <label>Ogre::SceneManager</label>
        <link refid="classOgre_1_1SceneManager"/>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="31059" relation="usage">
          <edgelabel>mRenderObjectListeners</edgelabel>
        </childnode>
        <childnode refid="31060" relation="usage">
          <edgelabel>mCamVisibleObjectsMap</edgelabel>
        </childnode>
        <childnode refid="31061" relation="usage">
          <edgelabel>mSkyPlaneNode</edgelabel>
          <edgelabel>mSkyDomeNode</edgelabel>
          <edgelabel>mSceneRoot</edgelabel>
          <edgelabel>mSkyBoxNode</edgelabel>
        </childnode>
        <childnode refid="31070" relation="usage">
          <edgelabel>mFullScreenQuad</edgelabel>
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mCameraRelativePosition</edgelabel>
        </childnode>
        <childnode refid="31071" relation="usage">
          <edgelabel>mRenderQueueListeners</edgelabel>
        </childnode>
        <childnode refid="31072" relation="usage">
          <edgelabel>mEntityMaterialLodChangedEvents</edgelabel>
        </childnode>
        <childnode refid="31073" relation="usage">
          <edgelabel>mMovableObjectLodChangedEvents</edgelabel>
        </childnode>
        <childnode refid="31074" relation="usage">
          <edgelabel>mLightClippingInfoMap</edgelabel>
        </childnode>
        <childnode refid="31067" relation="usage">
          <edgelabel>mShadowIndexBuffer</edgelabel>
        </childnode>
        <childnode refid="31075" relation="usage">
          <edgelabel>mShadowCamLightMapping</edgelabel>
        </childnode>
        <childnode refid="31076" relation="usage">
          <edgelabel>mStaticGeometryList</edgelabel>
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mAmbientLight</edgelabel>
          <edgelabel>mFogColour</edgelabel>
          <edgelabel>mShadowColour</edgelabel>
        </childnode>
        <childnode refid="31077" relation="usage">
          <edgelabel>mCurrentShadowTexture</edgelabel>
        </childnode>
        <childnode refid="31042" relation="usage">
          <edgelabel>mAnimationsList</edgelabel>
        </childnode>
        <childnode refid="31078" relation="usage">
          <edgelabel>mSkyPlane</edgelabel>
        </childnode>
        <childnode refid="31079" relation="usage">
          <edgelabel>mCameras</edgelabel>
        </childnode>
        <childnode refid="31080" relation="usage">
          <edgelabel>mSceneNodes</edgelabel>
        </childnode>
        <childnode refid="31081" relation="usage">
          <edgelabel>mActiveCompositorChain</edgelabel>
        </childnode>
        <childnode refid="31104" relation="usage">
          <edgelabel>mDefaultQueuedRenderableVisitor</edgelabel>
          <edgelabel>mActiveQueuedRenderableVisitor</edgelabel>
        </childnode>
        <childnode refid="31155" relation="usage">
          <edgelabel>mShadowTextureCameras</edgelabel>
        </childnode>
        <childnode refid="31007" relation="usage">
          <edgelabel>mCurrentViewport</edgelabel>
        </childnode>
        <childnode refid="31156" relation="usage">
          <edgelabel>mLodListeners</edgelabel>
        </childnode>
        <childnode refid="31157" relation="usage">
          <edgelabel>mShadowTextures</edgelabel>
        </childnode>
        <childnode refid="31012" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31158" relation="usage">
          <edgelabel>mTestLightInfos</edgelabel>
          <edgelabel>mCachedLightInfos</edgelabel>
        </childnode>
        <childnode refid="31159" relation="usage">
          <edgelabel>mEntityMeshLodChangedEvents</edgelabel>
        </childnode>
        <childnode refid="31112" relation="usage">
          <edgelabel>mFiniteExtrusionParams</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverFPParams</edgelabel>
          <edgelabel>mShadowTextureCustomCasterFPParams</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverVPParams</edgelabel>
          <edgelabel>mShadowTextureCustomCasterVPParams</edgelabel>
          <edgelabel>mInfiniteExtrusionParams</edgelabel>
        </childnode>
        <childnode refid="31160" relation="usage">
          <edgelabel>mShadowTextureConfigList</edgelabel>
        </childnode>
        <childnode refid="31106" relation="usage">
          <edgelabel>mShadowReceiverPass</edgelabel>
          <edgelabel>mShadowModulativePass</edgelabel>
          <edgelabel>mShadowCasterPlainBlackPass</edgelabel>
          <edgelabel>mShadowStencilPass</edgelabel>
          <edgelabel>mShadowDebugPass</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverPass</edgelabel>
          <edgelabel>mShadowTextureCustomCasterPass</edgelabel>
        </childnode>
        <childnode refid="31021" relation="usage">
          <edgelabel>mMovableNameGenerator</edgelabel>
        </childnode>
        <childnode refid="31149" relation="usage">
          <edgelabel>mDefaultShadowCameraSetup</edgelabel>
        </childnode>
        <childnode refid="31161" relation="usage">
          <edgelabel>mAnimationStates</edgelabel>
        </childnode>
        <childnode refid="31165" relation="usage">
          <edgelabel>mSkyPlaneGenParameters</edgelabel>
        </childnode>
        <childnode refid="31166" relation="usage">
          <edgelabel>mRenderQueue</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mShadowTextureCustomReceiverVertexProgram</edgelabel>
          <edgelabel>mName</edgelabel>
          <edgelabel>mShadowTextureCustomCasterVertexProgram</edgelabel>
          <edgelabel>mShadowTextureCustomReceiverFragmentProgram</edgelabel>
          <edgelabel>mShadowTextureCustomCasterFragmentProgram</edgelabel>
        </childnode>
        <childnode refid="31170" relation="usage">
          <edgelabel>mNullShadowTexture</edgelabel>
        </childnode>
        <childnode refid="31145" relation="usage">
          <edgelabel>mLightsAffectingFrustum</edgelabel>
          <edgelabel>mShadowTextureCurrentCasterLightList</edgelabel>
        </childnode>
        <childnode refid="31172" relation="usage">
          <edgelabel>mShadowTextureIndexLightList</edgelabel>
        </childnode>
        <childnode refid="31173" relation="usage">
          <edgelabel>mSpecialCaseQueueList</edgelabel>
        </childnode>
        <childnode refid="31174" relation="usage">
          <edgelabel>mSkyBoxObj</edgelabel>
        </childnode>
        <childnode refid="31185" relation="usage">
          <edgelabel>mInstanceManagerMap</edgelabel>
        </childnode>
        <childnode refid="31186" relation="usage">
          <edgelabel>mShadowCasterSphereQuery</edgelabel>
        </childnode>
        <childnode refid="31194" relation="usage">
          <edgelabel>mShadowCasterList</edgelabel>
        </childnode>
        <childnode refid="31195" relation="usage">
          <edgelabel>mDirtyInstanceManagers</edgelabel>
          <edgelabel>mDirtyInstanceMgrsTmp</edgelabel>
        </childnode>
        <childnode refid="31196" relation="usage">
          <edgelabel>mMovableObjectCollectionMap</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mTempXform</edgelabel>
          <edgelabel>mCachedViewMatrix</edgelabel>
        </childnode>
        <childnode refid="31197" relation="usage">
          <edgelabel>mShadowCasterAABBQuery</edgelabel>
        </childnode>
        <childnode refid="31198" relation="usage">
          <edgelabel>mAutoParamDataSource</edgelabel>
        </childnode>
        <childnode refid="31200" relation="usage">
          <edgelabel>mShadowCasterQueryListener</edgelabel>
        </childnode>
        <childnode refid="31056" relation="usage">
          <edgelabel>mSkyDomeOrientation</edgelabel>
          <edgelabel>mSkyBoxOrientation</edgelabel>
        </childnode>
        <childnode refid="31202" relation="usage">
          <edgelabel>mSkyDomeEntity</edgelabel>
          <edgelabel>mSkyPlaneEntity</edgelabel>
        </childnode>
        <childnode refid="31211" relation="usage">
          <edgelabel>mAutoTrackingSceneNodes</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mCameraInProgress</edgelabel>
        </childnode>
        <childnode refid="31212" relation="usage">
          <edgelabel>mInstancedGeometryList</edgelabel>
        </childnode>
        <childnode refid="31213" relation="usage">
          <edgelabel>mSkyDomeGenParameters</edgelabel>
        </childnode>
        <childnode refid="31214" relation="usage">
          <edgelabel>mSkyBoxGenParameters</edgelabel>
        </childnode>
        <childnode refid="30978" relation="usage">
          <edgelabel>mDestRenderSystem</edgelabel>
        </childnode>
      </node>
      <node id="31208">
        <label>Ogre::TempBlendedBufferInfo</label>
        <link refid="classOgre_1_1TempBlendedBufferInfo"/>
        <childnode refid="31209" relation="public-inheritance">
        </childnode>
        <childnode refid="30999" relation="public-inheritance">
        </childnode>
        <childnode refid="30995" relation="usage">
          <edgelabel>srcNormalBuffer</edgelabel>
          <edgelabel>srcPositionBuffer</edgelabel>
          <edgelabel>destNormalBuffer</edgelabel>
          <edgelabel>destPositionBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31049">
        <label>Ogre::vector&lt; Pose * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31289">
        <label>Ogre::map&lt; String, RenderQueueInvocationSequence * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31063">
        <label>Ogre::SimpleRenderable</label>
        <link refid="classOgre_1_1SimpleRenderable"/>
        <childnode refid="31015" relation="public-inheritance">
        </childnode>
        <childnode refid="31030" relation="public-inheritance">
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="31064" relation="usage">
          <edgelabel>mRenderOp</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mParentSceneManager</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mBox</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mMatName</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mWorldTransform</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mCamera</edgelabel>
        </childnode>
      </node>
      <node id="31005">
        <label>Ogre::set&lt; HardwareVertexBuffer * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="30932">
        <label>Ogre::map&lt; unsigned short, LodTechniques * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31296">
        <label>Ogre::vector&lt; LogListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31318">
        <label>Ogre::ControllerFunction&lt; Real &gt;</label>
        <link refid="classOgre_1_1ControllerFunction"/>
        <childnode refid="31316" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31243">
        <label>Ogre::list&lt; OverlayElement * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31131">
        <label>Ogre::GpuProgram::CmdAdjacency</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdAdjacency"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31197">
        <label>Ogre::AxisAlignedBoxSceneQuery</label>
        <link refid="classOgre_1_1AxisAlignedBoxSceneQuery"/>
        <childnode refid="31187" relation="public-inheritance">
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mAABB</edgelabel>
        </childnode>
      </node>
      <node id="30907">
        <label>ResourceAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31046">
        <label>Ogre::vector&lt; HardwareAnimationData &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31113">
        <label>Ogre::GpuProgramParameters</label>
        <link refid="classOgre_1_1GpuProgramParameters"/>
        <childnode refid="31114" relation="public-inheritance">
        </childnode>
        <childnode refid="31115" relation="usage">
          <edgelabel>mNamedConstants</edgelabel>
        </childnode>
        <childnode refid="31118" relation="usage">
          <edgelabel>mIntLogicalToPhysical</edgelabel>
          <edgelabel>mFloatLogicalToPhysical</edgelabel>
        </childnode>
        <childnode refid="31121" relation="usage">
          <edgelabel>mAutoConstants</edgelabel>
        </childnode>
        <childnode refid="31026" relation="usage">
          <edgelabel>mRenderSystemData</edgelabel>
        </childnode>
        <childnode refid="31122" relation="usage">
          <edgelabel>mSharedParamSets</edgelabel>
        </childnode>
        <childnode refid="31123" relation="usage">
          <edgelabel>mIntConstants</edgelabel>
        </childnode>
        <childnode refid="31124" relation="usage">
          <edgelabel>mFloatConstants</edgelabel>
        </childnode>
        <childnode refid="31125" relation="usage">
          <edgelabel>AutoConstantDictionary</edgelabel>
        </childnode>
      </node>
      <node id="31138">
        <label>Ogre::Technique</label>
        <link refid="classOgre_1_1Technique"/>
        <childnode refid="31139" relation="public-inheritance">
        </childnode>
        <childnode refid="30916" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31140" relation="usage">
          <edgelabel>mIlluminationPasses</edgelabel>
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mShadowReceiverMaterial</edgelabel>
          <edgelabel>mShadowCasterMaterial</edgelabel>
        </childnode>
        <childnode refid="31141" relation="usage">
          <edgelabel>mGPUVendorRules</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mShadowReceiverMaterialName</edgelabel>
          <edgelabel>mShadowCasterMaterialName</edgelabel>
        </childnode>
        <childnode refid="31142" relation="usage">
          <edgelabel>mGPUDeviceNameRules</edgelabel>
        </childnode>
        <childnode refid="31024" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
        <childnode refid="31143" relation="usage">
          <edgelabel>mPasses</edgelabel>
        </childnode>
      </node>
      <node id="31069">
        <label>Ogre::HardwareIndexBuffer</label>
        <link refid="classOgre_1_1HardwareIndexBuffer"/>
        <childnode refid="30998" relation="public-inheritance">
        </childnode>
        <childnode refid="31000" relation="usage">
          <edgelabel>mMgr</edgelabel>
        </childnode>
      </node>
      <node id="31148">
        <label>Ogre::vector&lt; PlaneBoundedVolume &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31055">
        <label>Ogre::Node::Listener</label>
        <link refid="classOgre_1_1Node_1_1Listener"/>
      </node>
      <node id="31315">
        <label>Ogre::Singleton&lt; ControllerManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31314" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31265">
        <label>Ogre::Rectangle</label>
        <link refid="structOgre_1_1Rectangle"/>
      </node>
      <node id="31219">
        <label>Ogre::list&lt; HardwareOcclusionQuery * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="30934">
        <label>Ogre::map&lt; String, MovableObjectFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31268">
        <label>Ogre::map&lt; String, OverlayContainer * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31090">
        <label>Ogre::vector&lt; CompositionPass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30886">
        <label>Ogre::Singleton&lt; RenderSystemCapabilitiesManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30885" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31298">
        <label>std::basic_ofstream&lt; char &gt;</label>
        <childnode refid="31299" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31271">
        <label>ScriptCompilerAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31322">
        <label>Ogre::SkeletonManager</label>
        <link refid="classOgre_1_1SkeletonManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="31323" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30919">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="30920" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="30921" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31260">
        <label>Ogre::UTFString</label>
        <link refid="classOgre_1_1UTFString"/>
        <childnode refid="30888" relation="usage">
          <edgelabel>mStrBuffer</edgelabel>
        </childnode>
        <childnode refid="31261" relation="usage">
          <edgelabel>mUTF32StrBuffer</edgelabel>
        </childnode>
        <childnode refid="31262" relation="usage">
          <edgelabel>mData</edgelabel>
        </childnode>
        <childnode refid="31263" relation="usage">
          <edgelabel>mWStrBuffer</edgelabel>
        </childnode>
      </node>
      <node id="30979">
        <label>Ogre::multimap&lt; uchar, RenderTarget * &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="30973">
        <label>Ogre::vector&lt; const SceneManagerMetaData * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30898">
        <label>Ogre::DriverVersion</label>
        <link refid="structOgre_1_1DriverVersion"/>
      </node>
      <node id="31071">
        <label>Ogre::vector&lt; RenderQueueListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31108">
        <label>Ogre::Pass::HashFunc</label>
        <link refid="structOgre_1_1Pass_1_1HashFunc"/>
      </node>
      <node id="31134">
        <label>Ogre::GpuProgram::CmdType</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdType"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31282">
        <label>Ogre::list&lt; ResourceDeclaration &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31053">
        <label>Ogre::multimap&lt; size_t, VertexBoneAssignment &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="31312">
        <label>Ogre::vector&lt; DynLib * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31225">
        <label>Ogre::Singleton&lt; ExternalTextureSourceManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31224" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31026">
        <label>Ogre::Any</label>
        <link refid="classOgre_1_1Any"/>
        <childnode refid="31027" relation="usage">
          <edgelabel>mContent</edgelabel>
        </childnode>
      </node>
      <node id="31006">
        <label>Ogre::set&lt; VertexDeclaration * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="30954">
        <label>Ogre::vector&lt; Plugin * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31101">
        <label>std::bitset&lt; RENDER_QUEUE_COUNT &gt;</label>
      </node>
      <node id="31010">
        <label>RenderQueueAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31319">
        <label>Ogre::set&lt; Controller&lt; Real &gt; * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="30947">
        <label>OverlayAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="30939">
        <label>Ogre::map&lt; String, ParticleAffectorFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30908">
        <label>Ogre::map&lt; ResourceHandle, ResourcePtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30952">
        <label>UtilityAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31156">
        <label>Ogre::set&lt; LodListener * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31094">
        <label>Ogre::vector&lt; TextureDefinition * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31080">
        <label>Ogre::map&lt; String, SceneNode * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31087">
        <label>Ogre::map&lt; String, TexturePtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30901">
        <label>Ogre::DataStream</label>
        <link refid="classOgre_1_1DataStream"/>
        <childnode refid="30902" relation="public-inheritance">
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
      </node>
      <node id="30896">
        <label>Ogre::RenderSystemCapabilities</label>
        <link refid="classOgre_1_1RenderSystemCapabilities"/>
        <childnode refid="30887" relation="public-inheritance">
        </childnode>
        <childnode refid="30897" relation="usage">
          <edgelabel>mSupportedShaderProfiles</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mRenderSystemName</edgelabel>
          <edgelabel>mDeviceName</edgelabel>
        </childnode>
        <childnode refid="30898" relation="usage">
          <edgelabel>mDriverVersion</edgelabel>
        </childnode>
      </node>
      <node id="31125">
        <label>Ogre::GpuProgramParameters::AutoConstantDefinition</label>
        <link refid="structOgre_1_1GpuProgramParameters_1_1AutoConstantDefinition"/>
        <childnode refid="30888" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="31232">
        <label>Ogre::ArchiveFactory</label>
        <link refid="classOgre_1_1ArchiveFactory"/>
        <childnode refid="31233" relation="public-inheritance">
        </childnode>
        <childnode refid="31234" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31097">
        <label>Ogre::vector&lt; CompositorInstance::RenderSystemOperation * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30914">
        <label>Ogre::MaterialPtr</label>
        <link refid="classOgre_1_1MaterialPtr"/>
        <childnode refid="30915" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31234">
        <label>ArchiveAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31215">
        <label>Ogre::Vector2</label>
        <link refid="classOgre_1_1Vector2"/>
        <childnode refid="31215" relation="usage">
          <edgelabel>ZERO</edgelabel>
          <edgelabel>UNIT_SCALE</edgelabel>
          <edgelabel>NEGATIVE_UNIT_X</edgelabel>
          <edgelabel>UNIT_X</edgelabel>
          <edgelabel>NEGATIVE_UNIT_Y</edgelabel>
          <edgelabel>UNIT_Y</edgelabel>
        </childnode>
      </node>
      <node id="31000">
        <label>Ogre::HardwareBufferManagerBase</label>
        <link refid="classOgre_1_1HardwareBufferManagerBase"/>
        <childnode refid="30999" relation="public-inheritance">
        </childnode>
        <childnode refid="31001" relation="usage">
          <edgelabel>mIndexBuffers</edgelabel>
        </childnode>
        <childnode refid="31002" relation="usage">
          <edgelabel>mVertexBufferBindings</edgelabel>
        </childnode>
        <childnode refid="31003" relation="usage">
          <edgelabel>mFreeTempVertexBufferMap</edgelabel>
        </childnode>
        <childnode refid="31004" relation="usage">
          <edgelabel>mTempVertexBufferLicenses</edgelabel>
        </childnode>
        <childnode refid="31005" relation="usage">
          <edgelabel>mVertexBuffers</edgelabel>
        </childnode>
        <childnode refid="31006" relation="usage">
          <edgelabel>mVertexDeclarations</edgelabel>
        </childnode>
      </node>
      <node id="30981">
        <label>Ogre::Vector3</label>
        <link refid="classOgre_1_1Vector3"/>
        <childnode refid="30981" relation="usage">
          <edgelabel>ZERO</edgelabel>
          <edgelabel>UNIT_SCALE</edgelabel>
          <edgelabel>NEGATIVE_UNIT_X</edgelabel>
          <edgelabel>UNIT_X</edgelabel>
          <edgelabel>NEGATIVE_UNIT_Y</edgelabel>
          <edgelabel>UNIT_Y</edgelabel>
          <edgelabel>NEGATIVE_UNIT_Z</edgelabel>
          <edgelabel>UNIT_Z</edgelabel>
        </childnode>
      </node>
      <node id="31183">
        <label>Ogre::Vector4</label>
        <link refid="classOgre_1_1Vector4"/>
        <childnode refid="31183" relation="usage">
          <edgelabel>ZERO</edgelabel>
        </childnode>
      </node>
      <node id="31070">
        <label>Ogre::Rectangle2D</label>
        <link refid="classOgre_1_1Rectangle2D"/>
        <childnode refid="31063" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31059">
        <label>Ogre::vector&lt; RenderObjectListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31169">
        <label>Ogre::RenderQueue::RenderableListener</label>
        <link refid="classOgre_1_1RenderQueue_1_1RenderableListener"/>
      </node>
      <node id="31192">
        <label>Ogre::list&lt; SceneQuery::WorldFragment * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31311">
        <label>Ogre::map&lt; String, ArchiveFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30890">
        <label>Ogre::RenderSystemCapabilitiesSerializer</label>
        <link refid="classOgre_1_1RenderSystemCapabilitiesSerializer"/>
        <childnode refid="30887" relation="public-inheritance">
        </childnode>
        <childnode refid="30891" relation="usage">
          <edgelabel>mSetIntMethodDispatchTable</edgelabel>
        </childnode>
        <childnode refid="30892" relation="usage">
          <edgelabel>mSetRealMethodDispatchTable</edgelabel>
        </childnode>
        <childnode refid="30893" relation="usage">
          <edgelabel>mSetBoolMethodDispatchTable</edgelabel>
        </childnode>
        <childnode refid="30894" relation="usage">
          <edgelabel>mSetStringMethodDispatchTable</edgelabel>
        </childnode>
        <childnode refid="30895" relation="usage">
          <edgelabel>mKeywordTypeMap</edgelabel>
        </childnode>
        <childnode refid="30896" relation="usage">
          <edgelabel>mCurrentCapabilities</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mCurrentLine</edgelabel>
        </childnode>
        <childnode refid="30899" relation="usage">
          <edgelabel>mCapabilitiesMap</edgelabel>
        </childnode>
        <childnode refid="30900" relation="usage">
          <edgelabel>mCurrentStream</edgelabel>
        </childnode>
      </node>
      <node id="31261">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="30935">
        <label>Ogre::ParticleSystemManager</label>
        <link refid="classOgre_1_1ParticleSystemManager"/>
        <childnode refid="30936" relation="public-inheritance">
        </childnode>
        <childnode refid="30906" relation="public-inheritance">
        </childnode>
        <childnode refid="30937" relation="public-inheritance">
        </childnode>
        <childnode refid="30938" relation="usage">
          <edgelabel>mRendererFactories</edgelabel>
        </childnode>
        <childnode refid="30939" relation="usage">
          <edgelabel>mAffectorFactories</edgelabel>
        </childnode>
        <childnode refid="30940" relation="usage">
          <edgelabel>mEmitterFactories</edgelabel>
        </childnode>
        <childnode refid="30941" relation="usage">
          <edgelabel>mFactory</edgelabel>
        </childnode>
        <childnode refid="30944" relation="usage">
          <edgelabel>mSystemTemplates</edgelabel>
        </childnode>
        <childnode refid="30911" relation="usage">
          <edgelabel>mScriptPatterns</edgelabel>
        </childnode>
      </node>
      <node id="31066">
        <label>IndexDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="30971">
        <label>SceneMgtAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="30902">
        <label>StreamAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31202">
        <label>Ogre::Entity</label>
        <link refid="classOgre_1_1Entity"/>
        <childnode refid="31015" relation="public-inheritance">
        </childnode>
        <childnode refid="31111" relation="public-inheritance">
        </childnode>
        <childnode refid="31203" relation="usage">
          <edgelabel>mSchemeHardwareAnim</edgelabel>
        </childnode>
        <childnode refid="31045" relation="usage">
          <edgelabel>mSoftwareVertexAnimVertexData</edgelabel>
          <edgelabel>mSkelAnimVertexData</edgelabel>
          <edgelabel>mHardwareVertexAnimVertexData</edgelabel>
        </childnode>
        <childnode refid="31033" relation="usage">
          <edgelabel>mMesh</edgelabel>
        </childnode>
        <childnode refid="31204" relation="usage">
          <edgelabel>mChildObjectList</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mFullBoundingBox</edgelabel>
        </childnode>
        <childnode refid="31205" relation="usage">
          <edgelabel>mSkeletonInstance</edgelabel>
        </childnode>
        <childnode refid="31161" relation="usage">
          <edgelabel>mAnimationState</edgelabel>
        </childnode>
        <childnode refid="31144" relation="usage">
          <edgelabel>mSharedSkeletonEntities</edgelabel>
        </childnode>
        <childnode refid="31207" relation="usage">
          <edgelabel>mSubEntityList</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mLastParentXform</edgelabel>
          <edgelabel>mBoneMatrices</edgelabel>
          <edgelabel>mBoneWorldMatrices</edgelabel>
        </childnode>
        <childnode refid="31208" relation="usage">
          <edgelabel>mTempSkelAnimInfo</edgelabel>
          <edgelabel>mTempVertexAnimInfo</edgelabel>
        </childnode>
        <childnode refid="31210" relation="usage">
          <edgelabel>mLodEntityList</edgelabel>
        </childnode>
      </node>
      <node id="31102">
        <label>Ogre::vector&lt; RenderSystemOpPair &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30884">
        <label>RootAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31141">
        <label>Ogre::vector&lt; GPUVendorRule &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31281">
        <label>Ogre::list&lt; ResourceLocation * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31297">
        <label>std::ofstream</label>
        <childnode refid="31298" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31039">
        <label>Ogre::Skeleton</label>
        <link refid="classOgre_1_1Skeleton"/>
        <childnode refid="30917" relation="public-inheritance">
        </childnode>
        <childnode refid="31036" relation="public-inheritance">
        </childnode>
        <childnode refid="31040" relation="usage">
          <edgelabel>mLinkedSkeletonAnimSourceList</edgelabel>
        </childnode>
        <childnode refid="31041" relation="usage">
          <edgelabel>mBoneList</edgelabel>
          <edgelabel>mRootBones</edgelabel>
        </childnode>
        <childnode refid="31042" relation="usage">
          <edgelabel>mAnimationsList</edgelabel>
        </childnode>
        <childnode refid="31043" relation="usage">
          <edgelabel>mBoneListByName</edgelabel>
        </childnode>
        <childnode refid="31044" relation="usage">
          <edgelabel>mManualBones</edgelabel>
        </childnode>
      </node>
      <node id="30943">
        <label>MovableAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31078">
        <label>Ogre::Plane</label>
        <link refid="classOgre_1_1Plane"/>
        <childnode refid="30981" relation="usage">
          <edgelabel>normal</edgelabel>
        </childnode>
      </node>
      <node id="31266">
        <label>Ogre::OverlayElementCommands::CmdMetricsMode</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdMetricsMode"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31330">
        <label>std::map&lt; StringPair, TextureDefMap &gt;</label>
        <childnode refid="30919" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31316">
        <label>ControllerAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31050">
        <label>Ogre::vector&lt; unsigned short &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31068">
        <label>Ogre::SharedPtr&lt; HardwareIndexBuffer &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31069" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31231">
        <label>Ogre::ExternalTextureSource::CmdInputFileName</label>
        <link refid="classOgre_1_1ExternalTextureSource_1_1CmdInputFileName"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31038">
        <label>Ogre::SharedPtr&lt; Skeleton &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31039" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="30909">
        <label>Ogre::AtomicScalar&lt; size_t &gt;</label>
        <link refid="classOgre_1_1AtomicScalar"/>
      </node>
      <node id="31307">
        <label>Ogre::ShadowTextureManager</label>
        <link refid="classOgre_1_1ShadowTextureManager"/>
        <childnode refid="31308" relation="public-inheritance">
        </childnode>
        <childnode refid="31151" relation="public-inheritance">
        </childnode>
        <childnode refid="31157" relation="usage">
          <edgelabel>mTextureList</edgelabel>
          <edgelabel>mNullTextureList</edgelabel>
        </childnode>
      </node>
      <node id="30913">
        <label>Ogre::map&lt; String, unsigned short &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31212">
        <label>Ogre::map&lt; String, InstancedGeometry * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31187">
        <label>Ogre::RegionSceneQuery</label>
        <link refid="classOgre_1_1RegionSceneQuery"/>
        <childnode refid="31188" relation="public-inheritance">
        </childnode>
        <childnode refid="31190" relation="public-inheritance">
        </childnode>
        <childnode refid="31191" relation="usage">
          <edgelabel>mLastResult</edgelabel>
        </childnode>
      </node>
      <node id="31223">
        <label>Ogre::deque&lt; unsigned long &gt;</label>
        <link refid="structOgre_1_1deque"/>
      </node>
      <node id="30978">
        <label>Ogre::RenderSystem</label>
        <link refid="classOgre_1_1RenderSystem"/>
        <childnode refid="30887" relation="public-inheritance">
        </childnode>
        <childnode refid="30979" relation="usage">
          <edgelabel>mPrioritisedRenderTargets</edgelabel>
        </childnode>
        <childnode refid="30980" relation="usage">
          <edgelabel>mDepthBufferPool</edgelabel>
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mTexProjRelativeOrigin</edgelabel>
        </childnode>
        <childnode refid="30982" relation="usage">
          <edgelabel>mGlobalInstanceVertexBufferVertexDeclaration</edgelabel>
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mManualBlendColours</edgelabel>
        </childnode>
        <childnode refid="30986" relation="usage">
          <edgelabel>mActiveRenderTarget</edgelabel>
        </childnode>
        <childnode refid="30994" relation="usage">
          <edgelabel>mClipPlanes</edgelabel>
        </childnode>
        <childnode refid="30995" relation="usage">
          <edgelabel>mGlobalInstanceVertexBuffer</edgelabel>
        </childnode>
        <childnode refid="31007" relation="usage">
          <edgelabel>mActiveViewport</edgelabel>
        </childnode>
        <childnode refid="31217" relation="usage">
          <edgelabel>mTextureManager</edgelabel>
        </childnode>
        <childnode refid="30896" relation="usage">
          <edgelabel>mRealCapabilities</edgelabel>
          <edgelabel>mCurrentCapabilities</edgelabel>
        </childnode>
        <childnode refid="31112" relation="usage">
          <edgelabel>mActiveGeometryGpuProgramParameters</edgelabel>
          <edgelabel>mActiveFragmentGpuProgramParameters</edgelabel>
          <edgelabel>mActiveVertexGpuProgramParameters</edgelabel>
        </childnode>
        <childnode refid="30911" relation="usage">
          <edgelabel>mEventNames</edgelabel>
        </childnode>
        <childnode refid="31219" relation="usage">
          <edgelabel>mHwOcclusionQueries</edgelabel>
        </childnode>
        <childnode refid="31220" relation="usage">
          <edgelabel>mEventListeners</edgelabel>
        </childnode>
        <childnode refid="31221" relation="usage">
          <edgelabel>mRenderTargets</edgelabel>
        </childnode>
        <childnode refid="30898" relation="usage">
          <edgelabel>mDriverVersion</edgelabel>
        </childnode>
      </node>
      <node id="31251">
        <label>Ogre::OverlayElement</label>
        <link refid="classOgre_1_1OverlayElement"/>
        <childnode refid="30918" relation="public-inheritance">
        </childnode>
        <childnode refid="31030" relation="public-inheritance">
        </childnode>
        <childnode refid="30947" relation="public-inheritance">
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mColour</edgelabel>
        </childnode>
        <childnode refid="31252" relation="usage">
          <edgelabel>msHeightCmd</edgelabel>
        </childnode>
        <childnode refid="31253" relation="usage">
          <edgelabel>msCaptionCmd</edgelabel>
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="31244" relation="usage">
          <edgelabel>mOverlay</edgelabel>
        </childnode>
        <childnode refid="31254" relation="usage">
          <edgelabel>msHorizontalAlignCmd</edgelabel>
        </childnode>
        <childnode refid="31255" relation="usage">
          <edgelabel>msLeftCmd</edgelabel>
        </childnode>
        <childnode refid="31256" relation="usage">
          <edgelabel>msVerticalAlignCmd</edgelabel>
        </childnode>
        <childnode refid="31257" relation="usage">
          <edgelabel>msWidthCmd</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mMaterialName</edgelabel>
        </childnode>
        <childnode refid="31258" relation="usage">
          <edgelabel>msMaterialCmd</edgelabel>
        </childnode>
        <childnode refid="31259" relation="usage">
          <edgelabel>msTopCmd</edgelabel>
        </childnode>
        <childnode refid="31260" relation="usage">
          <edgelabel>mCaption</edgelabel>
        </childnode>
        <childnode refid="31251" relation="usage">
          <edgelabel>mSourceTemplate</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mXForm</edgelabel>
        </childnode>
        <childnode refid="31250" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31265" relation="usage">
          <edgelabel>mClippingRegion</edgelabel>
        </childnode>
        <childnode refid="31266" relation="usage">
          <edgelabel>msMetricsModeCmd</edgelabel>
        </childnode>
        <childnode refid="31267" relation="usage">
          <edgelabel>msVisibleCmd</edgelabel>
        </childnode>
      </node>
      <node id="30976">
        <label>Ogre::SceneManagerMetaData</label>
        <link refid="structOgre_1_1SceneManagerMetaData"/>
        <childnode refid="30888" relation="usage">
          <edgelabel>typeName</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
      </node>
      <node id="30984">
        <label>Ogre::list&lt; VertexElement &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31211">
        <label>Ogre::set&lt; SceneNode * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="30969">
        <label>Ogre::SceneManagerEnumerator</label>
        <link refid="classOgre_1_1SceneManagerEnumerator"/>
        <childnode refid="30970" relation="public-inheritance">
        </childnode>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="30972" relation="usage">
          <edgelabel>mFactories</edgelabel>
        </childnode>
        <childnode refid="30973" relation="usage">
          <edgelabel>mMetaDataList</edgelabel>
        </childnode>
        <childnode refid="30974" relation="usage">
          <edgelabel>mDefaultFactory</edgelabel>
        </childnode>
        <childnode refid="30977" relation="usage">
          <edgelabel>mInstances</edgelabel>
        </childnode>
        <childnode refid="30978" relation="usage">
          <edgelabel>mCurrentRenderSystem</edgelabel>
        </childnode>
      </node>
      <node id="31279">
        <label>Ogre::map&lt; String, ResourceManager * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31032">
        <label>Ogre::Renderable::RenderSystemData</label>
        <link refid="classOgre_1_1Renderable_1_1RenderSystemData"/>
      </node>
      <node id="31193">
        <label>Ogre::list&lt; MovableObject * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="30990">
        <label>TimerAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31095">
        <label>Ogre::vector&lt; CompositionTargetPass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30957">
        <label>Ogre::HighLevelGpuProgramFactory</label>
        <link refid="classOgre_1_1HighLevelGpuProgramFactory"/>
        <childnode refid="30958" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30911">
        <label>Ogre::vector&lt; String &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30983">
        <label>VertexDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31198">
        <label>Ogre::AutoParamDataSource</label>
        <link refid="classOgre_1_1AutoParamDataSource"/>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mCameraRelativePosition</edgelabel>
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mAmbientLight</edgelabel>
          <edgelabel>mFogColour</edgelabel>
        </childnode>
        <childnode refid="31183" relation="usage">
          <edgelabel>mCameraPositionObjectSpace</edgelabel>
          <edgelabel>mSceneDepthRange</edgelabel>
          <edgelabel>mFogParams</edgelabel>
          <edgelabel>mLodCameraPositionObjectSpace</edgelabel>
          <edgelabel>mShadowCamDepthRanges</edgelabel>
          <edgelabel>mCameraPosition</edgelabel>
          <edgelabel>mLodCameraPosition</edgelabel>
        </childnode>
        <childnode refid="30986" relation="usage">
          <edgelabel>mCurrentRenderTarget</edgelabel>
        </childnode>
        <childnode refid="31014" relation="usage">
          <edgelabel>mCurrentTextureProjector</edgelabel>
        </childnode>
        <childnode refid="31007" relation="usage">
          <edgelabel>mCurrentViewport</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mCurrentSceneManager</edgelabel>
        </childnode>
        <childnode refid="31147" relation="usage">
          <edgelabel>mBlankLight</edgelabel>
        </childnode>
        <childnode refid="31106" relation="usage">
          <edgelabel>mCurrentPass</edgelabel>
        </childnode>
        <childnode refid="31199" relation="usage">
          <edgelabel>mMainCamBoundsInfo</edgelabel>
        </childnode>
        <childnode refid="31145" relation="usage">
          <edgelabel>mCurrentLightList</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mInverseTransposeWorldMatrix</edgelabel>
          <edgelabel>mViewProjMatrix</edgelabel>
          <edgelabel>mInverseViewMatrix</edgelabel>
          <edgelabel>mProjectionMatrix</edgelabel>
          <edgelabel>mWorldViewProjMatrix</edgelabel>
          <edgelabel>mInverseWorldMatrix</edgelabel>
          <edgelabel>mWorldMatrixArray</edgelabel>
          <edgelabel>mTextureViewProjMatrix</edgelabel>
          <edgelabel>mSpotlightViewProjMatrix</edgelabel>
          <edgelabel>mSpotlightWorldViewProjMatrix</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mCurrentCamera</edgelabel>
        </childnode>
        <childnode refid="31030" relation="usage">
          <edgelabel>mCurrentRenderable</edgelabel>
        </childnode>
      </node>
      <node id="31167">
        <label>Ogre::RenderQueue::RenderQueueGroupMap</label>
        <link refid="classOgre_1_1RenderQueue_1_1RenderQueueGroupMap"/>
        <childnode refid="31168" relation="usage">
          <edgelabel>mGroupVector</edgelabel>
        </childnode>
      </node>
      <node id="30944">
        <label>Ogre::map&lt; String, ParticleSystem * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30900">
        <label>Ogre::SharedPtr&lt; DataStream &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="30901" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31284">
        <label>Ogre::map&lt; Real, LoadUnloadResourceList * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31009">
        <label>Ogre::RenderQueueInvocationSequence</label>
        <link refid="classOgre_1_1RenderQueueInvocationSequence"/>
        <childnode refid="31010" relation="public-inheritance">
        </childnode>
        <childnode refid="31011" relation="usage">
          <edgelabel>mInvocations</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
      </node>
      <node id="31195">
        <label>Ogre::vector&lt; InstanceManager * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31255">
        <label>Ogre::OverlayElementCommands::CmdLeft</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdLeft"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31060">
        <label>Ogre::map&lt; const Camera *, VisibleObjectsBoundsInfo &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31031">
        <label>Ogre::map&lt; size_t, Vector4 &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30951">
        <label>Ogre::WorkQueue</label>
        <link refid="classOgre_1_1WorkQueue"/>
        <childnode refid="30952" relation="public-inheritance">
        </childnode>
        <childnode refid="30953" relation="usage">
          <edgelabel>mChannelMap</edgelabel>
        </childnode>
      </node>
      <node id="30937">
        <label>FXAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31287">
        <label>Ogre::map&lt; String, ResourceGroup * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31327">
        <label>Ogre::map&lt; TextureDef, TextureList *, TextureDefLess &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30889">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="31184">
        <label>Ogre::ManualObject::TempVertex</label>
        <link refid="structOgre_1_1ManualObject_1_1TempVertex"/>
        <childnode refid="30981" relation="usage">
          <edgelabel>tangent</edgelabel>
          <edgelabel>normal</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>colour</edgelabel>
        </childnode>
        <childnode refid="31183" relation="usage">
          <edgelabel>texCoord</edgelabel>
        </childnode>
      </node>
      <node id="31259">
        <label>Ogre::OverlayElementCommands::CmdTop</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdTop"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31182">
        <label>std::vector&lt; Vector4, STLAllocator&lt; Vector4, CategorisedAlignAllocPolicy&lt; MEMCATEGORY_GEOMETRY &gt; &gt; &gt;</label>
        <childnode refid="31183" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31239">
        <label>Ogre::map&lt; String, DynLib * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31149">
        <label>Ogre::SharedPtr&lt; ShadowCameraSetup &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31150" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31034">
        <label>Ogre::SharedPtr&lt; Mesh &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31035" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="30996">
        <label>Ogre::SharedPtr&lt; HardwareVertexBuffer &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="30997" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31011">
        <label>Ogre::vector&lt; RenderQueueInvocation * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30986">
        <label>Ogre::RenderTarget</label>
        <link refid="classOgre_1_1RenderTarget"/>
        <childnode refid="30887" relation="public-inheritance">
        </childnode>
        <childnode refid="30987" relation="usage">
          <edgelabel>mStats</edgelabel>
        </childnode>
        <childnode refid="30988" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="30989" relation="usage">
          <edgelabel>mTimer</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mFSAAHint</edgelabel>
        </childnode>
        <childnode refid="30991" relation="usage">
          <edgelabel>mViewportList</edgelabel>
        </childnode>
        <childnode refid="30992" relation="usage">
          <edgelabel>mDepthBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31178">
        <label>EdgeDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31258">
        <label>Ogre::OverlayElementCommands::CmdMaterial</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdMaterial"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31280">
        <label>Ogre::ResourceGroupManager::ResourceGroup</label>
        <link refid="structOgre_1_1ResourceGroupManager_1_1ResourceGroup"/>
        <childnode refid="31281" relation="usage">
          <edgelabel>locationList</edgelabel>
        </childnode>
        <childnode refid="31282" relation="usage">
          <edgelabel>resourceDeclarations</edgelabel>
        </childnode>
        <childnode refid="31283" relation="usage">
          <edgelabel>resourceIndexCaseInsensitive</edgelabel>
          <edgelabel>resourceIndexCaseSensitive</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>worldGeometrySceneManager</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>worldGeometry</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="31284" relation="usage">
          <edgelabel>loadResourceOrderMap</edgelabel>
        </childnode>
      </node>
      <node id="31256">
        <label>Ogre::OverlayElementCommands::CmdVerticalAlign</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdVerticalAlign"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31309">
        <label>Ogre::ArchiveManager</label>
        <link refid="classOgre_1_1ArchiveManager"/>
        <childnode refid="31310" relation="public-inheritance">
        </childnode>
        <childnode refid="31234" relation="public-inheritance">
        </childnode>
        <childnode refid="31311" relation="usage">
          <edgelabel>mArchFactories</edgelabel>
        </childnode>
        <childnode refid="31283" relation="usage">
          <edgelabel>mArchives</edgelabel>
        </childnode>
      </node>
      <node id="30995">
        <label>Ogre::HardwareVertexBufferSharedPtr</label>
        <link refid="classOgre_1_1HardwareVertexBufferSharedPtr"/>
        <childnode refid="30996" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31091">
        <label>Ogre::Compositor</label>
        <link refid="classOgre_1_1Compositor"/>
        <childnode refid="30917" relation="public-inheritance">
        </childnode>
        <childnode refid="31087" relation="usage">
          <edgelabel>mGlobalTextures</edgelabel>
        </childnode>
        <childnode refid="31092" relation="usage">
          <edgelabel>mTechniques</edgelabel>
          <edgelabel>mSupportedTechniques</edgelabel>
        </childnode>
        <childnode refid="31093" relation="usage">
          <edgelabel>mGlobalMRTs</edgelabel>
        </childnode>
      </node>
      <node id="30997">
        <label>Ogre::HardwareVertexBuffer</label>
        <link refid="classOgre_1_1HardwareVertexBuffer"/>
        <childnode refid="30998" relation="public-inheritance">
        </childnode>
        <childnode refid="31000" relation="usage">
          <edgelabel>mMgr</edgelabel>
        </childnode>
      </node>
      <node id="30962">
        <label>Ogre::WorkQueue::RequestHandler</label>
        <link refid="classOgre_1_1WorkQueue_1_1RequestHandler"/>
      </node>
      <node id="31115">
        <label>Ogre::SharedPtr&lt; GpuNamedConstants &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31116" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="30917">
        <label>Ogre::Resource</label>
        <link refid="classOgre_1_1Resource"/>
        <childnode refid="30918" relation="public-inheritance">
        </childnode>
        <childnode refid="30907" relation="public-inheritance">
        </childnode>
        <childnode refid="30905" relation="usage">
          <edgelabel>mCreator</edgelabel>
        </childnode>
        <childnode refid="30925" relation="usage">
          <edgelabel>mLoader</edgelabel>
        </childnode>
        <childnode refid="30926" relation="usage">
          <edgelabel>mLoadingState</edgelabel>
        </childnode>
        <childnode refid="30927" relation="usage">
          <edgelabel>mListenerList</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mGroup</edgelabel>
          <edgelabel>mOrigin</edgelabel>
        </childnode>
      </node>
      <node id="31329">
        <label>Ogre::map&lt; String, CompositorLogic * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30960">
        <label>Ogre::ResourceBackgroundQueue</label>
        <link refid="classOgre_1_1ResourceBackgroundQueue"/>
        <childnode refid="30961" relation="public-inheritance">
        </childnode>
        <childnode refid="30907" relation="public-inheritance">
        </childnode>
        <childnode refid="30962" relation="public-inheritance">
        </childnode>
        <childnode refid="30963" relation="public-inheritance">
        </childnode>
        <childnode refid="30964" relation="usage">
          <edgelabel>mOutstandingRequestSet</edgelabel>
        </childnode>
      </node>
      <node id="30931">
        <label>LodAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31051">
        <label>Ogre::vector&lt; SubMesh * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31304">
        <label>Ogre::LodStrategyManager</label>
        <link refid="classOgre_1_1LodStrategyManager"/>
        <childnode refid="31305" relation="public-inheritance">
        </childnode>
        <childnode refid="30931" relation="public-inheritance">
        </childnode>
        <childnode refid="30930" relation="usage">
          <edgelabel>mDefaultStrategy</edgelabel>
        </childnode>
        <childnode refid="31306" relation="usage">
          <edgelabel>mStrategies</edgelabel>
        </childnode>
      </node>
      <node id="31303">
        <label>Ogre::set&lt; FrameListener * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31263">
        <label>std::wstring</label>
        <childnode refid="31264" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30966">
        <label>Ogre::Singleton&lt; MeshManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30965" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31163">
        <label>Ogre::map&lt; String, AnimationState * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31017">
        <label>Ogre::AnimableObject</label>
        <link refid="classOgre_1_1AnimableObject"/>
        <childnode refid="30919" relation="usage">
          <edgelabel>msAnimableDictionary</edgelabel>
        </childnode>
      </node>
      <node id="31302">
        <label>Ogre::map&lt; String, Log * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31267">
        <label>Ogre::OverlayElementCommands::CmdVisible</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdVisible"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31042">
        <label>Ogre::map&lt; String, Animation * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31325">
        <label>Ogre::Singleton&lt; CompositorManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31324" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31206">
        <label>Ogre::list&lt; TagPoint * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31272">
        <label>Ogre::vector&lt; ScriptTranslatorManager * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31014">
        <label>Ogre::Frustum</label>
        <link refid="classOgre_1_1Frustum"/>
        <childnode refid="31015" relation="public-inheritance">
        </childnode>
        <childnode refid="31030" relation="public-inheritance">
        </childnode>
        <childnode refid="31215" relation="usage">
          <edgelabel>mFrustumOffset</edgelabel>
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mWorldSpaceCorners</edgelabel>
          <edgelabel>mLastParentPosition</edgelabel>
        </childnode>
        <childnode refid="31045" relation="usage">
          <edgelabel>mVertexData</edgelabel>
        </childnode>
        <childnode refid="31078" relation="usage">
          <edgelabel>mReflectPlane</edgelabel>
          <edgelabel>mFrustumPlanes</edgelabel>
          <edgelabel>mObliqueProjPlane</edgelabel>
          <edgelabel>mLastLinkedReflectionPlane</edgelabel>
          <edgelabel>mLastLinkedObliqueProjPlane</edgelabel>
        </childnode>
        <childnode refid="31216" relation="usage">
          <edgelabel>mLinkedReflectPlane</edgelabel>
          <edgelabel>mLinkedObliqueProjPlane</edgelabel>
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mBoundingBox</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mProjMatrixRSDepth</edgelabel>
          <edgelabel>mReflectMatrix</edgelabel>
          <edgelabel>mProjMatrix</edgelabel>
          <edgelabel>mProjMatrixRS</edgelabel>
          <edgelabel>mViewMatrix</edgelabel>
        </childnode>
        <childnode refid="31056" relation="usage">
          <edgelabel>mLastParentOrientation</edgelabel>
        </childnode>
        <childnode refid="31154" relation="usage">
          <edgelabel>mFOVy</edgelabel>
        </childnode>
      </node>
      <node id="31022">
        <label>Ogre::set&lt; Node * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="30974">
        <label>Ogre::DefaultSceneManagerFactory</label>
        <link refid="classOgre_1_1DefaultSceneManagerFactory"/>
        <childnode refid="30975" relation="public-inheritance">
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>FACTORY_TYPE_NAME</edgelabel>
        </childnode>
      </node>
      <node id="31084">
        <label>CompositorInstAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31072">
        <label>Ogre::vector&lt; EntityMaterialLodChangedEvent &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31064">
        <label>Ogre::RenderOperation</label>
        <link refid="classOgre_1_1RenderOperation"/>
        <childnode refid="31065" relation="usage">
          <edgelabel>indexData</edgelabel>
        </childnode>
        <childnode refid="31045" relation="usage">
          <edgelabel>vertexData</edgelabel>
        </childnode>
        <childnode refid="31030" relation="usage">
          <edgelabel>srcRenderable</edgelabel>
        </childnode>
      </node>
      <node id="31229">
        <label>Ogre::ExternalTextureSource::CmdFPS</label>
        <link refid="classOgre_1_1ExternalTextureSource_1_1CmdFPS"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30885">
        <label>Ogre::RenderSystemCapabilitiesManager</label>
        <link refid="classOgre_1_1RenderSystemCapabilitiesManager"/>
        <childnode refid="30886" relation="public-inheritance">
        </childnode>
        <childnode refid="30887" relation="public-inheritance">
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mScriptPattern</edgelabel>
        </childnode>
        <childnode refid="30890" relation="usage">
          <edgelabel>mSerializer</edgelabel>
        </childnode>
        <childnode refid="30903" relation="usage">
          <edgelabel>mCapabilitiesMap</edgelabel>
        </childnode>
      </node>
      <node id="31275">
        <label>Ogre::ScriptCompilerListener</label>
        <link refid="classOgre_1_1ScriptCompilerListener"/>
      </node>
      <node id="31177">
        <label>Ogre::EdgeData</label>
        <link refid="classOgre_1_1EdgeData"/>
        <childnode refid="31178" relation="public-inheritance">
        </childnode>
        <childnode refid="31179" relation="usage">
          <edgelabel>triangleLightFacings</edgelabel>
        </childnode>
        <childnode refid="31180" relation="usage">
          <edgelabel>triangles</edgelabel>
        </childnode>
        <childnode refid="31181" relation="usage">
          <edgelabel>edgeGroups</edgelabel>
        </childnode>
        <childnode refid="31182" relation="usage">
          <edgelabel>triangleFaceNormals</edgelabel>
        </childnode>
      </node>
      <node id="31171">
        <label>Ogre::SharedPtr&lt; Texture &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31077" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31004">
        <label>Ogre::map&lt; HardwareVertexBuffer *, VertexBufferLicense &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31076">
        <label>Ogre::map&lt; String, StaticGeometry * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30949">
        <label>Ogre::map&lt; String, OverlayElement * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31021">
        <label>Ogre::NameGenerator</label>
        <link refid="classOgre_1_1NameGenerator"/>
        <childnode refid="30888" relation="usage">
          <edgelabel>mPrefix</edgelabel>
        </childnode>
      </node>
      <node id="31062">
        <label>Ogre::WireBoundingBox</label>
        <link refid="classOgre_1_1WireBoundingBox"/>
        <childnode refid="31063" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31170">
        <label>Ogre::TexturePtr</label>
        <link refid="classOgre_1_1TexturePtr"/>
        <childnode refid="31171" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31293">
        <label>Ogre::Singleton&lt; LogManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31292" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31155">
        <label>Ogre::vector&lt; Camera * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31176">
        <label>Ogre::ManualObject::ManualObjectSection</label>
        <link refid="classOgre_1_1ManualObject_1_1ManualObjectSection"/>
        <childnode refid="31030" relation="public-inheritance">
        </childnode>
        <childnode refid="30943" relation="public-inheritance">
        </childnode>
        <childnode refid="31064" relation="usage">
          <edgelabel>mRenderOperation</edgelabel>
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mMaterial</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mMaterialName</edgelabel>
          <edgelabel>mGroupName</edgelabel>
        </childnode>
        <childnode refid="31174" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
      </node>
      <node id="31274">
        <label>ScriptTranslatorAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31313">
        <label>Ogre::deque&lt; SceneManager * &gt;</label>
        <link refid="structOgre_1_1deque"/>
      </node>
      <node id="31305">
        <label>Ogre::Singleton&lt; LodStrategyManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31304" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31314">
        <label>Ogre::ControllerManager</label>
        <link refid="classOgre_1_1ControllerManager"/>
        <childnode refid="31315" relation="public-inheritance">
        </childnode>
        <childnode refid="31316" relation="public-inheritance">
        </childnode>
        <childnode refid="31317" relation="usage">
          <edgelabel>mPassthroughFunction</edgelabel>
        </childnode>
        <childnode refid="31319" relation="usage">
          <edgelabel>mControllers</edgelabel>
        </childnode>
        <childnode refid="31320" relation="usage">
          <edgelabel>mFrameTimeController</edgelabel>
        </childnode>
      </node>
      <node id="30950">
        <label>Ogre::map&lt; String, Overlay * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31236">
        <label>Ogre::DynLibManager</label>
        <link refid="classOgre_1_1DynLibManager"/>
        <childnode refid="31237" relation="public-inheritance">
        </childnode>
        <childnode refid="31238" relation="public-inheritance">
        </childnode>
        <childnode refid="31239" relation="usage">
          <edgelabel>mLibList</edgelabel>
        </childnode>
      </node>
      <node id="30964">
        <label>Ogre::set&lt; BackgroundProcessTicket &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="30987">
        <label>Ogre::RenderTarget::FrameStats</label>
        <link refid="structOgre_1_1RenderTarget_1_1FrameStats"/>
      </node>
      <node id="31321">
        <label>Ogre::ControllerValue&lt; Real &gt;</label>
        <link refid="classOgre_1_1ControllerValue"/>
        <childnode refid="31316" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31250">
        <label>Ogre::OverlayContainer</label>
        <link refid="classOgre_1_1OverlayContainer"/>
        <childnode refid="31251" relation="public-inheritance">
        </childnode>
        <childnode refid="31268" relation="usage">
          <edgelabel>mChildContainers</edgelabel>
        </childnode>
        <childnode refid="30949" relation="usage">
          <edgelabel>mChildren</edgelabel>
        </childnode>
      </node>
      <node id="31109">
        <label>Ogre::vector&lt; TextureUnitState * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30928">
        <label>Ogre::vector&lt; Real &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31112">
        <label>Ogre::SharedPtr&lt; GpuProgramParameters &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31113" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31295">
        <label>Ogre::Log</label>
        <link refid="classOgre_1_1Log"/>
        <childnode refid="31294" relation="public-inheritance">
        </childnode>
        <childnode refid="31296" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mLogName</edgelabel>
        </childnode>
        <childnode refid="31297" relation="usage">
          <edgelabel>mLog</edgelabel>
        </childnode>
      </node>
      <node id="31052">
        <label>Ogre::AxisAlignedBox</label>
        <link refid="classOgre_1_1AxisAlignedBox"/>
        <childnode refid="30981" relation="usage">
          <edgelabel>mMaximum</edgelabel>
          <edgelabel>mCorners</edgelabel>
          <edgelabel>mMinimum</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>BOX_INFINITE</edgelabel>
          <edgelabel>BOX_NULL</edgelabel>
        </childnode>
      </node>
      <node id="31044">
        <label>Ogre::set&lt; Bone * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31230">
        <label>Ogre::ExternalTextureSource::CmdTecPassState</label>
        <link refid="classOgre_1_1ExternalTextureSource_1_1CmdTecPassState"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30915">
        <label>Ogre::SharedPtr&lt; Material &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="30916" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="30910">
        <label>Ogre::map&lt; String, ResourcePool * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31116">
        <label>Ogre::GpuNamedConstants</label>
        <link refid="structOgre_1_1GpuNamedConstants"/>
        <childnode refid="31114" relation="public-inheritance">
        </childnode>
        <childnode refid="31117" relation="usage">
          <edgelabel>map</edgelabel>
        </childnode>
      </node>
      <node id="31136">
        <label>Ogre::GpuProgram::CmdSyntax</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdSyntax"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31326">
        <label>Ogre::map&lt; String, CustomCompositionPass * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30904">
        <label>Ogre::MaterialManager</label>
        <link refid="classOgre_1_1MaterialManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="30912" relation="public-inheritance">
        </childnode>
        <childnode refid="30913" relation="usage">
          <edgelabel>mSchemes</edgelabel>
        </childnode>
        <childnode refid="30914" relation="usage">
          <edgelabel>mDefaultSettings</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mActiveSchemeName</edgelabel>
          <edgelabel>DEFAULT_SCHEME_NAME</edgelabel>
        </childnode>
        <childnode refid="30933" relation="usage">
          <edgelabel>mListenerMap</edgelabel>
        </childnode>
      </node>
      <node id="31118">
        <label>Ogre::SharedPtr&lt; GpuLogicalBufferStruct &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31119" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31056">
        <label>Ogre::Quaternion</label>
        <link refid="classOgre_1_1Quaternion"/>
        <childnode refid="31056" relation="usage">
          <edgelabel>IDENTITY</edgelabel>
          <edgelabel>ZERO</edgelabel>
        </childnode>
      </node>
      <node id="30929">
        <label>Ogre::vector&lt; Technique * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30992">
        <label>Ogre::DepthBuffer</label>
        <link refid="classOgre_1_1DepthBuffer"/>
        <childnode refid="30887" relation="public-inheritance">
        </childnode>
        <childnode refid="30993" relation="usage">
          <edgelabel>mAttachedRenderTargets</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mFsaaHint</edgelabel>
        </childnode>
      </node>
      <node id="30895">
        <label>Ogre::map&lt; String, CapabilityKeywordType &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31161">
        <label>Ogre::AnimationStateSet</label>
        <link refid="classOgre_1_1AnimationStateSet"/>
        <childnode refid="31162" relation="public-inheritance">
        </childnode>
        <childnode refid="31163" relation="usage">
          <edgelabel>mAnimationStates</edgelabel>
        </childnode>
        <childnode refid="31164" relation="usage">
          <edgelabel>mEnabledAnimationStates</edgelabel>
        </childnode>
      </node>
      <node id="30994">
        <label>Ogre::vector&lt; Plane &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30893">
        <label>Ogre::map&lt; String, SetBoolMethod &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30925">
        <label>Ogre::ManualResourceLoader</label>
        <link refid="classOgre_1_1ManualResourceLoader"/>
      </node>
      <node id="31168">
        <label>Ogre::vector&lt; value_type &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31086">
        <label>Ogre::CompositorInstance</label>
        <link refid="classOgre_1_1CompositorInstance"/>
        <childnode refid="31084" relation="public-inheritance">
        </childnode>
        <childnode refid="31087" relation="usage">
          <edgelabel>mLocalTextures</edgelabel>
        </childnode>
        <childnode refid="31086" relation="usage">
          <edgelabel>mPreviousInstance</edgelabel>
        </childnode>
        <childnode refid="31088" relation="usage">
          <edgelabel>mTechnique</edgelabel>
        </childnode>
        <childnode refid="31081" relation="usage">
          <edgelabel>mChain</edgelabel>
        </childnode>
        <childnode refid="31012" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="31096" relation="usage">
          <edgelabel>mReserveTextures</edgelabel>
        </childnode>
        <childnode refid="31091" relation="usage">
          <edgelabel>mCompositor</edgelabel>
        </childnode>
        <childnode refid="31093" relation="usage">
          <edgelabel>mLocalMRTs</edgelabel>
        </childnode>
      </node>
      <node id="30922">
        <label>Ogre::ParamDictionary</label>
        <link refid="classOgre_1_1ParamDictionary"/>
        <childnode refid="30923" relation="usage">
          <edgelabel>mParamCommands</edgelabel>
        </childnode>
        <childnode refid="30924" relation="usage">
          <edgelabel>mParamDefs</edgelabel>
        </childnode>
      </node>
      <node id="31096">
        <label>Ogre::map&lt; CompositionTechnique::TextureDefinition *, TexturePtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31237">
        <label>Ogre::Singleton&lt; DynLibManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31236" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="30958">
        <label>FactoryAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31306">
        <label>Ogre::map&lt; String, LodStrategy * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30927">
        <label>Ogre::set&lt; Listener * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31105">
        <label>Ogre::QueuedRenderableVisitor</label>
        <link refid="classOgre_1_1QueuedRenderableVisitor"/>
      </node>
      <node id="30941">
        <label>Ogre::ParticleSystemFactory</label>
        <link refid="classOgre_1_1ParticleSystemFactory"/>
        <childnode refid="30942" relation="public-inheritance">
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>FACTORY_TYPE_NAME</edgelabel>
        </childnode>
      </node>
      <node id="30883">
        <label>Ogre::Singleton&lt; Root &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30882" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31093">
        <label>Ogre::map&lt; String, MultiRenderTarget * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31221">
        <label>Ogre::map&lt; String, RenderTarget * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31106">
        <label>Ogre::Pass</label>
        <link refid="classOgre_1_1Pass"/>
        <childnode refid="31107" relation="public-inheritance">
        </childnode>
        <childnode refid="31108" relation="usage">
          <edgelabel>msHashFunc</edgelabel>
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mDiffuse</edgelabel>
          <edgelabel>mFogColour</edgelabel>
          <edgelabel>mEmissive</edgelabel>
          <edgelabel>mSpecular</edgelabel>
          <edgelabel>mAmbient</edgelabel>
        </childnode>
        <childnode refid="31109" relation="usage">
          <edgelabel>mTextureUnitStates</edgelabel>
        </childnode>
        <childnode refid="31050" relation="usage">
          <edgelabel>mShadowContentTypeLookup</edgelabel>
        </childnode>
        <childnode refid="31110" relation="usage">
          <edgelabel>mFragmentProgramUsage</edgelabel>
          <edgelabel>mGeometryProgramUsage</edgelabel>
          <edgelabel>mShadowCasterVertexProgramUsage</edgelabel>
          <edgelabel>mShadowReceiverVertexProgramUsage</edgelabel>
          <edgelabel>mShadowReceiverFragmentProgramUsage</edgelabel>
          <edgelabel>mShadowCasterFragmentProgramUsage</edgelabel>
          <edgelabel>mVertexProgramUsage</edgelabel>
        </childnode>
        <childnode refid="31138" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
        <childnode refid="31144" relation="usage">
          <edgelabel>msDirtyHashList</edgelabel>
          <edgelabel>msPassGraveyard</edgelabel>
        </childnode>
        <childnode refid="31024" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
      </node>
      <node id="31205">
        <label>Ogre::SkeletonInstance</label>
        <link refid="classOgre_1_1SkeletonInstance"/>
        <childnode refid="31039" relation="public-inheritance">
        </childnode>
        <childnode refid="31037" relation="usage">
          <edgelabel>mSkeleton</edgelabel>
        </childnode>
        <childnode refid="31206" relation="usage">
          <edgelabel>mFreeTagPoints</edgelabel>
          <edgelabel>mActiveTagPoints</edgelabel>
        </childnode>
      </node>
      <node id="31308">
        <label>Ogre::Singleton&lt; ShadowTextureManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31307" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31188">
        <label>Ogre::SceneQuery</label>
        <link refid="classOgre_1_1SceneQuery"/>
        <childnode refid="30971" relation="public-inheritance">
        </childnode>
        <childnode refid="31189" relation="usage">
          <edgelabel>mSupportedWorldFragments</edgelabel>
        </childnode>
        <childnode refid="31058" relation="usage">
          <edgelabel>mParentSceneMgr</edgelabel>
        </childnode>
      </node>
      <node id="31146">
        <label>std::vector&lt; Light *, STLAllocator&lt; Light *, GeneralAllocPolicy &gt; &gt;</label>
        <childnode refid="31147" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31278">
        <label>Ogre::ResourceLoadingListener</label>
        <link refid="classOgre_1_1ResourceLoadingListener"/>
      </node>
      <node id="31164">
        <label>Ogre::list&lt; AnimationState * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31299">
        <label>std::basic_ostream&lt; Char &gt;</label>
        <childnode refid="31300" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31300">
        <label>std::basic_ios&lt; Char &gt;</label>
        <childnode refid="31301" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31288">
        <label>Ogre::vector&lt; RenderSystem * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31174">
        <label>Ogre::ManualObject</label>
        <link refid="classOgre_1_1ManualObject"/>
        <childnode refid="31015" relation="public-inheritance">
        </childnode>
        <childnode refid="31175" relation="usage">
          <edgelabel>mSectionList</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mAABB</edgelabel>
        </childnode>
        <childnode refid="31176" relation="usage">
          <edgelabel>mCurrentSection</edgelabel>
        </childnode>
        <childnode refid="31177" relation="usage">
          <edgelabel>mEdgeList</edgelabel>
        </childnode>
        <childnode refid="31184" relation="usage">
          <edgelabel>mTempVertex</edgelabel>
        </childnode>
      </node>
      <node id="31144">
        <label>std::set&lt; K &gt;</label>
        <childnode refid="30920" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="30972">
        <label>Ogre::list&lt; SceneManagerFactory * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31025">
        <label>GeneralAllocatedObject</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31047">
        <label>Ogre::VertexBufferBinding</label>
        <link refid="classOgre_1_1VertexBufferBinding"/>
        <childnode refid="30983" relation="public-inheritance">
        </childnode>
        <childnode refid="31048" relation="usage">
          <edgelabel>mBindingMap</edgelabel>
        </childnode>
      </node>
      <node id="31151">
        <label>ShadowDataAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="30892">
        <label>Ogre::map&lt; String, SetRealMethod &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31137">
        <label>Ogre::GpuProgram::CmdSkeletal</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdSkeletal"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31228">
        <label>Ogre::ExternalTextureSource::CmdPlayMode</label>
        <link refid="classOgre_1_1ExternalTextureSource_1_1CmdPlayMode"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31180">
        <label>Ogre::vector&lt; Triangle &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31158">
        <label>Ogre::vector&lt; LightInfo &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31150">
        <label>Ogre::ShadowCameraSetup</label>
        <link refid="classOgre_1_1ShadowCameraSetup"/>
        <childnode refid="31151" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30916">
        <label>Ogre::Material</label>
        <link refid="classOgre_1_1Material"/>
        <childnode refid="30917" relation="public-inheritance">
        </childnode>
        <childnode refid="30928" relation="usage">
          <edgelabel>mUserLodValues</edgelabel>
          <edgelabel>mLodValues</edgelabel>
        </childnode>
        <childnode refid="30929" relation="usage">
          <edgelabel>mTechniques</edgelabel>
          <edgelabel>mSupportedTechniques</edgelabel>
        </childnode>
        <childnode refid="30930" relation="usage">
          <edgelabel>mLodStrategy</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mUnsupportedReasons</edgelabel>
        </childnode>
        <childnode refid="30932" relation="usage">
          <edgelabel>mBestTechniquesBySchemeList</edgelabel>
        </childnode>
      </node>
      <node id="30982">
        <label>Ogre::VertexDeclaration</label>
        <link refid="classOgre_1_1VertexDeclaration"/>
        <childnode refid="30983" relation="public-inheritance">
        </childnode>
        <childnode refid="30984" relation="usage">
          <edgelabel>mElementList</edgelabel>
        </childnode>
      </node>
      <node id="31035">
        <label>Ogre::Mesh</label>
        <link refid="classOgre_1_1Mesh"/>
        <childnode refid="30917" relation="public-inheritance">
        </childnode>
        <childnode refid="31036" relation="public-inheritance">
        </childnode>
        <childnode refid="31037" relation="usage">
          <edgelabel>mSkeleton</edgelabel>
        </childnode>
        <childnode refid="31045" relation="usage">
          <edgelabel>sharedVertexData</edgelabel>
        </childnode>
        <childnode refid="31042" relation="usage">
          <edgelabel>mAnimationsList</edgelabel>
        </childnode>
        <childnode refid="31049" relation="usage">
          <edgelabel>mPoseList</edgelabel>
        </childnode>
        <childnode refid="31050" relation="usage">
          <edgelabel>sharedBlendIndexToBoneIndexMap</edgelabel>
        </childnode>
        <childnode refid="31051" relation="usage">
          <edgelabel>mSubMeshList</edgelabel>
        </childnode>
        <childnode refid="30930" relation="usage">
          <edgelabel>mLodStrategy</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mAABB</edgelabel>
        </childnode>
        <childnode refid="31053" relation="usage">
          <edgelabel>mBoneAssignments</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mSkeletonName</edgelabel>
        </childnode>
        <childnode refid="31054" relation="usage">
          <edgelabel>mMeshLodUsageList</edgelabel>
        </childnode>
        <childnode refid="30900" relation="usage">
          <edgelabel>mFreshFromDisk</edgelabel>
        </childnode>
      </node>
      <node id="31224">
        <label>Ogre::ExternalTextureSourceManager</label>
        <link refid="classOgre_1_1ExternalTextureSourceManager"/>
        <childnode refid="31225" relation="public-inheritance">
        </childnode>
        <childnode refid="30907" relation="public-inheritance">
        </childnode>
        <childnode refid="31226" relation="usage">
          <edgelabel>mTextureSystems</edgelabel>
        </childnode>
        <childnode refid="31227" relation="usage">
          <edgelabel>mCurrExternalTextureSource</edgelabel>
        </childnode>
      </node>
      <node id="31033">
        <label>Ogre::MeshPtr</label>
        <link refid="classOgre_1_1MeshPtr"/>
        <childnode refid="31034" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30953">
        <label>std::map&lt; String, uint16 &gt;</label>
        <childnode refid="30888" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="31218">
        <label>Ogre::Singleton&lt; TextureManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31217" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31135">
        <label>Ogre::GpuProgram::CmdVTF</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdVTF"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31173">
        <label>Ogre::set&lt; uint8 &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31213">
        <label>Ogre::SceneManager::SkyDomeGenParameters</label>
        <link refid="structOgre_1_1SceneManager_1_1SkyDomeGenParameters"/>
      </node>
      <node id="30942">
        <label>Ogre::MovableObjectFactory</label>
        <link refid="classOgre_1_1MovableObjectFactory"/>
        <childnode refid="30943" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31120">
        <label>Ogre::map&lt; size_t, GpuLogicalIndexUse &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31235">
        <label>Ogre::RenderWindow</label>
        <link refid="classOgre_1_1RenderWindow"/>
        <childnode refid="30986" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31301">
        <label>std::ios_base</label>
      </node>
      <node id="31165">
        <label>Ogre::SceneManager::SkyPlaneGenParameters</label>
        <link refid="structOgre_1_1SceneManager_1_1SkyPlaneGenParameters"/>
      </node>
      <node id="31210">
        <label>Ogre::vector&lt; Entity * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30912">
        <label>Ogre::Singleton&lt; MaterialManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30904" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31253">
        <label>Ogre::OverlayElementCommands::CmdCaption</label>
        <link refid="classOgre_1_1OverlayElementCommands_1_1CmdCaption"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31247">
        <label>Ogre::Profiler::ProfileHistory</label>
        <link refid="structOgre_1_1Profiler_1_1ProfileHistory"/>
      </node>
      <node id="31217">
        <label>Ogre::TextureManager</label>
        <link refid="classOgre_1_1TextureManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="31218" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31067">
        <label>Ogre::HardwareIndexBufferSharedPtr</label>
        <link refid="classOgre_1_1HardwareIndexBufferSharedPtr"/>
        <childnode refid="31068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31216">
        <label>Ogre::MovablePlane</label>
        <link refid="classOgre_1_1MovablePlane"/>
        <childnode refid="31078" relation="public-inheritance">
        </childnode>
        <childnode refid="31015" relation="public-inheritance">
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mLastTranslate</edgelabel>
        </childnode>
        <childnode refid="31078" relation="usage">
          <edgelabel>mDerivedPlane</edgelabel>
        </childnode>
        <childnode refid="31052" relation="usage">
          <edgelabel>mNullBB</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>msMovableType</edgelabel>
        </childnode>
        <childnode refid="31056" relation="usage">
          <edgelabel>mLastRotate</edgelabel>
        </childnode>
      </node>
      <node id="31172">
        <label>Ogre::vector&lt; size_t &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31065">
        <label>Ogre::IndexData</label>
        <link refid="classOgre_1_1IndexData"/>
        <childnode refid="31066" relation="public-inheritance">
        </childnode>
        <childnode refid="31067" relation="usage">
          <edgelabel>indexBuffer</edgelabel>
        </childnode>
      </node>
      <node id="31107">
        <label>PassAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31020">
        <label>NodeAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31019">
        <label>Ogre::Node</label>
        <link refid="classOgre_1_1Node"/>
        <childnode refid="31020" relation="public-inheritance">
        </childnode>
        <childnode refid="30981" relation="usage">
          <edgelabel>mInitialScale</edgelabel>
          <edgelabel>mInitialPosition</edgelabel>
          <edgelabel>mPosition</edgelabel>
          <edgelabel>mDerivedPosition</edgelabel>
          <edgelabel>mDerivedScale</edgelabel>
          <edgelabel>mScale</edgelabel>
        </childnode>
        <childnode refid="31019" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31021" relation="usage">
          <edgelabel>msNameGenerator</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
        </childnode>
        <childnode refid="31022" relation="usage">
          <edgelabel>mChildrenToUpdate</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mCachedTransform</edgelabel>
        </childnode>
        <childnode refid="31024" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
        <childnode refid="31029" relation="usage">
          <edgelabel>mDebug</edgelabel>
        </childnode>
        <childnode refid="31055" relation="usage">
          <edgelabel>mListener</edgelabel>
        </childnode>
        <childnode refid="31056" relation="usage">
          <edgelabel>mInitialOrientation</edgelabel>
          <edgelabel>mDerivedOrientation</edgelabel>
          <edgelabel>mOrientation</edgelabel>
        </childnode>
      </node>
      <node id="31270">
        <label>Ogre::Singleton&lt; ScriptCompilerManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31269" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="30924">
        <label>Ogre::vector&lt; ParameterDef &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30891">
        <label>Ogre::map&lt; String, SetIntMethod &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31119">
        <label>Ogre::GpuLogicalBufferStruct</label>
        <link refid="structOgre_1_1GpuLogicalBufferStruct"/>
        <childnode refid="31114" relation="public-inheritance">
        </childnode>
        <childnode refid="31120" relation="usage">
          <edgelabel>map</edgelabel>
        </childnode>
      </node>
      <node id="31128">
        <label>Ogre::GpuProgram</label>
        <link refid="classOgre_1_1GpuProgram"/>
        <childnode refid="30917" relation="public-inheritance">
        </childnode>
        <childnode refid="31115" relation="usage">
          <edgelabel>mConstantDefs</edgelabel>
        </childnode>
        <childnode refid="31118" relation="usage">
          <edgelabel>mIntLogicalToPhysical</edgelabel>
          <edgelabel>mFloatLogicalToPhysical</edgelabel>
        </childnode>
        <childnode refid="31129" relation="usage">
          <edgelabel>msManNamedConstsFileCmd</edgelabel>
        </childnode>
        <childnode refid="31131" relation="usage">
          <edgelabel>msAdjacencyCmd</edgelabel>
        </childnode>
        <childnode refid="31132" relation="usage">
          <edgelabel>msPoseCmd</edgelabel>
        </childnode>
        <childnode refid="31112" relation="usage">
          <edgelabel>mDefaultParams</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mSyntaxCode</edgelabel>
          <edgelabel>mSource</edgelabel>
          <edgelabel>mFilename</edgelabel>
          <edgelabel>mManualNamedConstantsFile</edgelabel>
        </childnode>
        <childnode refid="31133" relation="usage">
          <edgelabel>msMorphCmd</edgelabel>
        </childnode>
        <childnode refid="31134" relation="usage">
          <edgelabel>msTypeCmd</edgelabel>
        </childnode>
        <childnode refid="31135" relation="usage">
          <edgelabel>msVTFCmd</edgelabel>
        </childnode>
        <childnode refid="31136" relation="usage">
          <edgelabel>msSyntaxCmd</edgelabel>
        </childnode>
        <childnode refid="31137" relation="usage">
          <edgelabel>msSkeletalCmd</edgelabel>
        </childnode>
      </node>
      <node id="30970">
        <label>Ogre::Singleton&lt; SceneManagerEnumerator &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30969" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31130">
        <label>Ogre::ParamCommand</label>
        <link refid="classOgre_1_1ParamCommand"/>
      </node>
      <node id="31129">
        <label>Ogre::GpuProgram::CmdManualNamedConstsFile</label>
        <link refid="classOgre_1_1GpuProgram_1_1CmdManualNamedConstsFile"/>
        <childnode refid="31130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31099">
        <label>Ogre::RenderQueueListener</label>
        <link refid="classOgre_1_1RenderQueueListener"/>
      </node>
      <node id="31140">
        <label>Ogre::vector&lt; IlluminationPass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31079">
        <label>Ogre::map&lt; String, Camera * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31037">
        <label>Ogre::SkeletonPtr</label>
        <link refid="classOgre_1_1SkeletonPtr"/>
        <childnode refid="31038" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31292">
        <label>Ogre::LogManager</label>
        <link refid="classOgre_1_1LogManager"/>
        <childnode refid="31293" relation="public-inheritance">
        </childnode>
        <childnode refid="31294" relation="public-inheritance">
        </childnode>
        <childnode refid="31295" relation="usage">
          <edgelabel>mDefaultLog</edgelabel>
        </childnode>
        <childnode refid="31302" relation="usage">
          <edgelabel>mLogs</edgelabel>
        </childnode>
      </node>
      <node id="31246">
        <label>Ogre::Profiler::ProfileInstance</label>
        <link refid="classOgre_1_1Profiler_1_1ProfileInstance"/>
        <childnode refid="31242" relation="public-inheritance">
        </childnode>
        <childnode refid="31247" relation="usage">
          <edgelabel>history</edgelabel>
        </childnode>
        <childnode refid="31248" relation="usage">
          <edgelabel>children</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="31246" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="31249" relation="usage">
          <edgelabel>frame</edgelabel>
        </childnode>
      </node>
      <node id="31003">
        <label>Ogre::multimap&lt; HardwareVertexBuffer *, HardwareVertexBufferSharedPtr &gt;</label>
        <link refid="structOgre_1_1multimap"/>
      </node>
      <node id="30989">
        <label>Ogre::Timer</label>
        <link refid="classOgre_1_1Timer"/>
        <childnode refid="30990" relation="public-inheritance">
        </childnode>
        <childnode refid="30990" relation="public-inheritance">
        </childnode>
        <childnode refid="30990" relation="public-inheritance">
        </childnode>
        <childnode refid="30990" relation="public-inheritance">
        </childnode>
        <childnode refid="30990" relation="public-inheritance">
        </childnode>
        <childnode refid="30990" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30963">
        <label>Ogre::WorkQueue::ResponseHandler</label>
        <link refid="classOgre_1_1WorkQueue_1_1ResponseHandler"/>
      </node>
      <node id="31179">
        <label>Ogre::vector&lt; char &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30948">
        <label>Ogre::map&lt; String, OverlayElementFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30959">
        <label>Ogre::map&lt; String, HighLevelGpuProgramFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30955">
        <label>Ogre::HighLevelGpuProgramManager</label>
        <link refid="classOgre_1_1HighLevelGpuProgramManager"/>
        <childnode refid="30905" relation="public-inheritance">
        </childnode>
        <childnode refid="30956" relation="public-inheritance">
        </childnode>
        <childnode refid="30957" relation="usage">
          <edgelabel>mNullFactory</edgelabel>
          <edgelabel>mUnifiedFactory</edgelabel>
        </childnode>
        <childnode refid="30959" relation="usage">
          <edgelabel>mFactories</edgelabel>
        </childnode>
      </node>
      <node id="31181">
        <label>Ogre::vector&lt; EdgeGroup &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31269">
        <label>Ogre::ScriptCompilerManager</label>
        <link refid="classOgre_1_1ScriptCompilerManager"/>
        <childnode refid="31270" relation="public-inheritance">
        </childnode>
        <childnode refid="30906" relation="public-inheritance">
        </childnode>
        <childnode refid="31271" relation="public-inheritance">
        </childnode>
        <childnode refid="31272" relation="usage">
          <edgelabel>mManagers</edgelabel>
        </childnode>
        <childnode refid="31273" relation="usage">
          <edgelabel>mBuiltinTranslatorManager</edgelabel>
        </childnode>
        <childnode refid="31275" relation="usage">
          <edgelabel>mListener</edgelabel>
        </childnode>
        <childnode refid="30911" relation="usage">
          <edgelabel>mScriptPatterns</edgelabel>
        </childnode>
      </node>
      <node id="31126">
        <label>Ogre::GpuProgramPtr</label>
        <link refid="classOgre_1_1GpuProgramPtr"/>
        <childnode refid="31127" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31089">
        <label>Ogre::CompositionTargetPass</label>
        <link refid="classOgre_1_1CompositionTargetPass"/>
        <childnode refid="31084" relation="public-inheritance">
        </childnode>
        <childnode refid="31088" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mOutputName</edgelabel>
          <edgelabel>mMaterialScheme</edgelabel>
        </childnode>
        <childnode refid="31090" relation="usage">
          <edgelabel>mPasses</edgelabel>
        </childnode>
      </node>
      <node id="30946">
        <label>Ogre::Singleton&lt; OverlayManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="30945" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31328">
        <label>Ogre::map&lt; Viewport *, CompositorChain * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31030">
        <label>Ogre::Renderable</label>
        <link refid="classOgre_1_1Renderable"/>
        <childnode refid="31031" relation="usage">
          <edgelabel>mCustomParameters</edgelabel>
        </childnode>
        <childnode refid="31032" relation="usage">
          <edgelabel>mRenderSystemData</edgelabel>
        </childnode>
        <childnode refid="31024" relation="usage">
          <edgelabel>mUserObjectBindings</edgelabel>
        </childnode>
      </node>
      <node id="31244">
        <label>Ogre::Overlay</label>
        <link refid="classOgre_1_1Overlay"/>
        <childnode refid="30947" relation="public-inheritance">
        </childnode>
        <childnode refid="31061" relation="usage">
          <edgelabel>mRootNode</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mName</edgelabel>
          <edgelabel>mOrigin</edgelabel>
        </childnode>
        <childnode refid="31245" relation="usage">
          <edgelabel>m2DElements</edgelabel>
        </childnode>
        <childnode refid="31023" relation="usage">
          <edgelabel>mTransform</edgelabel>
        </childnode>
        <childnode refid="31154" relation="usage">
          <edgelabel>mRotate</edgelabel>
        </childnode>
      </node>
      <node id="31054">
        <label>Ogre::vector&lt; MeshLodUsage &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30938">
        <label>Ogre::map&lt; String, ParticleSystemRendererFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30998">
        <label>Ogre::HardwareBuffer</label>
        <link refid="classOgre_1_1HardwareBuffer"/>
        <childnode refid="30999" relation="public-inheritance">
        </childnode>
        <childnode refid="30998" relation="usage">
          <edgelabel>mShadowBuffer</edgelabel>
        </childnode>
      </node>
      <node id="30993">
        <label>Ogre::set&lt; RenderTarget * &gt;</label>
        <link refid="structOgre_1_1set"/>
      </node>
      <node id="31204">
        <label>Ogre::map&lt; String, MovableObject * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31082">
        <label>Ogre::RenderTargetListener</label>
        <link refid="classOgre_1_1RenderTargetListener"/>
      </node>
      <node id="31123">
        <label>Ogre::vector&lt; int &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31073">
        <label>Ogre::vector&lt; MovableObjectLodChangedEvent &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31007">
        <label>Ogre::Viewport</label>
        <link refid="classOgre_1_1Viewport"/>
        <childnode refid="31008" relation="public-inheritance">
        </childnode>
        <childnode refid="30985" relation="usage">
          <edgelabel>mBackColour</edgelabel>
        </childnode>
        <childnode refid="30986" relation="usage">
          <edgelabel>mTarget</edgelabel>
        </childnode>
        <childnode refid="31009" relation="usage">
          <edgelabel>mRQSequence</edgelabel>
        </childnode>
        <childnode refid="31012" relation="usage">
          <edgelabel>mListeners</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mMaterialSchemeName</edgelabel>
          <edgelabel>mRQSequenceName</edgelabel>
        </childnode>
        <childnode refid="31013" relation="usage">
          <edgelabel>mCamera</edgelabel>
        </childnode>
      </node>
      <node id="31152">
        <label>Ogre::map&lt; uint16, Vector4 &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31162">
        <label>AnimationAlloc</label>
        <link refid="classOgre_1_1AllocatedObject"/>
      </node>
      <node id="31320">
        <label>Ogre::SharedPtr&lt; ControllerValue&lt; Real &gt; &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31321" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="30903">
        <label>Ogre::map&lt; String, RenderSystemCapabilities * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31286">
        <label>Ogre::vector&lt; ResourceGroupListener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31245">
        <label>Ogre::list&lt; OverlayContainer * &gt;</label>
        <link refid="structOgre_1_1list"/>
      </node>
      <node id="31110">
        <label>Ogre::GpuProgramUsage</label>
        <link refid="classOgre_1_1GpuProgramUsage"/>
        <childnode refid="31111" relation="public-inheritance">
        </childnode>
        <childnode refid="31107" relation="public-inheritance">
        </childnode>
        <childnode refid="31112" relation="usage">
          <edgelabel>mParameters</edgelabel>
        </childnode>
        <childnode refid="31106" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="31126" relation="usage">
          <edgelabel>mProgram</edgelabel>
        </childnode>
      </node>
      <node id="31233">
        <label>Ogre::FactoryObj&lt; Archive &gt;</label>
        <link refid="classOgre_1_1FactoryObj"/>
      </node>
      <node id="31249">
        <label>Ogre::Profiler::ProfileFrame</label>
        <link refid="structOgre_1_1Profiler_1_1ProfileFrame"/>
      </node>
      <node id="30977">
        <label>Ogre::map&lt; String, SceneManager * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31111">
        <label>Ogre::Resource::Listener</label>
        <link refid="classOgre_1_1Resource_1_1Listener"/>
      </node>
      <node id="31045">
        <label>Ogre::VertexData</label>
        <link refid="classOgre_1_1VertexData"/>
        <childnode refid="30983" relation="public-inheritance">
        </childnode>
        <childnode refid="31046" relation="usage">
          <edgelabel>hwAnimationDataList</edgelabel>
        </childnode>
        <childnode refid="30982" relation="usage">
          <edgelabel>vertexDeclaration</edgelabel>
        </childnode>
        <childnode refid="31000" relation="usage">
          <edgelabel>mMgr</edgelabel>
        </childnode>
        <childnode refid="30995" relation="usage">
          <edgelabel>hardwareShadowVolWBuffer</edgelabel>
        </childnode>
        <childnode refid="31047" relation="usage">
          <edgelabel>vertexBufferBinding</edgelabel>
        </childnode>
      </node>
      <node id="30940">
        <label>Ogre::map&lt; String, ParticleEmitterFactory * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30906">
        <label>Ogre::ScriptLoader</label>
        <link refid="classOgre_1_1ScriptLoader"/>
      </node>
      <node id="31277">
        <label>Ogre::Singleton&lt; ResourceGroupManager &gt;</label>
        <link refid="classOgre_1_1Singleton"/>
        <childnode refid="31276" relation="usage">
          <edgelabel>msSingleton</edgelabel>
        </childnode>
      </node>
      <node id="31143">
        <label>Ogre::vector&lt; Pass * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30918">
        <label>Ogre::StringInterface</label>
        <link refid="classOgre_1_1StringInterface"/>
        <childnode refid="30919" relation="usage">
          <edgelabel>msDictionary</edgelabel>
        </childnode>
        <childnode refid="30922" relation="usage">
          <edgelabel>mParamDict</edgelabel>
        </childnode>
        <childnode refid="30888" relation="usage">
          <edgelabel>mParamDictName</edgelabel>
        </childnode>
      </node>
      <node id="31317">
        <label>Ogre::SharedPtr&lt; ControllerFunction&lt; Real &gt; &gt;</label>
        <link refid="classOgre_1_1SharedPtr"/>
        <childnode refid="31318" relation="usage">
          <edgelabel>pRep</edgelabel>
        </childnode>
      </node>
      <node id="31142">
        <label>Ogre::vector&lt; GPUDeviceNameRule &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31194">
        <label>Ogre::vector&lt; ShadowCaster * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31085">
        <label>Ogre::vector&lt; CompositorInstance * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="30899">
        <label>Ogre::map&lt; String, Capabilities &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31012">
        <label>Ogre::vector&lt; Listener * &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31103">
        <label>Ogre::vector&lt; TargetOperation &gt;</label>
        <link refid="structOgre_1_1vector"/>
      </node>
      <node id="31048">
        <label>Ogre::map&lt; unsigned short, HardwareVertexBufferSharedPtr &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30967">
        <label>Ogre::map&lt; Resource *, MeshBuildParams &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="30888">
        <label>std::string</label>
        <childnode refid="30889" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31083">
        <label>Ogre::Viewport::Listener</label>
        <link refid="classOgre_1_1Viewport_1_1Listener"/>
      </node>
      <node id="31016">
        <label>Ogre::ShadowCaster</label>
        <link refid="classOgre_1_1ShadowCaster"/>
      </node>
      <node id="31196">
        <label>Ogre::map&lt; String, MovableObjectCollection * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
      <node id="31199">
        <label>Ogre::VisibleObjectsBoundsInfo</label>
        <link refid="structOgre_1_1VisibleObjectsBoundsInfo"/>
        <childnode refid="31052" relation="usage">
          <edgelabel>aabb</edgelabel>
          <edgelabel>receiverAabb</edgelabel>
        </childnode>
      </node>
      <node id="30991">
        <label>Ogre::map&lt; int, Viewport * &gt;</label>
        <link refid="structOgre_1_1map"/>
      </node>
    </collaborationgraph>
    <location file="/home/david/workspace/Mogre/include/OgreRoot.h" line="68" bodyfile="/home/david/workspace/Mogre/include/OgreRoot.h" bodystart="67" bodyend="1071"/>
    <listofallmembers>
      <member refid="classOgre_1_1Root_1a3840c316ccddef1ccadf51325ad72ee2" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_allocateNextMovableObjectTypeFlag</name></member>
      <member refid="classOgre_1_1Root_1a01d3244dcf290c2db36aea6b0c63616a" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_fireFrameEnded</name></member>
      <member refid="classOgre_1_1Root_1a57ec49d0fd19402ea8a4336f53ab62b4" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_fireFrameEnded</name></member>
      <member refid="classOgre_1_1Root_1a23fd83ef996349d5151cd93ca4908d36" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_fireFrameRenderingQueued</name></member>
      <member refid="classOgre_1_1Root_1a15166e7cc1e879b71948665737e79ce6" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_fireFrameRenderingQueued</name></member>
      <member refid="classOgre_1_1Root_1a194d3177b24dae7d73255268773a54b3" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_fireFrameStarted</name></member>
      <member refid="classOgre_1_1Root_1af747fc0427276e6c6936dd6a5ca01e87" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_fireFrameStarted</name></member>
      <member refid="classOgre_1_1Root_1a55ee6b25390b1fe7406fd7ef327472a1" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_getCurrentSceneManager</name></member>
      <member refid="classOgre_1_1Root_1a16b5488539651d697d0a4dd5cdbdd4c3" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_popCurrentSceneManager</name></member>
      <member refid="classOgre_1_1Root_1a14ab7036973eb56ee4e1ad10304d9b12" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_pushCurrentSceneManager</name></member>
      <member refid="classOgre_1_1Root_1a24559fa6a4f1772c7518fcb0911278f4" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_updateAllRenderTargets</name></member>
      <member refid="classOgre_1_1Root_1aba26bc9123d8725d971e458e48c2694f" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>_updateAllRenderTargets</name></member>
      <member refid="classOgre_1_1Root_1aed3244a81b1c1cec76c675f8e62d7f5e" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>addFrameListener</name></member>
      <member refid="classOgre_1_1Root_1a261189545f730e6243418d93cebfb75b" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>addMovableObjectFactory</name></member>
      <member refid="classOgre_1_1Root_1ae3d8c9161ddf19b4130813d9b5d51905" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>addRenderSystem</name></member>
      <member refid="classOgre_1_1Root_1a1f736040c539391cf730eb3f7da05d1d" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>addResourceLocation</name></member>
      <member refid="classOgre_1_1Root_1a541c72ca9f592e7a754e751e2b55e934" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>addSceneManagerFactory</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a366445eb206e55a2199267b8b9089ebb" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>AllocatedObject</name></member>
      <member refid="classOgre_1_1Root_1a589c6e44ae36cec130d0dcb8ca551f08" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>calculateEventTime</name></member>
      <member refid="classOgre_1_1Root_1a2afff4a877a26bff8b47d32f9dcc15a8" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>clearEventTimes</name></member>
      <member refid="classOgre_1_1Root_1a58fb421c717de3fcb51b1cf93da813ff" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>convertColourValue</name></member>
      <member refid="classOgre_1_1Root_1a88447ffc0d999675d0b0ad0bedfae8ef" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>createFileStream</name></member>
      <member refid="classOgre_1_1Root_1a73bbafca83dfb0f6971162efc3710977" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>createRenderQueueInvocationSequence</name></member>
      <member refid="classOgre_1_1Root_1a537b7d1d0937f799cfe4936f6b672620" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>createRenderWindow</name></member>
      <member refid="classOgre_1_1Root_1aeda5e7e1148739e9fbbb2113bb47a6e8" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>createRenderWindows</name></member>
      <member refid="classOgre_1_1Root_1a39df87f396245ac5c1c293c9e49451c6" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>createSceneManager</name></member>
      <member refid="classOgre_1_1Root_1aaec9595063dba21c06b94aa541a183e8" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>createSceneManager</name></member>
      <member refid="classOgre_1_1Root_1acfa8a88f7186f9a665f733e7021c8c34" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>destroyAllRenderQueueInvocationSequences</name></member>
      <member refid="classOgre_1_1Root_1a4ab34dbd132ad5cae81d7753af244f2a" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>destroyRenderQueueInvocationSequence</name></member>
      <member refid="classOgre_1_1Root_1a9c063121d67ba39f658295b3ccefb37a" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>destroyRenderTarget</name></member>
      <member refid="classOgre_1_1Root_1acb88716975857a8e39f879bfd87180b9" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>destroyRenderTarget</name></member>
      <member refid="classOgre_1_1Root_1a7ee696cf420c9fa73429b9aed250f6b4" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>destroySceneManager</name></member>
      <member refid="classOgre_1_1Root_1aa162fb6b49c21c8f17c7a2a05a6c537e" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>detachRenderTarget</name></member>
      <member refid="classOgre_1_1Root_1afe02a03ca34a3836c36f0b6753b617f8" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>detachRenderTarget</name></member>
      <member refid="classOgre_1_1Root_1ab1fb026ba6b14078cacd620e7f2a8c3a" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>EventTimesQueue</name></member>
      <member refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342ae392b758b6c82d9b7f43ef2c385f7564" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>FETT_ANY</name></member>
      <member refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a608264d63d0b5b84a05883d1b9b22eb5" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>FETT_COUNT</name></member>
      <member refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a7138134f06499aff19becd379e6f29ed" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>FETT_ENDED</name></member>
      <member refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a634c639c6480850d63f88fee6dd78913" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>FETT_QUEUED</name></member>
      <member refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342a66ae048b1f52c537764494e797183d57" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>FETT_STARTED</name></member>
      <member refid="classOgre_1_1Root_1a6cb1549aef6cc6c06262d087a88a5342" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>FrameEventTimeType</name></member>
      <member refid="classOgre_1_1Root_1a7f5006f1ef629981b96252860beef846" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getAutoCreatedWindow</name></member>
      <member refid="classOgre_1_1Root_1a44c5c5f2f90057d57d270c9200cd1588" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getAvailableRenderers</name></member>
      <member refid="classOgre_1_1Root_1ab6d87c0af70d247b8809cf61e9482840" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getDefaultMinPixelSize</name></member>
      <member refid="classOgre_1_1Root_1aee8523d20d3d69a6cf39ed0499663a52" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getDisplayMonitorCount</name></member>
      <member refid="classOgre_1_1Root_1a6ed5ddc573f7cc53933c75c8aa1ebbc1" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getErrorDescription</name></member>
      <member refid="classOgre_1_1Root_1a652690a3524c8164b850f3655d94c6dd" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getFrameSmoothingPeriod</name></member>
      <member refid="classOgre_1_1Root_1a6fc4402d867b3d553cf302701fdff331" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getInstalledPlugins</name></member>
      <member refid="classOgre_1_1Root_1a3372db66af0d91da9184af90c1a68528" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getMeshManager</name></member>
      <member refid="classOgre_1_1Root_1ab89302520cbbe6d78d25e325081ea906" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getMovableObjectFactory</name></member>
      <member refid="classOgre_1_1Root_1af1e6afe76f1080762975203e6778c3dd" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getMovableObjectFactoryIterator</name></member>
      <member refid="classOgre_1_1Root_1acb112ab3ff6088c5ebd743e30b2af8bd" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getNextFrameNumber</name></member>
      <member refid="classOgre_1_1Root_1ad9abb5bd238fbcaa7ec0474ea1de1220" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getRemoveRenderQueueStructuresOnClear</name></member>
      <member refid="classOgre_1_1Root_1ac2ba507a55bfd6c69552e3d74e1ce7aa" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getRenderQueueInvocationSequence</name></member>
      <member refid="classOgre_1_1Root_1ab8ca3d5abebba7a14650db5f618286d0" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getRenderSystem</name></member>
      <member refid="classOgre_1_1Root_1adaeb26515fba041094510f71fb6757c9" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getRenderSystemByName</name></member>
      <member refid="classOgre_1_1Root_1a7bc9f24bec1e8b69a80d246e68bd8bee" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getRenderTarget</name></member>
      <member refid="classOgre_1_1Root_1a6ce7950bbf4dcd91977d9b6f2c09dc1a" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getSceneManager</name></member>
      <member refid="classOgre_1_1Root_1ad961ad4d34de07ba101ea92e33007a7b" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getSceneManagerIterator</name></member>
      <member refid="classOgre_1_1Root_1a1dc4e50e8ecac2323bdea8f6ad999307" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getSceneManagerMetaData</name></member>
      <member refid="classOgre_1_1Root_1a4e8400b2d0c34d7c6076a4e38044a1e6" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getSceneManagerMetaDataIterator</name></member>
      <member refid="classOgre_1_1Root_1a6c8959a647a86d6732a8a32f57b6a6ee" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getSingleton</name></member>
      <member refid="classOgre_1_1Root_1a0813c15b258db16ef212dba53b72c3e4" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getSingletonPtr</name></member>
      <member refid="classOgre_1_1Root_1a55641d6a52ee618286bba6e9892e8d78" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getTextureManager</name></member>
      <member refid="classOgre_1_1Root_1a507ed05fd59e0697797b8c9c9038448f" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getTimer</name></member>
      <member refid="classOgre_1_1Root_1ac488cfcbb657af17483e9ce551965d37" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>getWorkQueue</name></member>
      <member refid="classOgre_1_1Root_1af84bb44e9b7f13a2a50ecf17a4091cc4" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>hasMovableObjectFactory</name></member>
      <member refid="classOgre_1_1Root_1ae4e0a5b714f99772dd203400e0ef9ad9" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>hasSceneManager</name></member>
      <member refid="classOgre_1_1Root_1ab940f0e3b8bff37feb0987c8b3e128b5" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>initialise</name></member>
      <member refid="classOgre_1_1Root_1a18bb6fd6e4bc7d840708711acb583192" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>initialisePlugins</name></member>
      <member refid="classOgre_1_1Root_1a5ea47cd9c094644e1abac7607e1922fd" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>installPlugin</name></member>
      <member refid="classOgre_1_1Root_1aadeea91308b59cab2b608abb9c17bfdf" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>isBlendIndicesGpuRedundant</name></member>
      <member refid="classOgre_1_1Root_1af3f07ed823a3853643ab938f641db174" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>isBlendWeightsGpuRedundant</name></member>
      <member refid="classOgre_1_1Root_1a792a705f087b59b4760d068aebb689cf" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>isInitialised</name></member>
      <member refid="classOgre_1_1Root_1af0744e85bddb05885a91809bcdf8f864" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>loadPlugin</name></member>
      <member refid="classOgre_1_1Root_1adaaebab61f306315895f1d513bf43378" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>loadPlugins</name></member>
      <member refid="classOgre_1_1Root_1ac4a929b204a97d7b27490fe1850adb46" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mActiveRenderer</name></member>
      <member refid="classOgre_1_1Root_1a39be2ce244e0157fa2be4ff71e77cc06" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mArchiveManager</name></member>
      <member refid="classOgre_1_1Root_1a709848bdc0d717b00e17137422a2223c" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mAutoWindow</name></member>
      <member refid="classOgre_1_1Root_1ae9209b24ac7527d700763c09a6363c3c" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mBillboardChainFactory</name></member>
      <member refid="classOgre_1_1Root_1abfac646f213dd7979133d226f86412a9" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mBillboardSetFactory</name></member>
      <member refid="classOgre_1_1Root_1addebb508d0904d9f6237fdcbddb54215" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mBorderPanelFactory</name></member>
      <member refid="classOgre_1_1Root_1a3d770fbd120b23453b8a718d1a5edf8b" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mCompilerManager</name></member>
      <member refid="classOgre_1_1Root_1a7e0f9cf69e91d888be189ae48ff862bd" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mCompositorManager</name></member>
      <member refid="classOgre_1_1Root_1ae667f8de9a9f01e010ff39aec8a9048e" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mConfigFileName</name></member>
      <member refid="classOgre_1_1Root_1aca560aa062fd1e99ddbd9b3b05e928ff" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mControllerManager</name></member>
      <member refid="classOgre_1_1Root_1a4cf302eb736882c858fea3b1ad44d5e4" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mDefaultMinPixelSize</name></member>
      <member refid="classOgre_1_1Root_1ae52533981f8d4db39286fdea5e8a3405" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mDynLibManager</name></member>
      <member refid="classOgre_1_1Root_1a1cccf888960743f00f7b56c9f0cd3d4a" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mEmbeddedZipArchiveFactory</name></member>
      <member refid="classOgre_1_1Root_1aa106f6583741c6b9a046a17228a5a5b7" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mEntityFactory</name></member>
      <member refid="classOgre_1_1Root_1afdcf19edc9d8b35905b436cbb23a8d30" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mEventTimes</name></member>
      <member refid="classOgre_1_1Root_1a52c7427e8a66c0462485c8e2f679b329" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mExternalTextureSourceManager</name></member>
      <member refid="classOgre_1_1Root_1a443782dd5784e3465095642c61147689" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mFileSystemArchiveFactory</name></member>
      <member refid="classOgre_1_1Root_1ad06af760b1c4f0172240149699057a0d" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mFirstTimePostWindowInit</name></member>
      <member refid="classOgre_1_1Root_1a15d27dc1773514f058f8db32b47c24ac" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mFontManager</name></member>
      <member refid="classOgre_1_1Root_1a6337b89d271443a0964765f53f1becd4" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mFrameListeners</name></member>
      <member refid="classOgre_1_1Root_1ac8539d70ee251556a15b47ffddf4da47" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mFrameSmoothingTime</name></member>
      <member refid="classOgre_1_1Root_1a63a833e5c6c3552ecc9feba72f80567e" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mHighLevelGpuProgramManager</name></member>
      <member refid="classOgre_1_1Root_1afaaa161c9e522097f1a01a90484be1a3" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mIsBlendIndicesGpuRedundant</name></member>
      <member refid="classOgre_1_1Root_1aabcc1509bd438c6ffcd10534d259a45a" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mIsBlendWeightsGpuRedundant</name></member>
      <member refid="classOgre_1_1Root_1ab140f852c36efd9148aa24a78d49f572" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mIsInitialised</name></member>
      <member refid="classOgre_1_1Root_1a213edd5d35c2447e1151fae69914f9d6" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mLightFactory</name></member>
      <member refid="classOgre_1_1Root_1a00766217e5b7cbce206517ddf323ae0d" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mLodStrategyManager</name></member>
      <member refid="classOgre_1_1Root_1a8341af8ef082c826af5c783b1e546351" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mLogManager</name></member>
      <member refid="classOgre_1_1Root_1aadd8acdd959f49fb6a810420029eeea6" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mManualObjectFactory</name></member>
      <member refid="classOgre_1_1Root_1ace4669983441a497dc4b715385542715" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mMaterialManager</name></member>
      <member refid="classOgre_1_1Root_1ac33d490d608098e459b667b14c7c830d" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mMeshManager</name></member>
      <member refid="classOgre_1_1Root_1aa6113aa862fd0e7cb9bbe3e9a961971a" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mMovableObjectFactoryMap</name></member>
      <member refid="classOgre_1_1Root_1ab820ed46c603efb21feef351d227d857" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mNextFrame</name></member>
      <member refid="classOgre_1_1Root_1a605b3bfce0863ec488c3bb6c317ea1d4" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mNextMovableObjectTypeFlag</name></member>
      <member refid="classOgre_1_1Root_1a724ee7dcbdb7b8052420df2fecd07c0d" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>MovableObjectFactoryIterator</name></member>
      <member refid="classOgre_1_1Root_1a55670df9d65002a8712ac0be55f6b259" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>MovableObjectFactoryMap</name></member>
      <member refid="classOgre_1_1Root_1a52a04311ae0f5779d830c84c956576cf" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mOverlayManager</name></member>
      <member refid="classOgre_1_1Root_1ad3f2106ce6c45d03776ee919078d2acc" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mPanelFactory</name></member>
      <member refid="classOgre_1_1Root_1a9c16c659560840de45862a7899f3efee" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mParticleManager</name></member>
      <member refid="classOgre_1_1Root_1a7adceb013794ab1139e0611bb85a4f89" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mPluginLibs</name></member>
      <member refid="classOgre_1_1Root_1ab35dafba14a43e3fa34c586bb7742742" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mPlugins</name></member>
      <member refid="classOgre_1_1Root_1ae890212d6b5b58ebdd8c60b5ec2f798a" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mProfiler</name></member>
      <member refid="classOgre_1_1Root_1aaab43bb79759734e6bff3047e0c7f698" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mQueuedEnd</name></member>
      <member refid="classOgre_1_1Root_1a2aacd5f1c3dcd7ca6c45b6e0d013516a" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mRemovedFrameListeners</name></member>
      <member refid="classOgre_1_1Root_1af41c03d6a03412ecfcdfac3461e343b3" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mRemoveQueueStructuresOnClear</name></member>
      <member refid="classOgre_1_1Root_1a401807b14c629aa22756dfef915b44c7" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mRenderers</name></member>
      <member refid="classOgre_1_1Root_1a7340f1cbad449a8fee38543d960e9c2e" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mRenderSystemCapabilitiesManager</name></member>
      <member refid="classOgre_1_1Root_1a2c2cfee01223cf83b295a98ee36145f2" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mResourceBackgroundQueue</name></member>
      <member refid="classOgre_1_1Root_1a0ac225dbbfb1d3f16483e89218887c42" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mResourceGroupManager</name></member>
      <member refid="classOgre_1_1Root_1ab5407b6438073851223bdae66324278e" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mRibbonTrailFactory</name></member>
      <member refid="classOgre_1_1Root_1ab1ce8a35c1865013315a7f8fd79e15e5" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mRQSequenceMap</name></member>
      <member refid="classOgre_1_1Root_1a1a7f24c00c7b3df355d050a5854a1938" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mSceneManagerEnum</name></member>
      <member refid="classOgre_1_1Root_1a87ccdca2a9e6d8fe111cd18169983986" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mSceneManagerStack</name></member>
      <member refid="classOgre_1_1Root_1a39cea6378ad03076211928a2cf22e304" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mShadowTextureManager</name></member>
      <member refid="classOgre_1_1Root_1a3ff49e0d841093e25be173ade78bbf7b" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mSkeletonManager</name></member>
      <member refid="classOgre_1_1Singleton_1aff0baaaed91d8505cfb72b7725ae1c37" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>msSingleton</name></member>
      <member refid="classOgre_1_1Root_1ae063ca132e7f404a8393b66a4b115401" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mTextAreaFactory</name></member>
      <member refid="classOgre_1_1Root_1aeb4e1f65f6a10e279660a79124b79066" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mTimer</name></member>
      <member refid="classOgre_1_1Root_1a4d4df87090b486e05d93df1cbc09a0d5" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mVersion</name></member>
      <member refid="classOgre_1_1Root_1a6334087718cb89a5d77910ec5418d4f5" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mWorkQueue</name></member>
      <member refid="classOgre_1_1Root_1a4cc4ec802be128faacb7d78ce5bfd370" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>mZipArchiveFactory</name></member>
      <member refid="classOgre_1_1Root_1a47555efb676ce85beb51df0d7b0f6eae" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>oneTimePostWindowInit</name></member>
      <member refid="classOgre_1_1Root_1a0e0a84e6766fe2090937cd6bc89ace1b" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>openFileStream</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a8357fe4fb4849772b94baa4bf47c7ded" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator delete</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a1c727e879a260c37b00ce5505fe8e144" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator delete</name></member>
      <member refid="classOgre_1_1AllocatedObject_1acb46d4b0a597156d9ba5abc39d127792" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator delete</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a93e6a86dde5483c053ca0f2a85bbfd6c" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator delete[]</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a595ea4c05da8aa987d3800e65d23355d" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator delete[]</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a421b197ca3a38da17e2eb1531a645fa2" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator new</name></member>
      <member refid="classOgre_1_1AllocatedObject_1ac4bdf968b7b9af8a5239a27da73d5711" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator new</name></member>
      <member refid="classOgre_1_1AllocatedObject_1ab78a921e54419be677839cdf15d1f0b8" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator new</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a4be37baef81876985aa1071ad5acc6dd" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator new[]</name></member>
      <member refid="classOgre_1_1AllocatedObject_1afa2943846ba6a2b5824a12857139cf5e" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>operator new[]</name></member>
      <member refid="classOgre_1_1Root_1a5483dc1f87b9861cae629b5aba6a6071" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>PluginInstanceList</name></member>
      <member refid="classOgre_1_1Root_1a4f51fe7c71b67eb166e0c34891611f65" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>PluginLibList</name></member>
      <member refid="classOgre_1_1Root_1af72102f9e62bac4e907480222d524a15" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>populateFrameEvent</name></member>
      <member refid="classOgre_1_1Root_1a3c48cb0d809b950335f4e24552c0a39d" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>queueEndRendering</name></member>
      <member refid="classOgre_1_1Root_1aba900bb388dd68af993df311076a9205" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>removeFrameListener</name></member>
      <member refid="classOgre_1_1Root_1a5dcfb7ee8fb1473fdc973752bc9452b4" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>removeMovableObjectFactory</name></member>
      <member refid="classOgre_1_1Root_1a3a4c957e96e6c95f7f061166e363c378" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>removeResourceLocation</name></member>
      <member refid="classOgre_1_1Root_1afdf0d57e4f6e80bb519336c56ec23a88" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>removeSceneManagerFactory</name></member>
      <member refid="classOgre_1_1Root_1aeaad25268c0ad8007ce8961a32242c77" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>renderOneFrame</name></member>
      <member refid="classOgre_1_1Root_1a7820badfeef2fb9994ea9de17facb218" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>renderOneFrame</name></member>
      <member refid="classOgre_1_1Root_1a47157fb47b40fc61942b1fc17fd7fafd" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>RenderQueueInvocationSequenceMap</name></member>
      <member refid="classOgre_1_1Root_1a06b786d8e0847dfe9cc15e1dea308fcd" prot="private" virt="non-virtual"><scope>Ogre::Root</scope><name>RenderSystem</name></member>
      <member refid="classOgre_1_1Root_1a816c44429449ce436837f53cd4cb8e93" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>restoreConfig</name></member>
      <member refid="classOgre_1_1Root_1a293d1580c95101d72f2155e3fe2237bf" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>Root</name></member>
      <member refid="classOgre_1_1Root_1adc6946eb808dd76774d2c95ae1e0c6d9" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>saveConfig</name></member>
      <member refid="classOgre_1_1Root_1a71fc72b82de9741751d52b64dc3faaad" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>SceneManagerStack</name></member>
      <member refid="classOgre_1_1Root_1a9c610fa759978755ffd9da222fe68b3e" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setBlendIndicesGpuRedundant</name></member>
      <member refid="classOgre_1_1Root_1ab7360b80fdc4eeb6bc63ff594c04bd04" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setBlendWeightsGpuRedundant</name></member>
      <member refid="classOgre_1_1Root_1aa44a0398484e6efc3d13c590f02b0783" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setDefaultMinPixelSize</name></member>
      <member refid="classOgre_1_1Root_1a1f045bf046a75d65e6ddc71f4ebe0b2c" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setFrameSmoothingPeriod</name></member>
      <member refid="classOgre_1_1Root_1acdac409627b2920ecb99f4d1cd4af191" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setRemoveRenderQueueStructuresOnClear</name></member>
      <member refid="classOgre_1_1Root_1af768914a0dd431ee442bf83157daf570" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setRenderSystem</name></member>
      <member refid="classOgre_1_1Root_1afdca040bfe42cac1b33402f37023b121" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>setWorkQueue</name></member>
      <member refid="classOgre_1_1Root_1a3fc8aeaf22da1dccc72ad9fc74b5ef14" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>showConfigDialog</name></member>
      <member refid="classOgre_1_1Root_1adc677530cc7ef50fbd0e37d75c02e16b" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>shutdown</name></member>
      <member refid="classOgre_1_1Root_1a10298d35134c643023d96d191e67ecc4" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>shutdownPlugins</name></member>
      <member refid="classOgre_1_1Singleton_1a2b0622a1223ac3a0c6b9c53e787b8d93" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>Singleton</name></member>
      <member refid="classOgre_1_1Root_1a8eda253befda1255cbfd3b298f62449e" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>startRendering</name></member>
      <member refid="classOgre_1_1Root_1a23417d6cbe7aeeafcc6a1a146a5e7b95" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>uninstallPlugin</name></member>
      <member refid="classOgre_1_1Root_1a9e2492db70157da036a814c84e516500" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>unloadPlugin</name></member>
      <member refid="classOgre_1_1Root_1abac5dadb6113c551560136edc3567611" prot="protected" virt="non-virtual"><scope>Ogre::Root</scope><name>unloadPlugins</name></member>
      <member refid="classOgre_1_1Root_1a0c36540d9764ec4e41940423dd0ae88b" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>useCustomRenderSystemCapabilities</name></member>
      <member refid="classOgre_1_1AllocatedObject_1a499773d35ca98b2df7c2699fc8c1bea2" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>~AllocatedObject</name></member>
      <member refid="classOgre_1_1Root_1ae093f91224577ccb051ac3d8e84c6db8" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>~Root</name></member>
      <member refid="classOgre_1_1Singleton_1a9bc0518bb06d12629e287149cdcc4b5d" prot="public" virt="non-virtual"><scope>Ogre::Root</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
